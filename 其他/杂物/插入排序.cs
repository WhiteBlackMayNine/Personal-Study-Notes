using System;

namespace Lesson25_插入排序
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("插入排序");

            #region 知识点一 插入排序的基本原理
            // 8 7 1 5 4 2 6 3 9
            // 两个区域
            // 排序区
            // 未排序区
            // 用一个索引值做分水岭

            // 未排序区元素
            // 与排序区元素比较
            // 插入到合适位置
            // 直到未排序区清空
            #endregion

            #region 知识点二 代码实现
            //实现升序 把 大的 放在最后面
            int[] arr = new int[] { 8, 7, 1, 5, 4, 2, 6, 3, 9 };

            //前提规则
            //排序开始前
            //首先认为第一个元素在排序区中
            //其它所有元素在未排序区中

            //排序开始后
            //每次将未排序区第一个元素取出用于和
            //排序区中元素比较(从后往前)
            //满足条件（较大或者较小）
            //则排序区中元素往后移动一个位置。

            //注意
            //所有数字都在一个数组中
            //所谓的两个区域是一个分水岭索引

            //第一步
            //能取出未排序区的所有元素进行比较
            //i=1的原因：默认第一个元素就在排序区
            for (int i = 1; i < arr.Length; i++)
            {
                //第二步
                //每一轮
                //1.取出排序区的最后一个元素索引
                int sortIndex = i - 1;
                //2.取出未排序区的第一个元素
                int noSortNum = arr[i];
                //第三步
                //在未排序区进行比较
                //移动位置
                //确定插入索引
                //循环停止的条件
                //1.发现排序区中所有元素都已经比较完
                //2.发现排序区中的元素不满足比较条件了
                while (sortIndex >= 0 &&
                    arr[sortIndex] > noSortNum)
                {
                    //只要进了这个while循环 证明满足条件
                    //排序区中的元素 就应该往后退一格
                    arr[sortIndex + 1] = arr[sortIndex];
                    //移动到排序区的前一个位置 准备继续比较
                    --sortIndex;
                }
                //最终插入数字
                //循环中知识在确定位置 和找最终的插入位置
                //最终插入对应位置 应该循环结束后
                arr[sortIndex + 1] = noSortNum;
            }

            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine(arr[i]);
            }
            #endregion

            #region 知识点三 总结

            //为什么有两层循环
            //第一层循环：一次取出未排序区的元素进行排序
            //第二层循环：找到想要插入的位置

            //为什么第一层循环从1开始遍历
            //插入排序的关键是分两个区域
            //已排序区 和 未排序区
            //默认第一个元素在已排序区

            //为什么使用while循环
            //满足条件才比较
            //否则证明插入位置已确定
            //不需要继续循环

            //为什么可以直接往后移位置
            //每轮未排序数已记录
            //最后一个位置不怕丢

            //为什么确定位置后,是放在sortIndex + 1的位置
            //当循环停止时，插入位置应该是停止循环的索引加1处

            //基本原理
            //两个区域
            //用索引值来区分
            //未排序区与排序区
            //元素不停比较
            //找到合适位置
            //插入当前元素

            //套路写法
            //两层循环
            //一层获取未排序区元素
            //一层找到合适插入位置

            //注意事项
            //默认开头已排序
            //第二层循环外插入

            #endregion

        }
    }
}

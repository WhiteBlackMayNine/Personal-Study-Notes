"use strict";const ct=require("obsidian");function cs(t,e){const n=Object.create(null),s=t.split(",");for(let i=0;i<s.length;i++)n[s[i]]=!0;return e?i=>!!n[i.toLowerCase()]:i=>!!n[i]}const Tt={},Ie=[],Qt=()=>{},pi=()=>!1,mi=/^on[^a-z]/,An=t=>mi.test(t),us=t=>t.startsWith("onUpdate:"),Lt=Object.assign,ds=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},gi=Object.prototype.hasOwnProperty,yt=(t,e)=>gi.call(t,e),dt=Array.isArray,Ee=t=>Qe(t)==="[object Map]",Pn=t=>Qe(t)==="[object Set]",Bs=t=>Qe(t)==="[object Date]",gt=t=>typeof t=="function",zt=t=>typeof t=="string",Ke=t=>typeof t=="symbol",Et=t=>t!==null&&typeof t=="object",fs=t=>Et(t)&&gt(t.then)&&gt(t.catch),fr=Object.prototype.toString,Qe=t=>fr.call(t),vi=t=>Qe(t).slice(8,-1),hr=t=>Qe(t)==="[object Object]",hs=t=>zt(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,hn=cs(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),On=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},wi=/-(\w)/g,Oe=On(t=>t.replace(wi,(e,n)=>n?n.toUpperCase():"")),_i=/\B([A-Z])/g,$e=On(t=>t.replace(_i,"-$1").toLowerCase()),pr=On(t=>t.charAt(0).toUpperCase()+t.slice(1)),Hn=On(t=>t?`on${pr(t)}`:""),Ve=(t,e)=>!Object.is(t,e),pn=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},bn=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},mr=t=>{const e=parseFloat(t);return isNaN(e)?t:e},bi=t=>{const e=zt(t)?Number(t):NaN;return isNaN(e)?t:e};let Ds;const qn=()=>Ds||(Ds=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function tn(t){if(dt(t)){const e={};for(let n=0;n<t.length;n++){const s=t[n],i=zt(s)?Ci(s):tn(s);if(i)for(const r in i)e[r]=i[r]}return e}else{if(zt(t))return t;if(Et(t))return t}}const yi=/;(?![^(]*\))/g,xi=/:([^]+)/,ki=/\/\*[^]*?\*\//g;function Ci(t){const e={};return t.replace(ki,"").split(yi).forEach(n=>{if(n){const s=n.split(xi);s.length>1&&(e[s[0].trim()]=s[1].trim())}}),e}function At(t){let e="";if(zt(t))e=t;else if(dt(t))for(let n=0;n<t.length;n++){const s=At(t[n]);s&&(e+=s+" ")}else if(Et(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const Ti="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Ii=cs(Ti);function gr(t){return!!t||t===""}function Ei(t,e){if(t.length!==e.length)return!1;let n=!0;for(let s=0;n&&s<t.length;s++)n=zn(t[s],e[s]);return n}function zn(t,e){if(t===e)return!0;let n=Bs(t),s=Bs(e);if(n||s)return n&&s?t.getTime()===e.getTime():!1;if(n=Ke(t),s=Ke(e),n||s)return t===e;if(n=dt(t),s=dt(e),n||s)return n&&s?Ei(t,e):!1;if(n=Et(t),s=Et(e),n||s){if(!n||!s)return!1;const i=Object.keys(t).length,r=Object.keys(e).length;if(i!==r)return!1;for(const o in t){const a=t.hasOwnProperty(o),c=e.hasOwnProperty(o);if(a&&!c||!a&&c||!zn(t[o],e[o]))return!1}}return String(t)===String(e)}function Si(t,e){return t.findIndex(n=>zn(n,e))}const kt=t=>zt(t)?t:t==null?"":dt(t)||Et(t)&&(t.toString===fr||!gt(t.toString))?JSON.stringify(t,vr,2):String(t),vr=(t,e)=>e&&e.__v_isRef?vr(t,e.value):Ee(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[s,i])=>(n[`${s} =>`]=i,n),{})}:Pn(e)?{[`Set(${e.size})`]:[...e.values()]}:Et(e)&&!dt(e)&&!hr(e)?String(e):e;let Yt;class Ai{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Yt,!e&&Yt&&(this.index=(Yt.scopes||(Yt.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=Yt;try{return Yt=this,e()}finally{Yt=n}}}on(){Yt=this}off(){Yt=this.parent}stop(e){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function Pi(t,e=Yt){e&&e.active&&e.effects.push(t)}function Oi(){return Yt}const ps=t=>{const e=new Set(t);return e.w=0,e.n=0,e},wr=t=>(t.w&pe)>0,_r=t=>(t.n&pe)>0,zi=({deps:t})=>{if(t.length)for(let e=0;e<t.length;e++)t[e].w|=pe},Bi=t=>{const{deps:e}=t;if(e.length){let n=0;for(let s=0;s<e.length;s++){const i=e[s];wr(i)&&!_r(i)?i.delete(t):e[n++]=i,i.w&=~pe,i.n&=~pe}e.length=n}},Jn=new WeakMap;let Ne=0,pe=1;const Yn=30;let Xt;const xe=Symbol(""),Gn=Symbol("");class ms{constructor(e,n=null,s){this.fn=e,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,Pi(this,s)}run(){if(!this.active)return this.fn();let e=Xt,n=de;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Xt,Xt=this,de=!0,pe=1<<++Ne,Ne<=Yn?zi(this):$s(this),this.fn()}finally{Ne<=Yn&&Bi(this),pe=1<<--Ne,Xt=this.parent,de=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Xt===this?this.deferStop=!0:this.active&&($s(this),this.onStop&&this.onStop(),this.active=!1)}}function $s(t){const{deps:e}=t;if(e.length){for(let n=0;n<e.length;n++)e[n].delete(t);e.length=0}}let de=!0;const br=[];function Le(){br.push(de),de=!1}function Ue(){const t=br.pop();de=t===void 0?!0:t}function Kt(t,e,n){if(de&&Xt){let s=Jn.get(t);s||Jn.set(t,s=new Map);let i=s.get(n);i||s.set(n,i=ps()),yr(i)}}function yr(t,e){let n=!1;Ne<=Yn?_r(t)||(t.n|=pe,n=!wr(t)):n=!t.has(Xt),n&&(t.add(Xt),Xt.deps.push(t))}function re(t,e,n,s,i,r){const o=Jn.get(t);if(!o)return;let a=[];if(e==="clear")a=[...o.values()];else if(n==="length"&&dt(t)){const c=Number(s);o.forEach((d,y)=>{(y==="length"||y>=c)&&a.push(d)})}else switch(n!==void 0&&a.push(o.get(n)),e){case"add":dt(t)?hs(n)&&a.push(o.get("length")):(a.push(o.get(xe)),Ee(t)&&a.push(o.get(Gn)));break;case"delete":dt(t)||(a.push(o.get(xe)),Ee(t)&&a.push(o.get(Gn)));break;case"set":Ee(t)&&a.push(o.get(xe));break}if(a.length===1)a[0]&&Xn(a[0]);else{const c=[];for(const d of a)d&&c.push(...d);Xn(ps(c))}}function Xn(t,e){const n=dt(t)?t:[...t];for(const s of n)s.computed&&Ls(s);for(const s of n)s.computed||Ls(s)}function Ls(t,e){(t!==Xt||t.allowRecurse)&&(t.scheduler?t.scheduler():t.run())}const Di=cs("__proto__,__v_isRef,__isVue"),xr=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(Ke)),$i=gs(),Li=gs(!1,!0),Ui=gs(!0),Us=Mi();function Mi(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...n){const s=xt(this);for(let r=0,o=this.length;r<o;r++)Kt(s,"get",r+"");const i=s[e](...n);return i===-1||i===!1?s[e](...n.map(xt)):i}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...n){Le();const s=xt(this)[e].apply(this,n);return Ue(),s}}),t}function Ri(t){const e=xt(this);return Kt(e,"has",t),e.hasOwnProperty(t)}function gs(t=!1,e=!1){return function(s,i,r){if(i==="__v_isReactive")return!t;if(i==="__v_isReadonly")return t;if(i==="__v_isShallow")return e;if(i==="__v_raw"&&r===(t?e?eo:Er:e?Ir:Tr).get(s))return s;const o=dt(s);if(!t){if(o&&yt(Us,i))return Reflect.get(Us,i,r);if(i==="hasOwnProperty")return Ri}const a=Reflect.get(s,i,r);return(Ke(i)?xr.has(i):Di(i))||(t||Kt(s,"get",i),e)?a:Nt(a)?o&&hs(i)?a:a.value:Et(a)?t?Sr(a):_s(a):a}}const Fi=kr(),ji=kr(!0);function kr(t=!1){return function(n,s,i,r){let o=n[s];if(ze(o)&&Nt(o)&&!Nt(i))return!1;if(!t&&(!yn(i)&&!ze(i)&&(o=xt(o),i=xt(i)),!dt(n)&&Nt(o)&&!Nt(i)))return o.value=i,!0;const a=dt(n)&&hs(s)?Number(s)<n.length:yt(n,s),c=Reflect.set(n,s,i,r);return n===xt(r)&&(a?Ve(i,o)&&re(n,"set",s,i):re(n,"add",s,i)),c}}function Ni(t,e){const n=yt(t,e);t[e];const s=Reflect.deleteProperty(t,e);return s&&n&&re(t,"delete",e,void 0),s}function Hi(t,e){const n=Reflect.has(t,e);return(!Ke(e)||!xr.has(e))&&Kt(t,"has",e),n}function Wi(t){return Kt(t,"iterate",dt(t)?"length":xe),Reflect.ownKeys(t)}const Cr={get:$i,set:Fi,deleteProperty:Ni,has:Hi,ownKeys:Wi},Zi={get:Ui,set(t,e){return!0},deleteProperty(t,e){return!0}},Ki=Lt({},Cr,{get:Li,set:ji}),vs=t=>t,Bn=t=>Reflect.getPrototypeOf(t);function rn(t,e,n=!1,s=!1){t=t.__v_raw;const i=xt(t),r=xt(e);n||(e!==r&&Kt(i,"get",e),Kt(i,"get",r));const{has:o}=Bn(i),a=s?vs:n?ys:qe;if(o.call(i,e))return a(t.get(e));if(o.call(i,r))return a(t.get(r));t!==i&&t.get(e)}function on(t,e=!1){const n=this.__v_raw,s=xt(n),i=xt(t);return e||(t!==i&&Kt(s,"has",t),Kt(s,"has",i)),t===i?n.has(t):n.has(t)||n.has(i)}function an(t,e=!1){return t=t.__v_raw,!e&&Kt(xt(t),"iterate",xe),Reflect.get(t,"size",t)}function Ms(t){t=xt(t);const e=xt(this);return Bn(e).has.call(e,t)||(e.add(t),re(e,"add",t,t)),this}function Rs(t,e){e=xt(e);const n=xt(this),{has:s,get:i}=Bn(n);let r=s.call(n,t);r||(t=xt(t),r=s.call(n,t));const o=i.call(n,t);return n.set(t,e),r?Ve(e,o)&&re(n,"set",t,e):re(n,"add",t,e),this}function Fs(t){const e=xt(this),{has:n,get:s}=Bn(e);let i=n.call(e,t);i||(t=xt(t),i=n.call(e,t)),s&&s.call(e,t);const r=e.delete(t);return i&&re(e,"delete",t,void 0),r}function js(){const t=xt(this),e=t.size!==0,n=t.clear();return e&&re(t,"clear",void 0,void 0),n}function ln(t,e){return function(s,i){const r=this,o=r.__v_raw,a=xt(o),c=e?vs:t?ys:qe;return!t&&Kt(a,"iterate",xe),o.forEach((d,y)=>s.call(i,c(d),c(y),r))}}function cn(t,e,n){return function(...s){const i=this.__v_raw,r=xt(i),o=Ee(r),a=t==="entries"||t===Symbol.iterator&&o,c=t==="keys"&&o,d=i[t](...s),y=n?vs:e?ys:qe;return!e&&Kt(r,"iterate",c?Gn:xe),{next(){const{value:m,done:p}=d.next();return p?{value:m,done:p}:{value:a?[y(m[0]),y(m[1])]:y(m),done:p}},[Symbol.iterator](){return this}}}}function ae(t){return function(...e){return t==="delete"?!1:this}}function Vi(){const t={get(r){return rn(this,r)},get size(){return an(this)},has:on,add:Ms,set:Rs,delete:Fs,clear:js,forEach:ln(!1,!1)},e={get(r){return rn(this,r,!1,!0)},get size(){return an(this)},has:on,add:Ms,set:Rs,delete:Fs,clear:js,forEach:ln(!1,!0)},n={get(r){return rn(this,r,!0)},get size(){return an(this,!0)},has(r){return on.call(this,r,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:ln(!0,!1)},s={get(r){return rn(this,r,!0,!0)},get size(){return an(this,!0)},has(r){return on.call(this,r,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:ln(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{t[r]=cn(r,!1,!1),n[r]=cn(r,!0,!1),e[r]=cn(r,!1,!0),s[r]=cn(r,!0,!0)}),[t,n,e,s]}const[qi,Ji,Yi,Gi]=Vi();function ws(t,e){const n=e?t?Gi:Yi:t?Ji:qi;return(s,i,r)=>i==="__v_isReactive"?!t:i==="__v_isReadonly"?t:i==="__v_raw"?s:Reflect.get(yt(n,i)&&i in s?n:s,i,r)}const Xi={get:ws(!1,!1)},Qi={get:ws(!1,!0)},to={get:ws(!0,!1)},Tr=new WeakMap,Ir=new WeakMap,Er=new WeakMap,eo=new WeakMap;function no(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function so(t){return t.__v_skip||!Object.isExtensible(t)?0:no(vi(t))}function _s(t){return ze(t)?t:bs(t,!1,Cr,Xi,Tr)}function ro(t){return bs(t,!1,Ki,Qi,Ir)}function Sr(t){return bs(t,!0,Zi,to,Er)}function bs(t,e,n,s,i){if(!Et(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const r=i.get(t);if(r)return r;const o=so(t);if(o===0)return t;const a=new Proxy(t,o===2?s:n);return i.set(t,a),a}function Se(t){return ze(t)?Se(t.__v_raw):!!(t&&t.__v_isReactive)}function ze(t){return!!(t&&t.__v_isReadonly)}function yn(t){return!!(t&&t.__v_isShallow)}function Ar(t){return Se(t)||ze(t)}function xt(t){const e=t&&t.__v_raw;return e?xt(e):t}function Pr(t){return bn(t,"__v_skip",!0),t}const qe=t=>Et(t)?_s(t):t,ys=t=>Et(t)?Sr(t):t;function Or(t){de&&Xt&&(t=xt(t),yr(t.dep||(t.dep=ps())))}function zr(t,e){t=xt(t);const n=t.dep;n&&Xn(n)}function Nt(t){return!!(t&&t.__v_isRef===!0)}function ft(t){return io(t,!1)}function io(t,e){return Nt(t)?t:new oo(t,e)}class oo{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:xt(e),this._value=n?e:qe(e)}get value(){return Or(this),this._value}set value(e){const n=this.__v_isShallow||yn(e)||ze(e);e=n?e:xt(e),Ve(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:qe(e),zr(this))}}function Pt(t){return Nt(t)?t.value:t}const ao={get:(t,e,n)=>Pt(Reflect.get(t,e,n)),set:(t,e,n,s)=>{const i=t[e];return Nt(i)&&!Nt(n)?(i.value=n,!0):Reflect.set(t,e,n,s)}};function Br(t){return Se(t)?t:new Proxy(t,ao)}class lo{constructor(e,n,s,i){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new ms(e,()=>{this._dirty||(this._dirty=!0,zr(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=s}get value(){const e=xt(this);return Or(e),(e._dirty||!e._cacheable)&&(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function co(t,e,n=!1){let s,i;const r=gt(t);return r?(s=t,i=Qt):(s=t.get,i=t.set),new lo(s,i,r||!i,n)}function fe(t,e,n,s){let i;try{i=s?t(...s):t()}catch(r){en(r,e,n)}return i}function te(t,e,n,s){if(gt(t)){const r=fe(t,e,n,s);return r&&fs(r)&&r.catch(o=>{en(o,e,n)}),r}const i=[];for(let r=0;r<t.length;r++)i.push(te(t[r],e,n,s));return i}function en(t,e,n,s=!0){const i=e?e.vnode:null;if(e){let r=e.parent;const o=e.proxy,a=n;for(;r;){const d=r.ec;if(d){for(let y=0;y<d.length;y++)if(d[y](t,o,a)===!1)return}r=r.parent}const c=e.appContext.config.errorHandler;if(c){fe(c,null,10,[t,o,a]);return}}uo(t,n,i,s)}function uo(t,e,n,s=!0){console.error(t)}let Je=!1,Qn=!1;const jt=[];let ne=0;const Ae=[];let se=null,_e=0;const Dr=Promise.resolve();let xs=null;function fo(t){const e=xs||Dr;return t?e.then(this?t.bind(this):t):e}function ho(t){let e=ne+1,n=jt.length;for(;e<n;){const s=e+n>>>1;Ye(jt[s])<t?e=s+1:n=s}return e}function ks(t){(!jt.length||!jt.includes(t,Je&&t.allowRecurse?ne+1:ne))&&(t.id==null?jt.push(t):jt.splice(ho(t.id),0,t),$r())}function $r(){!Je&&!Qn&&(Qn=!0,xs=Dr.then(Mr))}function po(t){const e=jt.indexOf(t);e>ne&&jt.splice(e,1)}function Lr(t){dt(t)?Ae.push(...t):(!se||!se.includes(t,t.allowRecurse?_e+1:_e))&&Ae.push(t),$r()}function Ns(t,e=Je?ne+1:0){for(;e<jt.length;e++){const n=jt[e];n&&n.pre&&(jt.splice(e,1),e--,n())}}function Ur(t){if(Ae.length){const e=[...new Set(Ae)];if(Ae.length=0,se){se.push(...e);return}for(se=e,se.sort((n,s)=>Ye(n)-Ye(s)),_e=0;_e<se.length;_e++)se[_e]();se=null,_e=0}}const Ye=t=>t.id==null?1/0:t.id,mo=(t,e)=>{const n=Ye(t)-Ye(e);if(n===0){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function Mr(t){Qn=!1,Je=!0,jt.sort(mo);const e=Qt;try{for(ne=0;ne<jt.length;ne++){const n=jt[ne];n&&n.active!==!1&&fe(n,null,14)}}finally{ne=0,jt.length=0,Ur(),Je=!1,xs=null,(jt.length||Ae.length)&&Mr()}}function go(t,e,...n){if(t.isUnmounted)return;const s=t.vnode.props||Tt;let i=n;const r=e.startsWith("update:"),o=r&&e.slice(7);if(o&&o in s){const y=`${o==="modelValue"?"model":o}Modifiers`,{number:m,trim:p}=s[y]||Tt;p&&(i=n.map(f=>zt(f)?f.trim():f)),m&&(i=n.map(mr))}let a,c=s[a=Hn(e)]||s[a=Hn(Oe(e))];!c&&r&&(c=s[a=Hn($e(e))]),c&&te(c,t,6,i);const d=s[a+"Once"];if(d){if(!t.emitted)t.emitted={};else if(t.emitted[a])return;t.emitted[a]=!0,te(d,t,6,i)}}function Rr(t,e,n=!1){const s=e.emitsCache,i=s.get(t);if(i!==void 0)return i;const r=t.emits;let o={},a=!1;if(!gt(t)){const c=d=>{const y=Rr(d,e,!0);y&&(a=!0,Lt(o,y))};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}return!r&&!a?(Et(t)&&s.set(t,null),null):(dt(r)?r.forEach(c=>o[c]=null):Lt(o,r),Et(t)&&s.set(t,o),o)}function Dn(t,e){return!t||!An(e)?!1:(e=e.slice(2).replace(/Once$/,""),yt(t,e[0].toLowerCase()+e.slice(1))||yt(t,$e(e))||yt(t,e))}let qt=null,$n=null;function xn(t){const e=qt;return qt=t,$n=t&&t.type.__scopeId||null,e}function Fr(t){$n=t}function jr(){$n=null}function ts(t,e=qt,n){if(!e||t._n)return t;const s=(...i)=>{s._d&&Qs(-1);const r=xn(e);let o;try{o=t(...i)}finally{xn(r),s._d&&Qs(1)}return o};return s._n=!0,s._c=!0,s._d=!0,s}function Wn(t){const{type:e,vnode:n,proxy:s,withProxy:i,props:r,propsOptions:[o],slots:a,attrs:c,emit:d,render:y,renderCache:m,data:p,setupState:f,ctx:x,inheritAttrs:h}=t;let g,_;const C=xn(t);try{if(n.shapeFlag&4){const I=i||s;g=Gt(y.call(I,I,m,r,f,p,x)),_=c}else{const I=e;g=Gt(I.length>1?I(r,{attrs:c,slots:a,emit:d}):I(r,null)),_=e.props?c:wo(c)}}catch(I){Ze.length=0,en(I,t,1),g=$t(ie)}let P=g;if(_&&h!==!1){const I=Object.keys(_),{shapeFlag:z}=P;I.length&&z&7&&(o&&I.some(us)&&(_=_o(_,o)),P=De(P,_))}return n.dirs&&(P=De(P),P.dirs=P.dirs?P.dirs.concat(n.dirs):n.dirs),n.transition&&(P.transition=n.transition),g=P,xn(C),g}function vo(t){let e;for(let n=0;n<t.length;n++){const s=t[n];if(ni(s)){if(s.type!==ie||s.children==="v-if"){if(e)return;e=s}}else return}return e}const wo=t=>{let e;for(const n in t)(n==="class"||n==="style"||An(n))&&((e||(e={}))[n]=t[n]);return e},_o=(t,e)=>{const n={};for(const s in t)(!us(s)||!(s.slice(9)in e))&&(n[s]=t[s]);return n};function bo(t,e,n){const{props:s,children:i,component:r}=t,{props:o,children:a,patchFlag:c}=e,d=r.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return s?Hs(s,o,d):!!o;if(c&8){const y=e.dynamicProps;for(let m=0;m<y.length;m++){const p=y[m];if(o[p]!==s[p]&&!Dn(d,p))return!0}}}else return(i||a)&&(!a||!a.$stable)?!0:s===o?!1:s?o?Hs(s,o,d):!0:!!o;return!1}function Hs(t,e,n){const s=Object.keys(e);if(s.length!==Object.keys(t).length)return!0;for(let i=0;i<s.length;i++){const r=s[i];if(e[r]!==t[r]&&!Dn(n,r))return!0}return!1}function Cs({vnode:t,parent:e},n){for(;e&&e.subTree===t;)(t=e.vnode).el=n,e=e.parent}const yo=t=>t.__isSuspense,xo={name:"Suspense",__isSuspense:!0,process(t,e,n,s,i,r,o,a,c,d){t==null?Co(e,n,s,i,r,o,a,c,d):To(t,e,n,s,i,o,a,c,d)},hydrate:Io,create:Ts,normalize:Eo},ko=xo;function Ge(t,e){const n=t.props&&t.props[e];gt(n)&&n()}function Co(t,e,n,s,i,r,o,a,c){const{p:d,o:{createElement:y}}=c,m=y("div"),p=t.suspense=Ts(t,i,s,e,m,n,r,o,a,c);d(null,p.pendingBranch=t.ssContent,m,null,s,p,r,o),p.deps>0?(Ge(t,"onPending"),Ge(t,"onFallback"),d(null,t.ssFallback,e,n,s,null,r,o),Pe(p,t.ssFallback)):p.resolve(!1,!0)}function To(t,e,n,s,i,r,o,a,{p:c,um:d,o:{createElement:y}}){const m=e.suspense=t.suspense;m.vnode=e,e.el=t.el;const p=e.ssContent,f=e.ssFallback,{activeBranch:x,pendingBranch:h,isInFallback:g,isHydrating:_}=m;if(h)m.pendingBranch=p,ce(p,h)?(c(h,p,m.hiddenContainer,null,i,m,r,o,a),m.deps<=0?m.resolve():g&&(c(x,f,n,s,i,null,r,o,a),Pe(m,f))):(m.pendingId++,_?(m.isHydrating=!1,m.activeBranch=h):d(h,i,m),m.deps=0,m.effects.length=0,m.hiddenContainer=y("div"),g?(c(null,p,m.hiddenContainer,null,i,m,r,o,a),m.deps<=0?m.resolve():(c(x,f,n,s,i,null,r,o,a),Pe(m,f))):x&&ce(p,x)?(c(x,p,n,s,i,m,r,o,a),m.resolve(!0)):(c(null,p,m.hiddenContainer,null,i,m,r,o,a),m.deps<=0&&m.resolve()));else if(x&&ce(p,x))c(x,p,n,s,i,m,r,o,a),Pe(m,p);else if(Ge(e,"onPending"),m.pendingBranch=p,m.pendingId++,c(null,p,m.hiddenContainer,null,i,m,r,o,a),m.deps<=0)m.resolve();else{const{timeout:C,pendingId:P}=m;C>0?setTimeout(()=>{m.pendingId===P&&m.fallback(f)},C):C===0&&m.fallback(f)}}function Ts(t,e,n,s,i,r,o,a,c,d,y=!1){const{p:m,m:p,um:f,n:x,o:{parentNode:h,remove:g}}=d;let _;const C=Ao(t);C&&e?.pendingBranch&&(_=e.pendingId,e.deps++);const P=t.props?bi(t.props.timeout):void 0,I={vnode:t,parent:e,parentComponent:n,isSVG:o,container:s,hiddenContainer:i,anchor:r,deps:0,pendingId:0,timeout:typeof P=="number"?P:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:y,isUnmounted:!1,effects:[],resolve(z=!1,Z=!1){const{vnode:j,activeBranch:V,pendingBranch:F,pendingId:G,effects:st,parentComponent:S,container:H}=I;if(I.isHydrating)I.isHydrating=!1;else if(!z){const at=V&&F.transition&&F.transition.mode==="out-in";at&&(V.transition.afterLeave=()=>{G===I.pendingId&&p(F,H,N,0)});let{anchor:N}=I;V&&(N=x(V),f(V,S,I,!0)),at||p(F,H,N,0)}Pe(I,F),I.pendingBranch=null,I.isInFallback=!1;let u=I.parent,q=!1;for(;u;){if(u.pendingBranch){u.effects.push(...st),q=!0;break}u=u.parent}q||Lr(st),I.effects=[],C&&e&&e.pendingBranch&&_===e.pendingId&&(e.deps--,e.deps===0&&!Z&&e.resolve()),Ge(j,"onResolve")},fallback(z){if(!I.pendingBranch)return;const{vnode:Z,activeBranch:j,parentComponent:V,container:F,isSVG:G}=I;Ge(Z,"onFallback");const st=x(j),S=()=>{I.isInFallback&&(m(null,z,F,st,V,null,G,a,c),Pe(I,z))},H=z.transition&&z.transition.mode==="out-in";H&&(j.transition.afterLeave=S),I.isInFallback=!0,f(j,V,null,!0),H||S()},move(z,Z,j){I.activeBranch&&p(I.activeBranch,z,Z,j),I.container=z},next(){return I.activeBranch&&x(I.activeBranch)},registerDep(z,Z){const j=!!I.pendingBranch;j&&I.deps++;const V=z.vnode.el;z.asyncDep.catch(F=>{en(F,z,0)}).then(F=>{if(z.isUnmounted||I.isUnmounted||I.pendingId!==z.suspenseId)return;z.asyncResolved=!0;const{vnode:G}=z;os(z,F,!1),V&&(G.el=V);const st=!V&&z.subTree.el;Z(z,G,h(V||z.subTree.el),V?null:x(z.subTree),I,o,c),st&&g(st),Cs(z,G.el),j&&--I.deps===0&&I.resolve()})},unmount(z,Z){I.isUnmounted=!0,I.activeBranch&&f(I.activeBranch,n,z,Z),I.pendingBranch&&f(I.pendingBranch,n,z,Z)}};return I}function Io(t,e,n,s,i,r,o,a,c){const d=e.suspense=Ts(e,s,n,t.parentNode,document.createElement("div"),null,i,r,o,a,!0),y=c(t,d.pendingBranch=e.ssContent,n,d,r,o);return d.deps===0&&d.resolve(!1,!0),y}function Eo(t){const{shapeFlag:e,children:n}=t,s=e&32;t.ssContent=Ws(s?n.default:n),t.ssFallback=s?Ws(n.fallback):$t(ie)}function Ws(t){let e;if(gt(t)){const n=Be&&t._c;n&&(t._d=!1,ht()),t=t(),n&&(t._d=!0,e=Jt,ti())}return dt(t)&&(t=vo(t)),t=Gt(t),e&&!t.dynamicChildren&&(t.dynamicChildren=e.filter(n=>n!==t)),t}function So(t,e){e&&e.pendingBranch?dt(t)?e.effects.push(...t):e.effects.push(t):Lr(t)}function Pe(t,e){t.activeBranch=e;const{vnode:n,parentComponent:s}=t,i=n.el=e.el;s&&s.subTree===n&&(s.vnode.el=i,Cs(s,i))}function Ao(t){var e;return((e=t.props)==null?void 0:e.suspensible)!=null&&t.props.suspensible!==!1}const un={};function mn(t,e,n){return Nr(t,e,n)}function Nr(t,e,{immediate:n,deep:s,flush:i,onTrack:r,onTrigger:o}=Tt){var a;const c=Oi()===((a=Rt)==null?void 0:a.scope)?Rt:null;let d,y=!1,m=!1;if(Nt(t)?(d=()=>t.value,y=yn(t)):Se(t)?(d=()=>t,s=!0):dt(t)?(m=!0,y=t.some(I=>Se(I)||yn(I)),d=()=>t.map(I=>{if(Nt(I))return I.value;if(Se(I))return ye(I);if(gt(I))return fe(I,c,2)})):gt(t)?e?d=()=>fe(t,c,2):d=()=>{if(!(c&&c.isUnmounted))return p&&p(),te(t,c,3,[f])}:d=Qt,e&&s){const I=d;d=()=>ye(I())}let p,f=I=>{p=C.onStop=()=>{fe(I,c,4)}},x;if(Xe)if(f=Qt,e?n&&te(e,c,3,[d(),m?[]:void 0,f]):d(),i==="sync"){const I=ya();x=I.__watcherHandles||(I.__watcherHandles=[])}else return Qt;let h=m?new Array(t.length).fill(un):un;const g=()=>{if(C.active)if(e){const I=C.run();(s||y||(m?I.some((z,Z)=>Ve(z,h[Z])):Ve(I,h)))&&(p&&p(),te(e,c,3,[I,h===un?void 0:m&&h[0]===un?[]:h,f]),h=I)}else C.run()};g.allowRecurse=!!e;let _;i==="sync"?_=g:i==="post"?_=()=>Zt(g,c&&c.suspense):(g.pre=!0,c&&(g.id=c.uid),_=()=>ks(g));const C=new ms(d,_);e?n?g():h=C.run():i==="post"?Zt(C.run.bind(C),c&&c.suspense):C.run();const P=()=>{C.stop(),c&&c.scope&&ds(c.scope.effects,C)};return x&&x.push(P),P}function Po(t,e,n){const s=this.proxy,i=zt(t)?t.includes(".")?Hr(s,t):()=>s[t]:t.bind(s,s);let r;gt(e)?r=e:(r=e.handler,n=e);const o=Rt;me(this);const a=Nr(i,r.bind(s),n);return o?me(o):he(),a}function Hr(t,e){const n=e.split(".");return()=>{let s=t;for(let i=0;i<n.length&&s;i++)s=s[n[i]];return s}}function ye(t,e){if(!Et(t)||t.__v_skip||(e=e||new Set,e.has(t)))return t;if(e.add(t),Nt(t))ye(t.value,e);else if(dt(t))for(let n=0;n<t.length;n++)ye(t[n],e);else if(Pn(t)||Ee(t))t.forEach(n=>{ye(n,e)});else if(hr(t))for(const n in t)ye(t[n],e);return t}function It(t,e){const n=qt;if(n===null)return t;const s=jn(n)||n.proxy,i=t.dirs||(t.dirs=[]);for(let r=0;r<e.length;r++){let[o,a,c,d=Tt]=e[r];o&&(gt(o)&&(o={mounted:o,updated:o}),o.deep&&ye(a),i.push({dir:o,instance:s,value:a,oldValue:void 0,arg:c,modifiers:d}))}return t}function ve(t,e,n,s){const i=t.dirs,r=e&&e.dirs;for(let o=0;o<i.length;o++){const a=i[o];r&&(a.oldValue=r[o].value);let c=a.dir[s];c&&(Le(),te(c,n,8,[t.el,a,t,e]),Ue())}}function ge(t,e){return gt(t)?(()=>Lt({name:t.name},e,{setup:t}))():t}const gn=t=>!!t.type.__asyncLoader,Wr=t=>t.type.__isKeepAlive;function Oo(t,e){Zr(t,"a",e)}function zo(t,e){Zr(t,"da",e)}function Zr(t,e,n=Rt){const s=t.__wdc||(t.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return t()});if(Ln(e,s,n),n){let i=n.parent;for(;i&&i.parent;)Wr(i.parent.vnode)&&Bo(s,e,n,i),i=i.parent}}function Bo(t,e,n,s){const i=Ln(e,t,s,!0);nn(()=>{ds(s[e],i)},n)}function Ln(t,e,n=Rt,s=!1){if(n){const i=n[t]||(n[t]=[]),r=e.__weh||(e.__weh=(...o)=>{if(n.isUnmounted)return;Le(),me(n);const a=te(e,n,t,o);return he(),Ue(),a});return s?i.unshift(r):i.push(r),r}}const oe=t=>(e,n=Rt)=>(!Xe||t==="sp")&&Ln(t,(...s)=>e(...s),n),Do=oe("bm"),Un=oe("m"),$o=oe("bu"),Lo=oe("u"),Uo=oe("bum"),nn=oe("um"),Mo=oe("sp"),Ro=oe("rtg"),Fo=oe("rtc");function jo(t,e=Rt){Ln("ec",t,e)}const No=Symbol.for("v-ndc");function Mn(t,e,n,s){let i;const r=n&&n[s];if(dt(t)||zt(t)){i=new Array(t.length);for(let o=0,a=t.length;o<a;o++)i[o]=e(t[o],o,void 0,r&&r[o])}else if(typeof t=="number"){i=new Array(t);for(let o=0;o<t;o++)i[o]=e(o+1,o,void 0,r&&r[o])}else if(Et(t))if(t[Symbol.iterator])i=Array.from(t,(o,a)=>e(o,a,void 0,r&&r[a]));else{const o=Object.keys(t);i=new Array(o.length);for(let a=0,c=o.length;a<c;a++){const d=o[a];i[a]=e(t[d],d,a,r&&r[a])}}else i=[];return n&&(n[s]=i),i}const es=t=>t?ri(t)?jn(t)||t.proxy:es(t.parent):null,We=Lt(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>es(t.parent),$root:t=>es(t.root),$emit:t=>t.emit,$options:t=>Is(t),$forceUpdate:t=>t.f||(t.f=()=>ks(t.update)),$nextTick:t=>t.n||(t.n=fo.bind(t.proxy)),$watch:t=>Po.bind(t)}),Zn=(t,e)=>t!==Tt&&!t.__isScriptSetup&&yt(t,e),Ho={get({_:t},e){const{ctx:n,setupState:s,data:i,props:r,accessCache:o,type:a,appContext:c}=t;let d;if(e[0]!=="$"){const f=o[e];if(f!==void 0)switch(f){case 1:return s[e];case 2:return i[e];case 4:return n[e];case 3:return r[e]}else{if(Zn(s,e))return o[e]=1,s[e];if(i!==Tt&&yt(i,e))return o[e]=2,i[e];if((d=t.propsOptions[0])&&yt(d,e))return o[e]=3,r[e];if(n!==Tt&&yt(n,e))return o[e]=4,n[e];ns&&(o[e]=0)}}const y=We[e];let m,p;if(y)return e==="$attrs"&&Kt(t,"get",e),y(t);if((m=a.__cssModules)&&(m=m[e]))return m;if(n!==Tt&&yt(n,e))return o[e]=4,n[e];if(p=c.config.globalProperties,yt(p,e))return p[e]},set({_:t},e,n){const{data:s,setupState:i,ctx:r}=t;return Zn(i,e)?(i[e]=n,!0):s!==Tt&&yt(s,e)?(s[e]=n,!0):yt(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(r[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:s,appContext:i,propsOptions:r}},o){let a;return!!n[o]||t!==Tt&&yt(t,o)||Zn(e,o)||(a=r[0])&&yt(a,o)||yt(s,o)||yt(We,o)||yt(i.config.globalProperties,o)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:yt(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function Zs(t){return dt(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function kn(t){const e=pa();let n=t();return he(),fs(n)&&(n=n.catch(s=>{throw me(e),s})),[n,()=>me(e)]}let ns=!0;function Wo(t){const e=Is(t),n=t.proxy,s=t.ctx;ns=!1,e.beforeCreate&&Ks(e.beforeCreate,t,"bc");const{data:i,computed:r,methods:o,watch:a,provide:c,inject:d,created:y,beforeMount:m,mounted:p,beforeUpdate:f,updated:x,activated:h,deactivated:g,beforeDestroy:_,beforeUnmount:C,destroyed:P,unmounted:I,render:z,renderTracked:Z,renderTriggered:j,errorCaptured:V,serverPrefetch:F,expose:G,inheritAttrs:st,components:S,directives:H,filters:u}=e;if(d&&Zo(d,s,null),o)for(const N in o){const ot=o[N];gt(ot)&&(s[N]=ot.bind(n))}if(i){const N=i.call(n,n);Et(N)&&(t.data=_s(N))}if(ns=!0,r)for(const N in r){const ot=r[N],Q=gt(ot)?ot.bind(n,n):gt(ot.get)?ot.get.bind(n,n):Qt,rt=!gt(ot)&&gt(ot.set)?ot.set.bind(n):Qt,R=Bt({get:Q,set:rt});Object.defineProperty(s,N,{enumerable:!0,configurable:!0,get:()=>R.value,set:L=>R.value=L})}if(a)for(const N in a)Kr(a[N],s,n,N);if(c){const N=gt(c)?c.call(n):c;Reflect.ownKeys(N).forEach(ot=>{Go(ot,N[ot])})}y&&Ks(y,t,"c");function at(N,ot){dt(ot)?ot.forEach(Q=>N(Q.bind(n))):ot&&N(ot.bind(n))}if(at(Do,m),at(Un,p),at($o,f),at(Lo,x),at(Oo,h),at(zo,g),at(jo,V),at(Fo,Z),at(Ro,j),at(Uo,C),at(nn,I),at(Mo,F),dt(G))if(G.length){const N=t.exposed||(t.exposed={});G.forEach(ot=>{Object.defineProperty(N,ot,{get:()=>n[ot],set:Q=>n[ot]=Q})})}else t.exposed||(t.exposed={});z&&t.render===Qt&&(t.render=z),st!=null&&(t.inheritAttrs=st),S&&(t.components=S),H&&(t.directives=H)}function Zo(t,e,n=Qt){dt(t)&&(t=ss(t));for(const s in t){const i=t[s];let r;Et(i)?"default"in i?r=vn(i.from||s,i.default,!0):r=vn(i.from||s):r=vn(i),Nt(r)?Object.defineProperty(e,s,{enumerable:!0,configurable:!0,get:()=>r.value,set:o=>r.value=o}):e[s]=r}}function Ks(t,e,n){te(dt(t)?t.map(s=>s.bind(e.proxy)):t.bind(e.proxy),e,n)}function Kr(t,e,n,s){const i=s.includes(".")?Hr(n,s):()=>n[s];if(zt(t)){const r=e[t];gt(r)&&mn(i,r)}else if(gt(t))mn(i,t.bind(n));else if(Et(t))if(dt(t))t.forEach(r=>Kr(r,e,n,s));else{const r=gt(t.handler)?t.handler.bind(n):e[t.handler];gt(r)&&mn(i,r,t)}}function Is(t){const e=t.type,{mixins:n,extends:s}=e,{mixins:i,optionsCache:r,config:{optionMergeStrategies:o}}=t.appContext,a=r.get(e);let c;return a?c=a:!i.length&&!n&&!s?c=e:(c={},i.length&&i.forEach(d=>Cn(c,d,o,!0)),Cn(c,e,o)),Et(e)&&r.set(e,c),c}function Cn(t,e,n,s=!1){const{mixins:i,extends:r}=e;r&&Cn(t,r,n,!0),i&&i.forEach(o=>Cn(t,o,n,!0));for(const o in e)if(!(s&&o==="expose")){const a=Ko[o]||n&&n[o];t[o]=a?a(t[o],e[o]):e[o]}return t}const Ko={data:Vs,props:qs,emits:qs,methods:He,computed:He,beforeCreate:Wt,created:Wt,beforeMount:Wt,mounted:Wt,beforeUpdate:Wt,updated:Wt,beforeDestroy:Wt,beforeUnmount:Wt,destroyed:Wt,unmounted:Wt,activated:Wt,deactivated:Wt,errorCaptured:Wt,serverPrefetch:Wt,components:He,directives:He,watch:qo,provide:Vs,inject:Vo};function Vs(t,e){return e?t?function(){return Lt(gt(t)?t.call(this,this):t,gt(e)?e.call(this,this):e)}:e:t}function Vo(t,e){return He(ss(t),ss(e))}function ss(t){if(dt(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Wt(t,e){return t?[...new Set([].concat(t,e))]:e}function He(t,e){return t?Lt(Object.create(null),t,e):e}function qs(t,e){return t?dt(t)&&dt(e)?[...new Set([...t,...e])]:Lt(Object.create(null),Zs(t),Zs(e??{})):e}function qo(t,e){if(!t)return e;if(!e)return t;const n=Lt(Object.create(null),t);for(const s in e)n[s]=Wt(t[s],e[s]);return n}function Vr(){return{app:null,config:{isNativeTag:pi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Jo=0;function Yo(t,e){return function(s,i=null){gt(s)||(s=Lt({},s)),i!=null&&!Et(i)&&(i=null);const r=Vr(),o=new Set;let a=!1;const c=r.app={_uid:Jo++,_component:s,_props:i,_container:null,_context:r,_instance:null,version:xa,get config(){return r.config},set config(d){},use(d,...y){return o.has(d)||(d&&gt(d.install)?(o.add(d),d.install(c,...y)):gt(d)&&(o.add(d),d(c,...y))),c},mixin(d){return r.mixins.includes(d)||r.mixins.push(d),c},component(d,y){return y?(r.components[d]=y,c):r.components[d]},directive(d,y){return y?(r.directives[d]=y,c):r.directives[d]},mount(d,y,m){if(!a){const p=$t(s,i);return p.appContext=r,y&&e?e(p,d):t(p,d,m),a=!0,c._container=d,d.__vue_app__=c,jn(p.component)||p.component.proxy}},unmount(){a&&(t(null,c._container),delete c._container.__vue_app__)},provide(d,y){return r.provides[d]=y,c},runWithContext(d){Tn=c;try{return d()}finally{Tn=null}}};return c}}let Tn=null;function Go(t,e){if(Rt){let n=Rt.provides;const s=Rt.parent&&Rt.parent.provides;s===n&&(n=Rt.provides=Object.create(s)),n[t]=e}}function vn(t,e,n=!1){const s=Rt||qt;if(s||Tn){const i=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:Tn._context.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&gt(e)?e.call(s&&s.proxy):e}}function Xo(t,e,n,s=!1){const i={},r={};bn(r,Fn,1),t.propsDefaults=Object.create(null),qr(t,e,i,r);for(const o in t.propsOptions[0])o in i||(i[o]=void 0);n?t.props=s?i:ro(i):t.type.props?t.props=i:t.props=r,t.attrs=r}function Qo(t,e,n,s){const{props:i,attrs:r,vnode:{patchFlag:o}}=t,a=xt(i),[c]=t.propsOptions;let d=!1;if((s||o>0)&&!(o&16)){if(o&8){const y=t.vnode.dynamicProps;for(let m=0;m<y.length;m++){let p=y[m];if(Dn(t.emitsOptions,p))continue;const f=e[p];if(c)if(yt(r,p))f!==r[p]&&(r[p]=f,d=!0);else{const x=Oe(p);i[x]=rs(c,a,x,f,t,!1)}else f!==r[p]&&(r[p]=f,d=!0)}}}else{qr(t,e,i,r)&&(d=!0);let y;for(const m in a)(!e||!yt(e,m)&&((y=$e(m))===m||!yt(e,y)))&&(c?n&&(n[m]!==void 0||n[y]!==void 0)&&(i[m]=rs(c,a,m,void 0,t,!0)):delete i[m]);if(r!==a)for(const m in r)(!e||!yt(e,m))&&(delete r[m],d=!0)}d&&re(t,"set","$attrs")}function qr(t,e,n,s){const[i,r]=t.propsOptions;let o=!1,a;if(e)for(let c in e){if(hn(c))continue;const d=e[c];let y;i&&yt(i,y=Oe(c))?!r||!r.includes(y)?n[y]=d:(a||(a={}))[y]=d:Dn(t.emitsOptions,c)||(!(c in s)||d!==s[c])&&(s[c]=d,o=!0)}if(r){const c=xt(n),d=a||Tt;for(let y=0;y<r.length;y++){const m=r[y];n[m]=rs(i,c,m,d[m],t,!yt(d,m))}}return o}function rs(t,e,n,s,i,r){const o=t[n];if(o!=null){const a=yt(o,"default");if(a&&s===void 0){const c=o.default;if(o.type!==Function&&!o.skipFactory&&gt(c)){const{propsDefaults:d}=i;n in d?s=d[n]:(me(i),s=d[n]=c.call(null,e),he())}else s=c}o[0]&&(r&&!a?s=!1:o[1]&&(s===""||s===$e(n))&&(s=!0))}return s}function Jr(t,e,n=!1){const s=e.propsCache,i=s.get(t);if(i)return i;const r=t.props,o={},a=[];let c=!1;if(!gt(t)){const y=m=>{c=!0;const[p,f]=Jr(m,e,!0);Lt(o,p),f&&a.push(...f)};!n&&e.mixins.length&&e.mixins.forEach(y),t.extends&&y(t.extends),t.mixins&&t.mixins.forEach(y)}if(!r&&!c)return Et(t)&&s.set(t,Ie),Ie;if(dt(r))for(let y=0;y<r.length;y++){const m=Oe(r[y]);Js(m)&&(o[m]=Tt)}else if(r)for(const y in r){const m=Oe(y);if(Js(m)){const p=r[y],f=o[m]=dt(p)||gt(p)?{type:p}:Lt({},p);if(f){const x=Xs(Boolean,f.type),h=Xs(String,f.type);f[0]=x>-1,f[1]=h<0||x<h,(x>-1||yt(f,"default"))&&a.push(m)}}}const d=[o,a];return Et(t)&&s.set(t,d),d}function Js(t){return t[0]!=="$"}function Ys(t){const e=t&&t.toString().match(/^\s*(function|class) (\w+)/);return e?e[2]:t===null?"null":""}function Gs(t,e){return Ys(t)===Ys(e)}function Xs(t,e){return dt(e)?e.findIndex(n=>Gs(n,t)):gt(e)&&Gs(e,t)?0:-1}const Yr=t=>t[0]==="_"||t==="$stable",Es=t=>dt(t)?t.map(Gt):[Gt(t)],ta=(t,e,n)=>{if(e._n)return e;const s=ts((...i)=>Es(e(...i)),n);return s._c=!1,s},Gr=(t,e,n)=>{const s=t._ctx;for(const i in t){if(Yr(i))continue;const r=t[i];if(gt(r))e[i]=ta(i,r,s);else if(r!=null){const o=Es(r);e[i]=()=>o}}},Xr=(t,e)=>{const n=Es(e);t.slots.default=()=>n},ea=(t,e)=>{if(t.vnode.shapeFlag&32){const n=e._;n?(t.slots=xt(e),bn(e,"_",n)):Gr(e,t.slots={})}else t.slots={},e&&Xr(t,e);bn(t.slots,Fn,1)},na=(t,e,n)=>{const{vnode:s,slots:i}=t;let r=!0,o=Tt;if(s.shapeFlag&32){const a=e._;a?n&&a===1?r=!1:(Lt(i,e),!n&&a===1&&delete i._):(r=!e.$stable,Gr(e,i)),o=e}else e&&(Xr(t,e),o={default:1});if(r)for(const a in i)!Yr(a)&&!(a in o)&&delete i[a]};function is(t,e,n,s,i=!1){if(dt(t)){t.forEach((p,f)=>is(p,e&&(dt(e)?e[f]:e),n,s,i));return}if(gn(s)&&!i)return;const r=s.shapeFlag&4?jn(s.component)||s.component.proxy:s.el,o=i?null:r,{i:a,r:c}=t,d=e&&e.r,y=a.refs===Tt?a.refs={}:a.refs,m=a.setupState;if(d!=null&&d!==c&&(zt(d)?(y[d]=null,yt(m,d)&&(m[d]=null)):Nt(d)&&(d.value=null)),gt(c))fe(c,a,12,[o,y]);else{const p=zt(c),f=Nt(c);if(p||f){const x=()=>{if(t.f){const h=p?yt(m,c)?m[c]:y[c]:c.value;i?dt(h)&&ds(h,r):dt(h)?h.includes(r)||h.push(r):p?(y[c]=[r],yt(m,c)&&(m[c]=y[c])):(c.value=[r],t.k&&(y[t.k]=c.value))}else p?(y[c]=o,yt(m,c)&&(m[c]=o)):f&&(c.value=o,t.k&&(y[t.k]=o))};o?(x.id=-1,Zt(x,n)):x()}}}const Zt=So;function sa(t){return ra(t)}function ra(t,e){const n=qn();n.__VUE__=!0;const{insert:s,remove:i,patchProp:r,createElement:o,createText:a,createComment:c,setText:d,setElementText:y,parentNode:m,nextSibling:p,setScopeId:f=Qt,insertStaticContent:x}=t,h=(k,D,l,A=null,E=null,w=null,v=!1,T=null,$=!!D.dynamicChildren)=>{if(k===D)return;k&&!ce(k,D)&&(A=Ct(k),L(k,E,w,!0),k=null),D.patchFlag===-2&&($=!1,D.dynamicChildren=null);const{type:B,ref:O,shapeFlag:M}=D;switch(B){case Rn:g(k,D,l,A);break;case ie:_(k,D,l,A);break;case wn:k==null&&C(D,l,A,v);break;case Dt:S(k,D,l,A,E,w,v,T,$);break;default:M&1?z(k,D,l,A,E,w,v,T,$):M&6?H(k,D,l,A,E,w,v,T,$):(M&64||M&128)&&B.process(k,D,l,A,E,w,v,T,$,vt)}O!=null&&E&&is(O,k&&k.ref,w,D||k,!D)},g=(k,D,l,A)=>{if(k==null)s(D.el=a(D.children),l,A);else{const E=D.el=k.el;D.children!==k.children&&d(E,D.children)}},_=(k,D,l,A)=>{k==null?s(D.el=c(D.children||""),l,A):D.el=k.el},C=(k,D,l,A)=>{[k.el,k.anchor]=x(k.children,D,l,A,k.el,k.anchor)},P=({el:k,anchor:D},l,A)=>{let E;for(;k&&k!==D;)E=p(k),s(k,l,A),k=E;s(D,l,A)},I=({el:k,anchor:D})=>{let l;for(;k&&k!==D;)l=p(k),i(k),k=l;i(D)},z=(k,D,l,A,E,w,v,T,$)=>{v=v||D.type==="svg",k==null?Z(D,l,A,E,w,v,T,$):F(k,D,E,w,v,T,$)},Z=(k,D,l,A,E,w,v,T)=>{let $,B;const{type:O,props:M,shapeFlag:J,transition:W,dirs:U}=k;if($=k.el=o(k.type,w,M&&M.is,M),J&8?y($,k.children):J&16&&V(k.children,$,null,A,E,w&&O!=="foreignObject",v,T),U&&ve(k,null,A,"created"),j($,k,k.scopeId,v,A),M){for(const X in M)X!=="value"&&!hn(X)&&r($,X,null,M[X],w,k.children,A,E,_t);"value"in M&&r($,"value",null,M.value),(B=M.onVnodeBeforeMount)&&ee(B,A,k)}U&&ve(k,null,A,"beforeMount");const K=(!E||E&&!E.pendingBranch)&&W&&!W.persisted;K&&W.beforeEnter($),s($,D,l),((B=M&&M.onVnodeMounted)||K||U)&&Zt(()=>{B&&ee(B,A,k),K&&W.enter($),U&&ve(k,null,A,"mounted")},E)},j=(k,D,l,A,E)=>{if(l&&f(k,l),A)for(let w=0;w<A.length;w++)f(k,A[w]);if(E){let w=E.subTree;if(D===w){const v=E.vnode;j(k,v,v.scopeId,v.slotScopeIds,E.parent)}}},V=(k,D,l,A,E,w,v,T,$=0)=>{for(let B=$;B<k.length;B++){const O=k[B]=T?le(k[B]):Gt(k[B]);h(null,O,D,l,A,E,w,v,T)}},F=(k,D,l,A,E,w,v)=>{const T=D.el=k.el;let{patchFlag:$,dynamicChildren:B,dirs:O}=D;$|=k.patchFlag&16;const M=k.props||Tt,J=D.props||Tt;let W;l&&we(l,!1),(W=J.onVnodeBeforeUpdate)&&ee(W,l,D,k),O&&ve(D,k,l,"beforeUpdate"),l&&we(l,!0);const U=E&&D.type!=="foreignObject";if(B?G(k.dynamicChildren,B,T,l,A,U,w):v||ot(k,D,T,null,l,A,U,w,!1),$>0){if($&16)st(T,D,M,J,l,A,E);else if($&2&&M.class!==J.class&&r(T,"class",null,J.class,E),$&4&&r(T,"style",M.style,J.style,E),$&8){const K=D.dynamicProps;for(let X=0;X<K.length;X++){const lt=K[X],nt=M[lt],mt=J[lt];(mt!==nt||lt==="value")&&r(T,lt,nt,mt,E,k.children,l,A,_t)}}$&1&&k.children!==D.children&&y(T,D.children)}else!v&&B==null&&st(T,D,M,J,l,A,E);((W=J.onVnodeUpdated)||O)&&Zt(()=>{W&&ee(W,l,D,k),O&&ve(D,k,l,"updated")},A)},G=(k,D,l,A,E,w,v)=>{for(let T=0;T<D.length;T++){const $=k[T],B=D[T],O=$.el&&($.type===Dt||!ce($,B)||$.shapeFlag&70)?m($.el):l;h($,B,O,null,A,E,w,v,!0)}},st=(k,D,l,A,E,w,v)=>{if(l!==A){if(l!==Tt)for(const T in l)!hn(T)&&!(T in A)&&r(k,T,l[T],null,v,D.children,E,w,_t);for(const T in A){if(hn(T))continue;const $=A[T],B=l[T];$!==B&&T!=="value"&&r(k,T,B,$,v,D.children,E,w,_t)}"value"in A&&r(k,"value",l.value,A.value)}},S=(k,D,l,A,E,w,v,T,$)=>{const B=D.el=k?k.el:a(""),O=D.anchor=k?k.anchor:a("");let{patchFlag:M,dynamicChildren:J,slotScopeIds:W}=D;W&&(T=T?T.concat(W):W),k==null?(s(B,l,A),s(O,l,A),V(D.children,l,O,E,w,v,T,$)):M>0&&M&64&&J&&k.dynamicChildren?(G(k.dynamicChildren,J,l,E,w,v,T),(D.key!=null||E&&D===E.subTree)&&Qr(k,D,!0)):ot(k,D,l,O,E,w,v,T,$)},H=(k,D,l,A,E,w,v,T,$)=>{D.slotScopeIds=T,k==null?D.shapeFlag&512?E.ctx.activate(D,l,A,v,$):u(D,l,A,E,w,v,$):q(k,D,$)},u=(k,D,l,A,E,w,v)=>{const T=k.component=ha(k,A,E);if(Wr(k)&&(T.ctx.renderer=vt),ma(T),T.asyncDep){if(E&&E.registerDep(T,at),!k.el){const $=T.subTree=$t(ie);_(null,$,D,l)}return}at(T,k,D,l,E,w,v)},q=(k,D,l)=>{const A=D.component=k.component;if(bo(k,D,l))if(A.asyncDep&&!A.asyncResolved){N(A,D,l);return}else A.next=D,po(A.update),A.update();else D.el=k.el,A.vnode=D},at=(k,D,l,A,E,w,v)=>{const T=()=>{if(k.isMounted){let{next:O,bu:M,u:J,parent:W,vnode:U}=k,K=O,X;we(k,!1),O?(O.el=U.el,N(k,O,v)):O=U,M&&pn(M),(X=O.props&&O.props.onVnodeBeforeUpdate)&&ee(X,W,O,U),we(k,!0);const lt=Wn(k),nt=k.subTree;k.subTree=lt,h(nt,lt,m(nt.el),Ct(nt),k,E,w),O.el=lt.el,K===null&&Cs(k,lt.el),J&&Zt(J,E),(X=O.props&&O.props.onVnodeUpdated)&&Zt(()=>ee(X,W,O,U),E)}else{let O;const{el:M,props:J}=D,{bm:W,m:U,parent:K}=k,X=gn(D);if(we(k,!1),W&&pn(W),!X&&(O=J&&J.onVnodeBeforeMount)&&ee(O,K,D),we(k,!0),M&&Y){const lt=()=>{k.subTree=Wn(k),Y(M,k.subTree,k,E,null)};X?D.type.__asyncLoader().then(()=>!k.isUnmounted&&lt()):lt()}else{const lt=k.subTree=Wn(k);h(null,lt,l,A,k,E,w),D.el=lt.el}if(U&&Zt(U,E),!X&&(O=J&&J.onVnodeMounted)){const lt=D;Zt(()=>ee(O,K,lt),E)}(D.shapeFlag&256||K&&gn(K.vnode)&&K.vnode.shapeFlag&256)&&k.a&&Zt(k.a,E),k.isMounted=!0,D=l=A=null}},$=k.effect=new ms(T,()=>ks(B),k.scope),B=k.update=()=>$.run();B.id=k.uid,we(k,!0),B()},N=(k,D,l)=>{D.component=k;const A=k.vnode.props;k.vnode=D,k.next=null,Qo(k,D.props,A,l),na(k,D.children,l),Le(),Ns(),Ue()},ot=(k,D,l,A,E,w,v,T,$=!1)=>{const B=k&&k.children,O=k?k.shapeFlag:0,M=D.children,{patchFlag:J,shapeFlag:W}=D;if(J>0){if(J&128){rt(B,M,l,A,E,w,v,T,$);return}else if(J&256){Q(B,M,l,A,E,w,v,T,$);return}}W&8?(O&16&&_t(B,E,w),M!==B&&y(l,M)):O&16?W&16?rt(B,M,l,A,E,w,v,T,$):_t(B,E,w,!0):(O&8&&y(l,""),W&16&&V(M,l,A,E,w,v,T,$))},Q=(k,D,l,A,E,w,v,T,$)=>{k=k||Ie,D=D||Ie;const B=k.length,O=D.length,M=Math.min(B,O);let J;for(J=0;J<M;J++){const W=D[J]=$?le(D[J]):Gt(D[J]);h(k[J],W,l,null,E,w,v,T,$)}B>O?_t(k,E,w,!0,!1,M):V(D,l,A,E,w,v,T,$,M)},rt=(k,D,l,A,E,w,v,T,$)=>{let B=0;const O=D.length;let M=k.length-1,J=O-1;for(;B<=M&&B<=J;){const W=k[B],U=D[B]=$?le(D[B]):Gt(D[B]);if(ce(W,U))h(W,U,l,null,E,w,v,T,$);else break;B++}for(;B<=M&&B<=J;){const W=k[M],U=D[J]=$?le(D[J]):Gt(D[J]);if(ce(W,U))h(W,U,l,null,E,w,v,T,$);else break;M--,J--}if(B>M){if(B<=J){const W=J+1,U=W<O?D[W].el:A;for(;B<=J;)h(null,D[B]=$?le(D[B]):Gt(D[B]),l,U,E,w,v,T,$),B++}}else if(B>J)for(;B<=M;)L(k[B],E,w,!0),B++;else{const W=B,U=B,K=new Map;for(B=U;B<=J;B++){const Mt=D[B]=$?le(D[B]):Gt(D[B]);Mt.key!=null&&K.set(Mt.key,B)}let X,lt=0;const nt=J-U+1;let mt=!1,Ut=0;const bt=new Array(nt);for(B=0;B<nt;B++)bt[B]=0;for(B=W;B<=M;B++){const Mt=k[B];if(lt>=nt){L(Mt,E,w,!0);continue}let Ot;if(Mt.key!=null)Ot=K.get(Mt.key);else for(X=U;X<=J;X++)if(bt[X-U]===0&&ce(Mt,D[X])){Ot=X;break}Ot===void 0?L(Mt,E,w,!0):(bt[Ot-U]=B+1,Ot>=Ut?Ut=Ot:mt=!0,h(Mt,D[Ot],l,null,E,w,v,T,$),lt++)}const Ht=mt?ia(bt):Ie;for(X=Ht.length-1,B=nt-1;B>=0;B--){const Mt=U+B,Ot=D[Mt],Re=Mt+1<O?D[Mt+1].el:A;bt[B]===0?h(null,Ot,l,Re,E,w,v,T,$):mt&&(X<0||B!==Ht[X]?R(Ot,l,Re,2):X--)}}},R=(k,D,l,A,E=null)=>{const{el:w,type:v,transition:T,children:$,shapeFlag:B}=k;if(B&6){R(k.component.subTree,D,l,A);return}if(B&128){k.suspense.move(D,l,A);return}if(B&64){v.move(k,D,l,vt);return}if(v===Dt){s(w,D,l);for(let M=0;M<$.length;M++)R($[M],D,l,A);s(k.anchor,D,l);return}if(v===wn){P(k,D,l);return}if(A!==2&&B&1&&T)if(A===0)T.beforeEnter(w),s(w,D,l),Zt(()=>T.enter(w),E);else{const{leave:M,delayLeave:J,afterLeave:W}=T,U=()=>s(w,D,l),K=()=>{M(w,()=>{U(),W&&W()})};J?J(w,U,K):K()}else s(w,D,l)},L=(k,D,l,A=!1,E=!1)=>{const{type:w,props:v,ref:T,children:$,dynamicChildren:B,shapeFlag:O,patchFlag:M,dirs:J}=k;if(T!=null&&is(T,null,l,k,!0),O&256){D.ctx.deactivate(k);return}const W=O&1&&J,U=!gn(k);let K;if(U&&(K=v&&v.onVnodeBeforeUnmount)&&ee(K,D,k),O&6)tt(k.component,l,A);else{if(O&128){k.suspense.unmount(l,A);return}W&&ve(k,null,D,"beforeUnmount"),O&64?k.type.remove(k,D,l,E,vt,A):B&&(w!==Dt||M>0&&M&64)?_t(B,D,l,!1,!0):(w===Dt&&M&384||!E&&O&16)&&_t($,D,l),A&&ut(k)}(U&&(K=v&&v.onVnodeUnmounted)||W)&&Zt(()=>{K&&ee(K,D,k),W&&ve(k,null,D,"unmounted")},l)},ut=k=>{const{type:D,el:l,anchor:A,transition:E}=k;if(D===Dt){it(l,A);return}if(D===wn){I(k);return}const w=()=>{i(l),E&&!E.persisted&&E.afterLeave&&E.afterLeave()};if(k.shapeFlag&1&&E&&!E.persisted){const{leave:v,delayLeave:T}=E,$=()=>v(l,w);T?T(k.el,w,$):$()}else w()},it=(k,D)=>{let l;for(;k!==D;)l=p(k),i(k),k=l;i(D)},tt=(k,D,l)=>{const{bum:A,scope:E,update:w,subTree:v,um:T}=k;A&&pn(A),E.stop(),w&&(w.active=!1,L(v,k,D,l)),T&&Zt(T,D),Zt(()=>{k.isUnmounted=!0},D),D&&D.pendingBranch&&!D.isUnmounted&&k.asyncDep&&!k.asyncResolved&&k.suspenseId===D.pendingId&&(D.deps--,D.deps===0&&D.resolve())},_t=(k,D,l,A=!1,E=!1,w=0)=>{for(let v=w;v<k.length;v++)L(k[v],D,l,A,E)},Ct=k=>k.shapeFlag&6?Ct(k.component.subTree):k.shapeFlag&128?k.suspense.next():p(k.anchor||k.el),pt=(k,D,l)=>{k==null?D._vnode&&L(D._vnode,null,null,!0):h(D._vnode||null,k,D,null,null,null,l),Ns(),Ur(),D._vnode=k},vt={p:h,um:L,m:R,r:ut,mt:u,mc:V,pc:ot,pbc:G,n:Ct,o:t};let et,Y;return e&&([et,Y]=e(vt)),{render:pt,hydrate:et,createApp:Yo(pt,et)}}function we({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function Qr(t,e,n=!1){const s=t.children,i=e.children;if(dt(s)&&dt(i))for(let r=0;r<s.length;r++){const o=s[r];let a=i[r];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=i[r]=le(i[r]),a.el=o.el),n||Qr(o,a)),a.type===Rn&&(a.el=o.el)}}function ia(t){const e=t.slice(),n=[0];let s,i,r,o,a;const c=t.length;for(s=0;s<c;s++){const d=t[s];if(d!==0){if(i=n[n.length-1],t[i]<d){e[s]=i,n.push(s);continue}for(r=0,o=n.length-1;r<o;)a=r+o>>1,t[n[a]]<d?r=a+1:o=a;d<t[n[r]]&&(r>0&&(e[s]=n[r-1]),n[r]=s)}}for(r=n.length,o=n[r-1];r-- >0;)n[r]=o,o=e[o];return n}const oa=t=>t.__isTeleport,Dt=Symbol.for("v-fgt"),Rn=Symbol.for("v-txt"),ie=Symbol.for("v-cmt"),wn=Symbol.for("v-stc"),Ze=[];let Jt=null;function ht(t=!1){Ze.push(Jt=t?null:[])}function ti(){Ze.pop(),Jt=Ze[Ze.length-1]||null}let Be=1;function Qs(t){Be+=t}function ei(t){return t.dynamicChildren=Be>0?Jt||Ie:null,ti(),Be>0&&Jt&&Jt.push(t),t}function wt(t,e,n,s,i,r){return ei(b(t,e,n,s,i,r,!0))}function In(t,e,n,s,i){return ei($t(t,e,n,s,i,!0))}function ni(t){return t?t.__v_isVNode===!0:!1}function ce(t,e){return t.type===e.type&&t.key===e.key}const Fn="__vInternal",si=({key:t})=>t??null,_n=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?zt(t)||Nt(t)||gt(t)?{i:qt,r:t,k:e,f:!!n}:t:null);function b(t,e=null,n=null,s=0,i=null,r=t===Dt?0:1,o=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&si(e),ref:e&&_n(e),scopeId:$n,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:qt};return a?(Ss(c,n),r&128&&t.normalize(c)):n&&(c.shapeFlag|=zt(n)?8:16),Be>0&&!o&&Jt&&(c.patchFlag>0||r&6)&&c.patchFlag!==32&&Jt.push(c),c}const $t=aa;function aa(t,e=null,n=null,s=0,i=null,r=!1){if((!t||t===No)&&(t=ie),ni(t)){const a=De(t,e,!0);return n&&Ss(a,n),Be>0&&!r&&Jt&&(a.shapeFlag&6?Jt[Jt.indexOf(t)]=a:Jt.push(a)),a.patchFlag|=-2,a}if(_a(t)&&(t=t.__vccOpts),e){e=la(e);let{class:a,style:c}=e;a&&!zt(a)&&(e.class=At(a)),Et(c)&&(Ar(c)&&!dt(c)&&(c=Lt({},c)),e.style=tn(c))}const o=zt(t)?1:yo(t)?128:oa(t)?64:Et(t)?4:gt(t)?2:0;return b(t,e,n,s,i,o,r,!0)}function la(t){return t?Ar(t)||Fn in t?Lt({},t):t:null}function De(t,e,n=!1){const{props:s,ref:i,patchFlag:r,children:o}=t,a=e?ua(s||{},e):s;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:a,key:a&&si(a),ref:e&&e.ref?n&&i?dt(i)?i.concat(_n(e)):[i,_n(e)]:_n(e):i,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:o,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Dt?r===-1?16:r|16:r,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&De(t.ssContent),ssFallback:t.ssFallback&&De(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce}}function Ft(t=" ",e=0){return $t(Rn,null,t,e)}function ca(t,e){const n=$t(wn,null,t);return n.staticCount=e,n}function ue(t="",e=!1){return e?(ht(),In(ie,null,t)):$t(ie,null,t)}function Gt(t){return t==null||typeof t=="boolean"?$t(ie):dt(t)?$t(Dt,null,t.slice()):typeof t=="object"?le(t):$t(Rn,null,String(t))}function le(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:De(t)}function Ss(t,e){let n=0;const{shapeFlag:s}=t;if(e==null)e=null;else if(dt(e))n=16;else if(typeof e=="object")if(s&65){const i=e.default;i&&(i._c&&(i._d=!1),Ss(t,i()),i._c&&(i._d=!0));return}else{n=32;const i=e._;!i&&!(Fn in e)?e._ctx=qt:i===3&&qt&&(qt.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else gt(e)?(e={default:e,_ctx:qt},n=32):(e=String(e),s&64?(n=16,e=[Ft(e)]):n=8);t.children=e,t.shapeFlag|=n}function ua(...t){const e={};for(let n=0;n<t.length;n++){const s=t[n];for(const i in s)if(i==="class")e.class!==s.class&&(e.class=At([e.class,s.class]));else if(i==="style")e.style=tn([e.style,s.style]);else if(An(i)){const r=e[i],o=s[i];o&&r!==o&&!(dt(r)&&r.includes(o))&&(e[i]=r?[].concat(r,o):o)}else i!==""&&(e[i]=s[i])}return e}function ee(t,e,n,s=null){te(t,e,7,[n,s])}const da=Vr();let fa=0;function ha(t,e,n){const s=t.type,i=(e?e.appContext:t.appContext)||da,r={uid:fa++,vnode:t,type:s,parent:e,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new Ai(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jr(s,i),emitsOptions:Rr(s,i),emit:null,emitted:null,propsDefaults:Tt,inheritAttrs:s.inheritAttrs,ctx:Tt,data:Tt,props:Tt,attrs:Tt,slots:Tt,refs:Tt,setupState:Tt,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=go.bind(null,r),t.ce&&t.ce(r),r}let Rt=null;const pa=()=>Rt||qt;let As,Te,tr="__VUE_INSTANCE_SETTERS__";(Te=qn()[tr])||(Te=qn()[tr]=[]),Te.push(t=>Rt=t),As=t=>{Te.length>1?Te.forEach(e=>e(t)):Te[0](t)};const me=t=>{As(t),t.scope.on()},he=()=>{Rt&&Rt.scope.off(),As(null)};function ri(t){return t.vnode.shapeFlag&4}let Xe=!1;function ma(t,e=!1){Xe=e;const{props:n,children:s}=t.vnode,i=ri(t);Xo(t,n,i,e),ea(t,s);const r=i?ga(t,e):void 0;return Xe=!1,r}function ga(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=Pr(new Proxy(t.ctx,Ho));const{setup:s}=n;if(s){const i=t.setupContext=s.length>1?wa(t):null;me(t),Le();const r=fe(s,t,0,[t.props,i]);if(Ue(),he(),fs(r)){if(r.then(he,he),e)return r.then(o=>{os(t,o,e)}).catch(o=>{en(o,t,0)});t.asyncDep=r}else os(t,r,e)}else ii(t,e)}function os(t,e,n){gt(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:Et(e)&&(t.setupState=Br(e)),ii(t,n)}let er;function ii(t,e,n){const s=t.type;if(!t.render){if(!e&&er&&!s.render){const i=s.template||Is(t).template;if(i){const{isCustomElement:r,compilerOptions:o}=t.appContext.config,{delimiters:a,compilerOptions:c}=s,d=Lt(Lt({isCustomElement:r,delimiters:a},o),c);s.render=er(i,d)}}t.render=s.render||Qt}me(t),Le(),Wo(t),Ue(),he()}function va(t){return t.attrsProxy||(t.attrsProxy=new Proxy(t.attrs,{get(e,n){return Kt(t,"get","$attrs"),e[n]}}))}function wa(t){const e=n=>{t.exposed=n||{}};return{get attrs(){return va(t)},slots:t.slots,emit:t.emit,expose:e}}function jn(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(Br(Pr(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in We)return We[n](t)},has(e,n){return n in e||n in We}}))}function _a(t){return gt(t)&&"__vccOpts"in t}const Bt=(t,e)=>co(t,e,Xe),ba=Symbol.for("v-scx"),ya=()=>vn(ba),xa="3.3.4",ka="http://www.w3.org/2000/svg",be=typeof document<"u"?document:null,nr=be&&be.createElement("template"),Ca={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,s)=>{const i=e?be.createElementNS(ka,t):be.createElement(t,n?{is:n}:void 0);return t==="select"&&s&&s.multiple!=null&&i.setAttribute("multiple",s.multiple),i},createText:t=>be.createTextNode(t),createComment:t=>be.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>be.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,s,i,r){const o=n?n.previousSibling:e.lastChild;if(i&&(i===r||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),!(i===r||!(i=i.nextSibling)););else{nr.innerHTML=s?`<svg>${t}</svg>`:t;const a=nr.content;if(s){const c=a.firstChild;for(;c.firstChild;)a.appendChild(c.firstChild);a.removeChild(c)}e.insertBefore(a,n)}return[o?o.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}};function Ta(t,e,n){const s=t._vtc;s&&(e=(e?[e,...s]:[...s]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}function Ia(t,e,n){const s=t.style,i=zt(n);if(n&&!i){if(e&&!zt(e))for(const r in e)n[r]==null&&as(s,r,"");for(const r in n)as(s,r,n[r])}else{const r=s.display;i?e!==n&&(s.cssText=n):e&&t.removeAttribute("style"),"_vod"in t&&(s.display=r)}}const sr=/\s*!important$/;function as(t,e,n){if(dt(n))n.forEach(s=>as(t,e,s));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const s=Ea(t,e);sr.test(n)?t.setProperty($e(s),n.replace(sr,""),"important"):t[s]=n}}const rr=["Webkit","Moz","ms"],Kn={};function Ea(t,e){const n=Kn[e];if(n)return n;let s=Oe(e);if(s!=="filter"&&s in t)return Kn[e]=s;s=pr(s);for(let i=0;i<rr.length;i++){const r=rr[i]+s;if(r in t)return Kn[e]=r}return e}const ir="http://www.w3.org/1999/xlink";function Sa(t,e,n,s,i){if(s&&e.startsWith("xlink:"))n==null?t.removeAttributeNS(ir,e.slice(6,e.length)):t.setAttributeNS(ir,e,n);else{const r=Ii(e);n==null||r&&!gr(n)?t.removeAttribute(e):t.setAttribute(e,r?"":n)}}function Aa(t,e,n,s,i,r,o){if(e==="innerHTML"||e==="textContent"){s&&o(s,i,r),t[e]=n??"";return}const a=t.tagName;if(e==="value"&&a!=="PROGRESS"&&!a.includes("-")){t._value=n;const d=a==="OPTION"?t.getAttribute("value"):t.value,y=n??"";d!==y&&(t.value=y),n==null&&t.removeAttribute(e);return}let c=!1;if(n===""||n==null){const d=typeof t[e];d==="boolean"?n=gr(n):n==null&&d==="string"?(n="",c=!0):d==="number"&&(n=0,c=!0)}try{t[e]=n}catch{}c&&t.removeAttribute(e)}function oi(t,e,n,s){t.addEventListener(e,n,s)}function Pa(t,e,n,s){t.removeEventListener(e,n,s)}function Oa(t,e,n,s,i=null){const r=t._vei||(t._vei={}),o=r[e];if(s&&o)o.value=s;else{const[a,c]=za(e);if(s){const d=r[e]=$a(s,i);oi(t,a,d,c)}else o&&(Pa(t,a,o,c),r[e]=void 0)}}const or=/(?:Once|Passive|Capture)$/;function za(t){let e;if(or.test(t)){e={};let s;for(;s=t.match(or);)t=t.slice(0,t.length-s[0].length),e[s[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):$e(t.slice(2)),e]}let Vn=0;const Ba=Promise.resolve(),Da=()=>Vn||(Ba.then(()=>Vn=0),Vn=Date.now());function $a(t,e){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;te(La(s,n.value),e,5,[s])};return n.value=t,n.attached=Da(),n}function La(t,e){if(dt(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(s=>i=>!i._stopped&&s&&s(i))}else return e}const ar=/^on[a-z]/,Ua=(t,e,n,s,i=!1,r,o,a,c)=>{e==="class"?Ta(t,s,i):e==="style"?Ia(t,n,s):An(e)?us(e)||Oa(t,e,n,s,o):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Ma(t,e,s,i))?Aa(t,e,s,r,o,a,c):(e==="true-value"?t._trueValue=s:e==="false-value"&&(t._falseValue=s),Sa(t,e,s,i))};function Ma(t,e,n,s){return s?!!(e==="innerHTML"||e==="textContent"||e in t&&ar.test(e)&&gt(n)):e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA"||ar.test(e)&&zt(n)?!1:e in t}const lr=t=>{const e=t.props["onUpdate:modelValue"]||!1;return dt(e)?n=>pn(e,n):e},Ra={deep:!0,created(t,{value:e,modifiers:{number:n}},s){const i=Pn(e);oi(t,"change",()=>{const r=Array.prototype.filter.call(t.options,o=>o.selected).map(o=>n?mr(En(o)):En(o));t._assign(t.multiple?i?new Set(r):r:r[0])}),t._assign=lr(s)},mounted(t,{value:e}){cr(t,e)},beforeUpdate(t,e,n){t._assign=lr(n)},updated(t,{value:e}){cr(t,e)}};function cr(t,e){const n=t.multiple;if(!(n&&!dt(e)&&!Pn(e))){for(let s=0,i=t.options.length;s<i;s++){const r=t.options[s],o=En(r);if(n)dt(e)?r.selected=Si(e,o)>-1:r.selected=e.has(o);else if(zn(En(r),e)){t.selectedIndex!==s&&(t.selectedIndex=s);return}}!n&&t.selectedIndex!==-1&&(t.selectedIndex=-1)}}function En(t){return"_value"in t?t._value:t.value}const Fa=["ctrl","shift","alt","meta"],ja={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>Fa.some(n=>t[`${n}Key`]&&!e.includes(n))},Nn=(t,e)=>(n,...s)=>{for(let i=0;i<e.length;i++){const r=ja[e[i]];if(r&&r(n,e))return}return t(n,...s)},St={beforeMount(t,{value:e},{transition:n}){t._vod=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):je(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:s}){!e!=!n&&(s?e?(s.beforeEnter(t),je(t,!0),s.enter(t)):s.leave(t,()=>{je(t,!1)}):je(t,e))},beforeUnmount(t,{value:e}){je(t,e)}};function je(t,e){t.style.display=e?t._vod:"none"}const Na=Lt({patchProp:Ua},Ca);let ur;function Ha(){return ur||(ur=sa(Na))}const Wa=(...t)=>{const e=Ha().createApp(...t),{mount:n}=e;return e.mount=s=>{const i=Za(s);if(!i)return;const r=e._component;!gt(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.innerHTML="";const o=n(i,!1,i instanceof SVGElement);return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),o},e};function Za(t){return zt(t)?document.querySelector(t):t}const Ka={class:"relative flex flex-wrap justify-center w-full gap-2"},Va={class:"relative flex flex-wrap justify-center w-full gap-2"},qa=["onClick"],Ja=ge({__name:"Toolbar",props:{pluginList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t,n=ft(!1),s=Bt(()=>{let o=[];return Array.isArray(e.pluginList)&&e.pluginList.forEach(a=>{if(a.tags&&typeof a.tags=="string"){let c=a.tags.split(",").map(d=>d.trim());c=c.filter(d=>d!==""),c.length>0&&o.push(c[0])}}),o}),i=Bt(()=>Array.from(new Set(s.value))),r=()=>{n.value=!n.value};return(o,a)=>(ht(),wt("div",Ka,[b("button",{class:At(["inline-flex items-center border-2 shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",o.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:a[0]||(a[0]=c=>o.$emit("update-active-category","all"))}," All ",2),b("button",{class:"inline-flex w-full items-center shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",onClick:r}," 按分类筛选 ⇣ "),It(b("div",Va,[(ht(!0),wt(Dt,null,Mn(i.value,c=>(ht(),wt("div",{class:"plugin-item",key:c},[b("button",{class:At(["h-6 inline-flex items-center border-2 shadow-md justify-center flex-1 px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",o.activeCategory===c?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{o.$emit("update-active-category",c)}},kt(c),11,qa)]))),128))],512),[[St,n.value]])]))}}),ke=t=>(Fr("data-v-ca352705"),t=t(),jr(),t),Ya={class:"relative"},Ga={class:"flex flex-col items-start h-full gap-4 p-6"},Xa={class:"relative w-full space-y-2"},Qa={class:"relative"},tl={class:"absolute z-1 top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},el={tooltip:"官方商城插件",class:"text-white absolute right-2 top-2 z-10"},nl=ke(()=>b("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-fc8a1590":"","data-icon":"arcticons:obsidian"},[b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M17.133 40.912c3.155-6.394 3.071-10.982 1.722-14.24c-1.229-3.014-3.527-4.913-5.333-6.095a2.3 2.3 0 0 1-.167.503L9.11 30.526c-.44.975-.237 2.12.512 2.885l6.784 6.98c.214.213.466.39.726.52Zm8.581-12.973c.847.083 1.675.27 2.494.567c2.587.968 4.942 3.146 6.887 7.343c.14-.242.279-.474.428-.698a114 114 0 0 0 3.415-5.388a1.3 1.3 0 0 0-.093-1.461a28.2 28.2 0 0 1-3.322-5.445c-.894-2.14-1.024-5.481-1.033-7.1c0-.615-.196-1.22-.577-1.704l-6.747-8.561l-.112-.14c.493 1.629.465 2.931.158 4.113c-.28 1.099-.8 2.094-1.35 3.146c-.185.354-.372.717-.548 1.089a13 13 0 0 0-1.47 5.398c-.094 2.252.362 5.072 1.86 8.84z"}),b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M25.704 27.939c-1.498-3.77-1.954-6.59-1.86-8.841c.092-2.234.744-3.91 1.47-5.398l.558-1.09c.54-1.05 1.052-2.047 1.34-3.145a7.3 7.3 0 0 0-.158-4.113a2.606 2.606 0 0 0-3.667-.186l-8.022 7.212c-.45.403-.746.949-.838 1.545L13.55 20.4c0 .065-.019.121-.028.186c1.806 1.173 4.095 3.072 5.333 6.078c.242.595.447 1.219.595 1.898a18.6 18.6 0 0 1 6.254-.633z"}),b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M29.91 43.406c1.732.475 3.472-.912 3.714-2.699c.198-1.695.7-3.34 1.48-4.858c-1.954-4.197-4.309-6.375-6.887-7.343c-2.745-1.023-5.733-.68-8.767.056c.68 3.08.28 7.11-2.308 12.35c.289.149.615.232.94.26l4.086.307c2.215.159 5.519 1.303 7.743 1.927Z"})],-1)),sl=[nl],rl={tooltip:"社区专供插件",class:"absolute right-2 top-2 z-10"},il=ke(()=>b("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},[b("g",null,[b("path",{d:"M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z",style:{},fill:"#ffc170",class:""}),b("path",{d:"M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696",style:{},fill:"#e1a05a","data-original":"#ffd6a0",class:""}),b("path",{d:"M0 128h55.652v33.391H0z",style:{},fill:"#a0bdd4",class:""}),b("path",{d:"M13.053 51.94h55.65v33.391h-55.65z",style:{},transform:"rotate(-160.527 40.878 68.636)",fill:"#a0bdd4",class:""}),b("path",{d:"M456.348 128H512v33.391h-55.652z",style:{},fill:"#a0bdd4",class:""}),b("path",{d:"M454.411 40.807h33.391v55.65h-33.391z",style:{},transform:"rotate(-109.469 471.111 68.636)",fill:"#a0bdd4",class:""}),b("path",{d:"m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z",style:{},fill:"#f8f8f8",class:""}),b("path",{d:"m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z",style:{},fill:"#fef5ea",class:""})])],-1)),ol=[il],al=["data-name"],ll=["data-name","alt","src"],cl=["src"],ul={class:"relative flex items-center h-10 overflow-hidden plugin_name"},dl={"data-pagefind-meta":"title",class:"flex items-center text-lg font-medium leading-6 plugin_name font-heading text-muted-800 dark:text-white"},fl=["href"],hl={class:"-mt-2 ml-2 px-2 rounded text-muted-100 bg-green-600 text-xs"},pl={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ml=ke(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),gl={class:"flex flex-wrap items-center leading-6 text-muted-600 dark:text-muted-400"},vl=["src"],wl=["src"],_l=["href"],bl=ke(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),yl=[bl],xl=["href"],kl=ke(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 32 32","data-v-5df2a037":"","data-icon":"la:readme",class:"text-green-500 block mx-auto iconify w-6 h-6 iconify--la"},[b("path",{fill:"currentColor",d:"M5 6C3.346 6 2 7.346 2 9v12c0 1.654 1.346 3 3 3l6.184-.02c.99 0 1.949.31 2.773.86L16 26.2l2.043-1.361a4.988 4.988 0 0 1 2.773-.84H27c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3h-6.184c-1.386 0-2.73.408-3.882 1.176L16 7.799l-.934-.623A6.978 6.978 0 0 0 11.184 6H5zm0 2h6.184c.99 0 1.949.29 2.773.84L16 10.2l2.043-1.361A4.988 4.988 0 0 1 20.816 8H27c.552 0 1 .449 1 1v12c0 .551-.448 1-1 1h-6.184c-1.386 0-2.73.408-3.882 1.176l-.934.623l-.934-.623A6.978 6.978 0 0 0 11.184 22H5c-.552 0-1-.449-1-1V9c0-.551.448-1 1-1zm1 4v2h8v-2H6zm12 0v2h8v-2h-8zM6 16v2h8v-2H6zm12 0v2h8v-2h-8z"})],-1)),Cl=[kl],Tl={class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Il={class:"w-full mt-auto space-y-6"},El={class:"relative flex items-center justify-start w-full"},Sl=["src","onerror"],Al=["href"],Pl={class:"pl-2"},Ol=["tooltip"],zl={class:"font-sans text-sm text-muted-400"},Bl={class:"block ml-auto font-sans text-sm text-muted-400"},Dl=ke(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),$l=ke(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),Ll=["tooltip"],Ul={xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Ml=["fill"],Rl=ge({__name:"PluginCard",props:{app:{},pluginInfo:{},isLogin:{type:Boolean}},emits:["download-update-plugin"],setup(t){const e=t,n=e.isLogin,s=ft(!1),i=ft(""),r=ft("rgba(255, 51, 68, 0.8)");function o(){return e.pluginInfo.authorAvatar&&e.pluginInfo.authorAvatar.length>0?e.pluginInfo.authorAvatar:f(e.pluginInfo.author)}let a=[];e.pluginInfo.tags&&e.pluginInfo.tags.length>0&&(a=e.pluginInfo.tags.split(","));function c(g){return g>=1e6?(g/1e6).toFixed(0)+"M":g>=1e3?(g/1e3).toFixed(0)+"K":g.toString()}function d(g){if(g){const _=new Date(g),C=new Date,P=24*60*60*1e3,I=Math.round(Math.abs((C.getTime()-_.getTime())/P)),z=Math.round(I/30),Z=Math.round(I/365);return I<=30?`${I}天前`:z<=12?`${z}月前`:`${Z}年前`}else return"未知"}const y=()=>i.value=="未启用"?"当前插件未启用，点击启用":i.value=="已启用"?"当前插件已启动，点击禁用":"未成功启用。请查看控制台错误信息。",m=async g=>{i.value=="已启用"?(await e.app.plugins.disablePluginAndSave(g),i.value="未启用",r.value="rgba(255, 51, 68, 0.8)"):await e.app.plugins.enablePluginAndSave(g)?(i.value="已启用",r.value="#2aa330"):i.value="未成功"};Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)!=-1&&e.pluginInfo.isInstalled&&(i.value="已启用",r.value="#2aa330"),Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)==-1&&e.pluginInfo.isInstalled&&(i.value="未启用",r.value="rgba(255, 51, 68, 0.8)");function p(g){return(g.match(/\b\w/g)||[]).join("").toUpperCase()}function f(g){let _="";if(g){const C=p(g);/^[a-zA-Z]+$/.test(C)?_=`https://dummyimage.com/100x100/555/fff&text=${C.toUpperCase()}`:_=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(C)}`}else _="https://cdn.pkmer.cn/covers/logo.png!nomark";return _}const x=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,h=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(g,_)=>(ht(),wt("div",Ya,[b("div",Ga,[b("div",Xa,[b("div",Qa,[b("span",tl,kt(Pt(a)[0]),1),It(b("view",el,sl,512),[[St,g.pluginInfo.source=="official"]]),It(b("view",rl,ol,512),[[St,g.pluginInfo.source=="community"]]),b("span",{"data-name":g.pluginInfo.banner?"":g.pluginInfo.name,class:"noimg h-40 md:h-52",style:tn(x())},[b("img",{"data-name":g.pluginInfo.name,alt:g.pluginInfo.name,class:"border-0 absolute rounded-lg w-[200px] md:w-[300px] max-h-[148px] object-contain cursor-pointer",width:"348",height:"208",src:g.pluginInfo.banner?g.pluginInfo.banner.replace("!pkmer","!nomark"):"",loading:"lazy",decoding:"async",onClick:_[0]||(_[0]=C=>s.value=!0)},null,8,ll)],12,al),s.value?(ht(),wt("div",{key:0,class:"overlay",onClick:_[2]||(_[2]=C=>s.value=!1)},[b("img",{src:g.pluginInfo.banner?.replace("!nomark","!pkmer").replace("gif!pkmer","gif"),alt:"原图",onClick:_[1]||(_[1]=Nn(()=>{},["stop"]))},null,8,cl)])):ue("",!0)]),b("div",ul,[b("h3",dl,[b("a",{href:g.pluginInfo.contentUrl?g.pluginInfo.contentUrl:g.pluginInfo.readme_zh?g.pluginInfo.readme_zh:"#"},kt(g.pluginInfo.name),9,fl),b("span",hl,kt(g.pluginInfo.version),1),b("span",pl,kt(c(g.pluginInfo.pkmerDownloadCount)),1),ml])]),b("p",gl,[b("img",{class:"h-full",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${g.pluginInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,vl),b("img",{class:"h-full ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${c(g.pluginInfo.downloadCount)}-yellow`},null,8,wl),It(b("a",{class:"ml-2",href:g.pluginInfo.contentUrl?g.pluginInfo.contentUrl:"javascript:void(0)"},yl,8,_l),[[St,g.pluginInfo.contentUrl]]),It(b("a",{class:"ml-2",href:g.pluginInfo.readme_zh?g.pluginInfo.readme_zh:"javascript:void(0)",tooltip:"Readme文档"},Cl,8,xl),[[St,g.pluginInfo.readme_zh]])]),b("p",Tl,kt(g.pluginInfo.chineseDescription?.replace("【机翻】","")||g.pluginInfo.description),1)]),b("div",Il,[b("div",El,[b("img",{class:"w-12 mask mask-blob",src:o(),onerror:`javascript:this.src='${f(g.pluginInfo.author)}'`,alt:"avatar"},null,8,Sl),b("a",{href:"https://github.com/"+g.pluginInfo.repo},[b("div",Pl,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:g.pluginInfo.author},kt(g.pluginInfo.author),9,Ol),b("p",zl,kt(d(g.pluginInfo.pluginUpdatedTime)),1)])],8,Al),b("div",Bl,[It(b("button",{onClick:h,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[St,!Pt(n)]]),It(b("div",null,[g.pluginInfo.isInstalled?g.pluginInfo.isInstalled&&g.pluginInfo.isOutdated?(ht(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:_[4]||(_[4]=C=>g.$emit("download-update-plugin","update",g.pluginInfo.id,g.pluginInfo.version,g.pluginInfo.source))},[$l,Ft(" 更新 ")])):(ht(),wt("button",{key:2,onClick:_[5]||(_[5]=C=>m(g.pluginInfo.id)),tooltip:y(),class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[(ht(),wt("svg",Ul,[b("path",{fill:r.value,d:"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031a3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062c0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765a4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062A3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"},null,8,Ml)])),Ft(" 已安装 ")],8,Ll)):It((ht(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:_[3]||(_[3]=C=>g.$emit("download-update-plugin","download",g.pluginInfo.id,g.pluginInfo.version,g.pluginInfo.source))},[Dl,Ft(" 下载 ")],512)),[[St,Pt(n)]])],512),[[St,Pt(n)]])])])])])]))}});const ai=(t,e)=>{const n=t.__vccOpts||t;for(const[s,i]of e)n[s]=i;return n},Fl=ai(Rl,[["__scopeId","data-v-ca352705"]]),Me=t=>(Fr("data-v-1a6e40f1"),t=t(),jr(),t),jl={class:"relative"},Nl={class:"h-full flex flex-col items-start gap-4 p-6"},Hl={class:"relative w-full space-y-2"},Wl={class:"relative"},Zl={class:"mark"},Kl=Me(()=>b("span",{class:"learn"},"Tips ",-1)),Vl=[Kl],ql=["data-name"],Jl=["src","alt"],Yl=["src"],Gl={class:"plugin_name relative flex items-center h-10 overflow-hidden"},Xl={"data-pagefind-meta":"title",class:"flex items-center font-heading text-lg font-medium text-muted-800 dark:text-white leading-6"},Ql=["src"],tc={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ec=Me(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),nc={class:"flex items-center flex-wrap leading-6 text-muted-600 dark:text-muted-400"},sc=["src"],rc=["src"],ic=["href"],oc=Me(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),ac=[oc],lc={class:"w-full mt-auto space-y-6"},cc={class:"flex items-center justify-start w-full relative"},uc=["src","onerror"],dc=["href"],fc={class:"pl-2"},hc=["tooltip"],pc={class:"block ml-auto font-sans text-sm text-muted-400"},mc=Me(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),gc=Me(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),vc=Me(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-5ade68da":"","data-icon":"icon-park-outline:link-cloud-sucess",class:"block w-4 h-4 mx-auto iconify iconify--icon-park-outline"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"4"},[b("path",{d:"M12 33c-3.333 0-8-1.5-8-7.5c0-7 7-8.5 9-8.5c1-3.5 3-9 11-9c7 0 10 4 11 7.5c0 0 9 1 9 9.5c0 6-4 8-8 8"}),b("path",{d:"m18 33l6 5l8-10"})])],-1)),wc=ge({__name:"ThemeCard",props:{app:{},themeInfo:{},isLogin:{type:Boolean}},emits:["download-update-theme"],setup(t){const e=t,n=e.isLogin;function s(){return e.themeInfo.authorAvatar&&e.themeInfo.authorAvatar.length>0?e.themeInfo.authorAvatar:c(e.themeInfo.author)}const i=ft(!1);let r=[];e.themeInfo.tags&&e.themeInfo.tags.length>0&&(r=e.themeInfo.tags.split(","));function o(p){return p>=1e6?(p/1e6).toFixed(0)+"M":p>=1e3?(p/1e3).toFixed(0)+"K":p.toString()}function a(p){return(p.match(/\b\w/g)||[]).join("").toUpperCase()}function c(p){let f="";if(p){const x=a(p);/^[a-zA-Z]+$/.test(x)?f=`https://dummyimage.com/100x100/555/fff&text=${x.toUpperCase()}`:f=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(x)}`}else f="https://cdn.pkmer.cn/covers/logo.png!nomark";return f}const d=async p=>{await e.app.customCss.setTheme(p)},y=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,m=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(p,f)=>(ht(),wt("div",jl,[b("div",Nl,[b("div",Hl,[b("div",Wl,[It(b("span",{class:"absolute top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},kt(Pt(r)[0]),513),[[St,Pt(r)[0]]]),It(b("view",Zl,Vl,512),[[St,p.themeInfo.contentUrl]]),It(b("div",{class:"noimg h-40 md:h-52","data-name":p.themeInfo.name,style:tn(y())},null,12,ql),[[St,!p.themeInfo.banner]]),It(b("img",{class:"w-full h-52 object-contain aspect-video rounded-xl cursor-pointer",src:p.themeInfo.banner?.replace("gif!pkmer","gif").replace("!pkmer","!nomark"),alt:p.themeInfo.name,width:"348",height:"208",onerror:"javascript:this.src='https://cdn.pkmer.cn/covers/pkmer2.png!nomark';this.οnerrοr=null;",onClick:f[0]||(f[0]=x=>i.value=!0)},null,8,Jl),[[St,p.themeInfo.banner]]),i.value?(ht(),wt("div",{key:0,class:"overlay",onClick:f[2]||(f[2]=x=>i.value=!1)},[b("img",{src:p.themeInfo.banner?.replace("!nomark","!pkmer"),alt:"原图",onClick:f[1]||(f[1]=Nn(()=>{},["stop"]))},null,8,Yl)])):ue("",!0)]),b("div",Gl,[b("h3",Xl,[Ft(kt(p.themeInfo.name)+" ",1),b("img",{class:"-mt-2 ml-2",alt:"version",src:`https://img.shields.io/badge/${p.themeInfo.version}-brightgreen`},null,8,Ql),b("span",tc,kt(o(p.themeInfo.pkmerDownloadCount)),1),ec])]),b("p",nc,[b("img",{class:"h-ful",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${p.themeInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,sc),b("img",{class:"h-ful ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${o(p.themeInfo.downloadCount)}-yellow`},null,8,rc),b("a",{class:At(["ml-2",{visible:p.themeInfo.contentUrl,invisible:!p.themeInfo.contentUrl}]),href:p.themeInfo.contentUrl?p.themeInfo.contentUrl:"javascript:void(0)"},ac,10,ic)]),It(b("p",{class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},kt(p.themeInfo.chineseDescription?.replace("【机翻】","")||p.themeInfo.description),513),[[St,p.themeInfo.description]])]),b("div",lc,[b("div",cc,[b("img",{class:"w-12 mask mask-blob",src:s(),onerror:`javascript:this.src='${c(p.themeInfo.author)}'`,alt:"avatar"},null,8,uc),b("a",{href:"https://github.com/"+p.themeInfo.repo},[b("div",fc,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:p.themeInfo.author},kt(p.themeInfo.author),9,hc)])],8,dc),b("div",pc,[It(b("button",{onClick:m,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[St,!Pt(n)]]),It(b("div",null,[p.themeInfo.isInstalled?p.themeInfo.isInstalled&&p.themeInfo.isOutdated?(ht(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:f[4]||(f[4]=x=>p.$emit("download-update-theme","update",p.themeInfo.name,p.themeInfo.version))},[gc,Ft(" 更新 ")])):(ht(),wt("button",{key:2,onClick:f[5]||(f[5]=x=>d(p.themeInfo.name)),tooltip:"主题已安装，应用当前主题",flow:"down",class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[vc,Ft(" 应用 ")])):It((ht(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:f[3]||(f[3]=x=>p.$emit("download-update-theme","download",p.themeInfo.name,p.themeInfo.version))},[mc,Ft(" 下载 ")],512)),[[St,Pt(n)]])],512),[[St,Pt(n)]])])])])])]))}});const li=ai(wc,[["__scopeId","data-v-1a6e40f1"]]),Vt="https://api.pkmer.cn/api/v1/download/obsidian";class Ce{token;constructor(e){this.token=e}fetchWithToken(e,n){return fetch(e,{...n,headers:{Authorization:"Bearer "+this.token}})}isTokenExpired(e){return Math.floor(Date.now()/1e3)>e.exp}async isUserLogin(){const e=this.token;if(e){const n=e.split("."),s=JSON.parse(decodeURIComponent(escape(window.atob(n[1].replace(/-/g,"+").replace(/_/g,"/")))));return this.isTokenExpired(s)?(console.log("Pkmer Token has expired. Please log in again to get a new token."),!1):!0}else return!1}async getPkmerDocs(){const e=await ct.requestUrl("https://pkmer.cn/getPost.json");return JSON.parse(e.text).map(s=>({slug:s.slug.split("/").pop(),uid:s.uid,authorAvatar:s.authorAvatar,description:s.description,tags:Array.isArray(s.tags)?s.tags.join(", "):s.tags}))}async getDownloadUrl(e,n){return e=="obsidian-pkmer"?`https://pkmer.cn/_release/obsidian-pkmer.zip?v=${n}`:await(await this.fetchWithToken(Vt+"/getPluginDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getDownloadCount(){const e=await this.fetchWithToken(Vt+"/getPluginDownloadCount");return parseInt(await e.text())+1}async getTop20Plugins(){const e=localStorage.getItem("top20Plugins"),n=localStorage.getItem("top20PluginsExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(Vt+"/getTop20Plugins")).json();return localStorage.setItem("top20Plugins",JSON.stringify(r)),localStorage.setItem("top20PluginsExpiry",String(s+8*60*60*1e3)),r}}async searchPlugins(e){return await(await this.fetchWithToken(Vt+"/searchPlugins?keyword="+e+"&limit=10",{method:"GET"})).json()}async getPluginListPaginated(e=1,n=24,s="downloadCount",i="DESC"){try{const o=await(await this.fetchWithToken(`${Vt}/getPluginsPaginated?page=${e}&limit=${n}&sortBy=${s}&sortOrder=${i}`,{method:"GET"})).json();return{plugins:o.data,total:o.meta.total,totalPages:o.meta.totalPages}}catch(r){throw console.error("Error fetching paginated plugin list:",r),r}}async searchPluginsPaginated(e,n=1,s=24,i="downloadCount",r="DESC"){try{const a=await(await this.fetchWithToken(`${Vt}/searchPluginsPaginated?searchText=${encodeURIComponent(e)}&page=${n}&limit=${s}&sortBy=${i}&sortOrder=${r}`,{method:"GET"})).json();return{plugins:a.data,total:a.meta.total,totalPages:a.meta.totalPages}}catch(o){throw console.error("Error searching plugins with pagination:",o),o}}async getTop20Themes(){const e=localStorage.getItem("top20Themes"),n=localStorage.getItem("top20ThemesExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(Vt+"/getTop20Themes")).json();return localStorage.setItem("top20Themes",JSON.stringify(r)),localStorage.setItem("top20ThemesExpiry",String(s+8*60*60*1e3)),r}}async getThemeList(e=1*60*60*1e3){const n=localStorage.getItem("themeList"),s=localStorage.getItem("themeListExpiry"),i=new Date().getTime();if(n&&s&&i<+s)return JSON.parse(n);try{const o=await(await this.fetchWithToken(Vt+"/getAllThemes",{method:"GET"})).json();return localStorage.setItem("themeList",JSON.stringify(o)),localStorage.setItem("themeListExpiry",String(i+e)),o}catch(r){throw console.error("Error fetching theme list:",r),r}}async getThemeListPaginated(e=1,n=24,s="downloadCount",i="DESC"){try{const o=await(await this.fetchWithToken(`${Vt}/getThemesPaginated?page=${e}&limit=${n}&sortBy=${s}&sortOrder=${i}`,{method:"GET"})).json();return{themes:o.data,total:o.meta.total,totalPages:o.meta.totalPages}}catch(r){throw console.error("Error fetching paginated theme list:",r),r}}async searchThemesPaginated(e,n=1,s=24,i="downloadCount",r="DESC"){try{const a=await(await this.fetchWithToken(`${Vt}/searchThemesPaginated?searchText=${encodeURIComponent(e)}&page=${n}&limit=${s}&sortBy=${i}&sortOrder=${r}`,{method:"GET"})).json();return{themes:a.data,total:a.meta.total,totalPages:a.meta.totalPages}}catch(o){throw console.error("Error searching themes with pagination:",o),o}}async getThemeDownloadUrl(e,n){return await(await this.fetchWithToken(Vt+"/getThemeDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getPkmerVersion(){const e=Math.random(),n=await ct.requestUrl(`https://pkmer.cn/_release/manifest.json?_=${e}`);return JSON.parse(n.text).version}async getPluginTags(){try{return await(await this.fetchWithToken(`${Vt}/getPluginTags`,{method:"GET"})).json()}catch(e){return console.error("Error fetching plugin tags:",e),[]}}async getInstalledPluginsPaginated(e,n=1,s=24,i="downloadCount",r="DESC"){if(!e?.length)throw new Error("插件ID列表不能为空");try{const o=await this.fetchWithToken(`${Vt}/getInstalledPluginsPaginated?page=${n}&pageSize=${s}&sortBy=${i}&sortOrder=${r}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pluginIds:e})}),a=await o.json();if(!o.ok)throw new Error(a.message||"请求失败");return{plugins:a?.data,total:a.meta?.total||0,totalPages:a.meta?.totalPages||1}}catch(o){throw console.error("Error fetching installed plugins:",o),o}}}var dn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function fn(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var ci={exports:{}};/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/(function(t,e){(function(n){t.exports=n()})(function(){return function n(s,i,r){function o(d,y){if(!i[d]){if(!s[d]){var m=typeof fn=="function"&&fn;if(!y&&m)return m(d,!0);if(a)return a(d,!0);var p=new Error("Cannot find module '"+d+"'");throw p.code="MODULE_NOT_FOUND",p}var f=i[d]={exports:{}};s[d][0].call(f.exports,function(x){var h=s[d][1][x];return o(h||x)},f,f.exports,n,s,i,r)}return i[d].exports}for(var a=typeof fn=="function"&&fn,c=0;c<r.length;c++)o(r[c]);return o}({1:[function(n,s,i){var r=n("./utils"),o=n("./support"),a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";i.encode=function(c){for(var d,y,m,p,f,x,h,g=[],_=0,C=c.length,P=C,I=r.getTypeOf(c)!=="string";_<c.length;)P=C-_,m=I?(d=c[_++],y=_<C?c[_++]:0,_<C?c[_++]:0):(d=c.charCodeAt(_++),y=_<C?c.charCodeAt(_++):0,_<C?c.charCodeAt(_++):0),p=d>>2,f=(3&d)<<4|y>>4,x=1<P?(15&y)<<2|m>>6:64,h=2<P?63&m:64,g.push(a.charAt(p)+a.charAt(f)+a.charAt(x)+a.charAt(h));return g.join("")},i.decode=function(c){var d,y,m,p,f,x,h=0,g=0,_="data:";if(c.substr(0,_.length)===_)throw new Error("Invalid base64 input, it looks like a data url.");var C,P=3*(c=c.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(c.charAt(c.length-1)===a.charAt(64)&&P--,c.charAt(c.length-2)===a.charAt(64)&&P--,P%1!=0)throw new Error("Invalid base64 input, bad content length.");for(C=o.uint8array?new Uint8Array(0|P):new Array(0|P);h<c.length;)d=a.indexOf(c.charAt(h++))<<2|(p=a.indexOf(c.charAt(h++)))>>4,y=(15&p)<<4|(f=a.indexOf(c.charAt(h++)))>>2,m=(3&f)<<6|(x=a.indexOf(c.charAt(h++))),C[g++]=d,f!==64&&(C[g++]=y),x!==64&&(C[g++]=m);return C}},{"./support":30,"./utils":32}],2:[function(n,s,i){var r=n("./external"),o=n("./stream/DataWorker"),a=n("./stream/Crc32Probe"),c=n("./stream/DataLengthProbe");function d(y,m,p,f,x){this.compressedSize=y,this.uncompressedSize=m,this.crc32=p,this.compression=f,this.compressedContent=x}d.prototype={getContentWorker:function(){var y=new o(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new c("data_length")),m=this;return y.on("end",function(){if(this.streamInfo.data_length!==m.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),y},getCompressedWorker:function(){return new o(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},d.createWorkerFrom=function(y,m,p){return y.pipe(new a).pipe(new c("uncompressedSize")).pipe(m.compressWorker(p)).pipe(new c("compressedSize")).withStreamInfo("compression",m)},s.exports=d},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,s,i){var r=n("./stream/GenericWorker");i.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},i.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,s,i){var r=n("./utils"),o=function(){for(var a,c=[],d=0;d<256;d++){a=d;for(var y=0;y<8;y++)a=1&a?3988292384^a>>>1:a>>>1;c[d]=a}return c}();s.exports=function(a,c){return a!==void 0&&a.length?r.getTypeOf(a)!=="string"?function(d,y,m,p){var f=o,x=p+m;d^=-1;for(var h=p;h<x;h++)d=d>>>8^f[255&(d^y[h])];return-1^d}(0|c,a,a.length,0):function(d,y,m,p){var f=o,x=p+m;d^=-1;for(var h=p;h<x;h++)d=d>>>8^f[255&(d^y.charCodeAt(h))];return-1^d}(0|c,a,a.length,0):0}},{"./utils":32}],5:[function(n,s,i){i.base64=!1,i.binary=!1,i.dir=!1,i.createFolders=!0,i.date=null,i.compression=null,i.compressionOptions=null,i.comment=null,i.unixPermissions=null,i.dosPermissions=null},{}],6:[function(n,s,i){var r=null;r=typeof Promise<"u"?Promise:n("lie"),s.exports={Promise:r}},{lie:37}],7:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",o=n("pako"),a=n("./utils"),c=n("./stream/GenericWorker"),d=r?"uint8array":"array";function y(m,p){c.call(this,"FlateWorker/"+m),this._pako=null,this._pakoAction=m,this._pakoOptions=p,this.meta={}}i.magic="\b\0",a.inherits(y,c),y.prototype.processChunk=function(m){this.meta=m.meta,this._pako===null&&this._createPako(),this._pako.push(a.transformTo(d,m.data),!1)},y.prototype.flush=function(){c.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},y.prototype.cleanUp=function(){c.prototype.cleanUp.call(this),this._pako=null},y.prototype._createPako=function(){this._pako=new o[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var m=this;this._pako.onData=function(p){m.push({data:p,meta:m.meta})}},i.compressWorker=function(m){return new y("Deflate",m)},i.uncompressWorker=function(){return new y("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,s,i){function r(f,x){var h,g="";for(h=0;h<x;h++)g+=String.fromCharCode(255&f),f>>>=8;return g}function o(f,x,h,g,_,C){var P,I,z=f.file,Z=f.compression,j=C!==d.utf8encode,V=a.transformTo("string",C(z.name)),F=a.transformTo("string",d.utf8encode(z.name)),G=z.comment,st=a.transformTo("string",C(G)),S=a.transformTo("string",d.utf8encode(G)),H=F.length!==z.name.length,u=S.length!==G.length,q="",at="",N="",ot=z.dir,Q=z.date,rt={crc32:0,compressedSize:0,uncompressedSize:0};x&&!h||(rt.crc32=f.crc32,rt.compressedSize=f.compressedSize,rt.uncompressedSize=f.uncompressedSize);var R=0;x&&(R|=8),j||!H&&!u||(R|=2048);var L=0,ut=0;ot&&(L|=16),_==="UNIX"?(ut=798,L|=function(tt,_t){var Ct=tt;return tt||(Ct=_t?16893:33204),(65535&Ct)<<16}(z.unixPermissions,ot)):(ut=20,L|=function(tt){return 63&(tt||0)}(z.dosPermissions)),P=Q.getUTCHours(),P<<=6,P|=Q.getUTCMinutes(),P<<=5,P|=Q.getUTCSeconds()/2,I=Q.getUTCFullYear()-1980,I<<=4,I|=Q.getUTCMonth()+1,I<<=5,I|=Q.getUTCDate(),H&&(at=r(1,1)+r(y(V),4)+F,q+="up"+r(at.length,2)+at),u&&(N=r(1,1)+r(y(st),4)+S,q+="uc"+r(N.length,2)+N);var it="";return it+=`
\0`,it+=r(R,2),it+=Z.magic,it+=r(P,2),it+=r(I,2),it+=r(rt.crc32,4),it+=r(rt.compressedSize,4),it+=r(rt.uncompressedSize,4),it+=r(V.length,2),it+=r(q.length,2),{fileRecord:m.LOCAL_FILE_HEADER+it+V+q,dirRecord:m.CENTRAL_FILE_HEADER+r(ut,2)+it+r(st.length,2)+"\0\0\0\0"+r(L,4)+r(g,4)+V+q+st}}var a=n("../utils"),c=n("../stream/GenericWorker"),d=n("../utf8"),y=n("../crc32"),m=n("../signature");function p(f,x,h,g){c.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=x,this.zipPlatform=h,this.encodeFileName=g,this.streamFiles=f,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}a.inherits(p,c),p.prototype.push=function(f){var x=f.meta.percent||0,h=this.entriesCount,g=this._sources.length;this.accumulate?this.contentBuffer.push(f):(this.bytesWritten+=f.data.length,c.prototype.push.call(this,{data:f.data,meta:{currentFile:this.currentFile,percent:h?(x+100*(h-g-1))/h:100}}))},p.prototype.openedSource=function(f){this.currentSourceOffset=this.bytesWritten,this.currentFile=f.file.name;var x=this.streamFiles&&!f.file.dir;if(x){var h=o(f,x,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:h.fileRecord,meta:{percent:0}})}else this.accumulate=!0},p.prototype.closedSource=function(f){this.accumulate=!1;var x=this.streamFiles&&!f.file.dir,h=o(f,x,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(h.dirRecord),x)this.push({data:function(g){return m.DATA_DESCRIPTOR+r(g.crc32,4)+r(g.compressedSize,4)+r(g.uncompressedSize,4)}(f),meta:{percent:100}});else for(this.push({data:h.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},p.prototype.flush=function(){for(var f=this.bytesWritten,x=0;x<this.dirRecords.length;x++)this.push({data:this.dirRecords[x],meta:{percent:100}});var h=this.bytesWritten-f,g=function(_,C,P,I,z){var Z=a.transformTo("string",z(I));return m.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(_,2)+r(_,2)+r(C,4)+r(P,4)+r(Z.length,2)+Z}(this.dirRecords.length,h,f,this.zipComment,this.encodeFileName);this.push({data:g,meta:{percent:100}})},p.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},p.prototype.registerPrevious=function(f){this._sources.push(f);var x=this;return f.on("data",function(h){x.processChunk(h)}),f.on("end",function(){x.closedSource(x.previous.streamInfo),x._sources.length?x.prepareNextSource():x.end()}),f.on("error",function(h){x.error(h)}),this},p.prototype.resume=function(){return!!c.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},p.prototype.error=function(f){var x=this._sources;if(!c.prototype.error.call(this,f))return!1;for(var h=0;h<x.length;h++)try{x[h].error(f)}catch{}return!0},p.prototype.lock=function(){c.prototype.lock.call(this);for(var f=this._sources,x=0;x<f.length;x++)f[x].lock()},s.exports=p},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,s,i){var r=n("../compressions"),o=n("./ZipFileWorker");i.generateWorker=function(a,c,d){var y=new o(c.streamFiles,d,c.platform,c.encodeFileName),m=0;try{a.forEach(function(p,f){m++;var x=function(C,P){var I=C||P,z=r[I];if(!z)throw new Error(I+" is not a valid compression method !");return z}(f.options.compression,c.compression),h=f.options.compressionOptions||c.compressionOptions||{},g=f.dir,_=f.date;f._compressWorker(x,h).withStreamInfo("file",{name:p,dir:g,date:_,comment:f.comment||"",unixPermissions:f.unixPermissions,dosPermissions:f.dosPermissions}).pipe(y)}),y.entriesCount=m}catch(p){y.error(p)}return y}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,s,i){function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var o=new r;for(var a in this)typeof this[a]!="function"&&(o[a]=this[a]);return o}}(r.prototype=n("./object")).loadAsync=n("./load"),r.support=n("./support"),r.defaults=n("./defaults"),r.version="3.10.1",r.loadAsync=function(o,a){return new r().loadAsync(o,a)},r.external=n("./external"),s.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,s,i){var r=n("./utils"),o=n("./external"),a=n("./utf8"),c=n("./zipEntries"),d=n("./stream/Crc32Probe"),y=n("./nodejsUtils");function m(p){return new o.Promise(function(f,x){var h=p.decompressed.getContentWorker().pipe(new d);h.on("error",function(g){x(g)}).on("end",function(){h.streamInfo.crc32!==p.decompressed.crc32?x(new Error("Corrupted zip : CRC32 mismatch")):f()}).resume()})}s.exports=function(p,f){var x=this;return f=r.extend(f||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:a.utf8decode}),y.isNode&&y.isStream(p)?o.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",p,!0,f.optimizedBinaryString,f.base64).then(function(h){var g=new c(f);return g.load(h),g}).then(function(h){var g=[o.Promise.resolve(h)],_=h.files;if(f.checkCRC32)for(var C=0;C<_.length;C++)g.push(m(_[C]));return o.Promise.all(g)}).then(function(h){for(var g=h.shift(),_=g.files,C=0;C<_.length;C++){var P=_[C],I=P.fileNameStr,z=r.resolve(P.fileNameStr);x.file(z,P.decompressed,{binary:!0,optimizedBinaryString:!0,date:P.date,dir:P.dir,comment:P.fileCommentStr.length?P.fileCommentStr:null,unixPermissions:P.unixPermissions,dosPermissions:P.dosPermissions,createFolders:f.createFolders}),P.dir||(x.file(z).unsafeOriginalName=I)}return g.zipComment.length&&(x.comment=g.zipComment),x})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,s,i){var r=n("../utils"),o=n("../stream/GenericWorker");function a(c,d){o.call(this,"Nodejs stream input adapter for "+c),this._upstreamEnded=!1,this._bindStream(d)}r.inherits(a,o),a.prototype._bindStream=function(c){var d=this;(this._stream=c).pause(),c.on("data",function(y){d.push({data:y,meta:{percent:0}})}).on("error",function(y){d.isPaused?this.generatedError=y:d.error(y)}).on("end",function(){d.isPaused?d._upstreamEnded=!0:d.end()})},a.prototype.pause=function(){return!!o.prototype.pause.call(this)&&(this._stream.pause(),!0)},a.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},s.exports=a},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,s,i){var r=n("readable-stream").Readable;function o(a,c,d){r.call(this,c),this._helper=a;var y=this;a.on("data",function(m,p){y.push(m)||y._helper.pause(),d&&d(p)}).on("error",function(m){y.emit("error",m)}).on("end",function(){y.push(null)})}n("../utils").inherits(o,r),o.prototype._read=function(){this._helper.resume()},s.exports=o},{"../utils":32,"readable-stream":16}],14:[function(n,s,i){s.exports={isNode:typeof Buffer<"u",newBufferFrom:function(r,o){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(r,o);if(typeof r=="number")throw new Error('The "data" argument must not be a number');return new Buffer(r,o)},allocBuffer:function(r){if(Buffer.alloc)return Buffer.alloc(r);var o=new Buffer(r);return o.fill(0),o},isBuffer:function(r){return Buffer.isBuffer(r)},isStream:function(r){return r&&typeof r.on=="function"&&typeof r.pause=="function"&&typeof r.resume=="function"}}},{}],15:[function(n,s,i){function r(z,Z,j){var V,F=a.getTypeOf(Z),G=a.extend(j||{},y);G.date=G.date||new Date,G.compression!==null&&(G.compression=G.compression.toUpperCase()),typeof G.unixPermissions=="string"&&(G.unixPermissions=parseInt(G.unixPermissions,8)),G.unixPermissions&&16384&G.unixPermissions&&(G.dir=!0),G.dosPermissions&&16&G.dosPermissions&&(G.dir=!0),G.dir&&(z=_(z)),G.createFolders&&(V=g(z))&&C.call(this,V,!0);var st=F==="string"&&G.binary===!1&&G.base64===!1;j&&j.binary!==void 0||(G.binary=!st),(Z instanceof m&&Z.uncompressedSize===0||G.dir||!Z||Z.length===0)&&(G.base64=!1,G.binary=!0,Z="",G.compression="STORE",F="string");var S=null;S=Z instanceof m||Z instanceof c?Z:x.isNode&&x.isStream(Z)?new h(z,Z):a.prepareContent(z,Z,G.binary,G.optimizedBinaryString,G.base64);var H=new p(z,S,G);this.files[z]=H}var o=n("./utf8"),a=n("./utils"),c=n("./stream/GenericWorker"),d=n("./stream/StreamHelper"),y=n("./defaults"),m=n("./compressedObject"),p=n("./zipObject"),f=n("./generate"),x=n("./nodejsUtils"),h=n("./nodejs/NodejsStreamInputAdapter"),g=function(z){z.slice(-1)==="/"&&(z=z.substring(0,z.length-1));var Z=z.lastIndexOf("/");return 0<Z?z.substring(0,Z):""},_=function(z){return z.slice(-1)!=="/"&&(z+="/"),z},C=function(z,Z){return Z=Z!==void 0?Z:y.createFolders,z=_(z),this.files[z]||r.call(this,z,null,{dir:!0,createFolders:Z}),this.files[z]};function P(z){return Object.prototype.toString.call(z)==="[object RegExp]"}var I={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(z){var Z,j,V;for(Z in this.files)V=this.files[Z],(j=Z.slice(this.root.length,Z.length))&&Z.slice(0,this.root.length)===this.root&&z(j,V)},filter:function(z){var Z=[];return this.forEach(function(j,V){z(j,V)&&Z.push(V)}),Z},file:function(z,Z,j){if(arguments.length!==1)return z=this.root+z,r.call(this,z,Z,j),this;if(P(z)){var V=z;return this.filter(function(G,st){return!st.dir&&V.test(G)})}var F=this.files[this.root+z];return F&&!F.dir?F:null},folder:function(z){if(!z)return this;if(P(z))return this.filter(function(F,G){return G.dir&&z.test(F)});var Z=this.root+z,j=C.call(this,Z),V=this.clone();return V.root=j.name,V},remove:function(z){z=this.root+z;var Z=this.files[z];if(Z||(z.slice(-1)!=="/"&&(z+="/"),Z=this.files[z]),Z&&!Z.dir)delete this.files[z];else for(var j=this.filter(function(F,G){return G.name.slice(0,z.length)===z}),V=0;V<j.length;V++)delete this.files[j[V].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(z){var Z,j={};try{if((j=a.extend(z||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:o.utf8encode})).type=j.type.toLowerCase(),j.compression=j.compression.toUpperCase(),j.type==="binarystring"&&(j.type="string"),!j.type)throw new Error("No output type specified.");a.checkSupport(j.type),j.platform!=="darwin"&&j.platform!=="freebsd"&&j.platform!=="linux"&&j.platform!=="sunos"||(j.platform="UNIX"),j.platform==="win32"&&(j.platform="DOS");var V=j.comment||this.comment||"";Z=f.generateWorker(this,j,V)}catch(F){(Z=new c("error")).error(F)}return new d(Z,j.type||"string",j.mimeType)},generateAsync:function(z,Z){return this.generateInternalStream(z).accumulate(Z)},generateNodeStream:function(z,Z){return(z=z||{}).type||(z.type="nodebuffer"),this.generateInternalStream(z).toNodejsStream(Z)}};s.exports=I},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,s,i){s.exports=n("stream")},{stream:void 0}],17:[function(n,s,i){var r=n("./DataReader");function o(a){r.call(this,a);for(var c=0;c<this.data.length;c++)a[c]=255&a[c]}n("../utils").inherits(o,r),o.prototype.byteAt=function(a){return this.data[this.zero+a]},o.prototype.lastIndexOfSignature=function(a){for(var c=a.charCodeAt(0),d=a.charCodeAt(1),y=a.charCodeAt(2),m=a.charCodeAt(3),p=this.length-4;0<=p;--p)if(this.data[p]===c&&this.data[p+1]===d&&this.data[p+2]===y&&this.data[p+3]===m)return p-this.zero;return-1},o.prototype.readAndCheckSignature=function(a){var c=a.charCodeAt(0),d=a.charCodeAt(1),y=a.charCodeAt(2),m=a.charCodeAt(3),p=this.readData(4);return c===p[0]&&d===p[1]&&y===p[2]&&m===p[3]},o.prototype.readData=function(a){if(this.checkOffset(a),a===0)return[];var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},s.exports=o},{"../utils":32,"./DataReader":18}],18:[function(n,s,i){var r=n("../utils");function o(a){this.data=a,this.length=a.length,this.index=0,this.zero=0}o.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var c,d=0;for(this.checkOffset(a),c=this.index+a-1;c>=this.index;c--)d=(d<<8)+this.byteAt(c);return this.index+=a,d},readString:function(a){return r.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date(Date.UTC(1980+(a>>25&127),(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1))}},s.exports=o},{"../utils":32}],19:[function(n,s,i){var r=n("./Uint8ArrayReader");function o(a){r.call(this,a)}n("../utils").inherits(o,r),o.prototype.readData=function(a){this.checkOffset(a);var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},s.exports=o},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,s,i){var r=n("./DataReader");function o(a){r.call(this,a)}n("../utils").inherits(o,r),o.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},o.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},o.prototype.readAndCheckSignature=function(a){return a===this.readData(4)},o.prototype.readData=function(a){this.checkOffset(a);var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},s.exports=o},{"../utils":32,"./DataReader":18}],21:[function(n,s,i){var r=n("./ArrayReader");function o(a){r.call(this,a)}n("../utils").inherits(o,r),o.prototype.readData=function(a){if(this.checkOffset(a),a===0)return new Uint8Array(0);var c=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},s.exports=o},{"../utils":32,"./ArrayReader":17}],22:[function(n,s,i){var r=n("../utils"),o=n("../support"),a=n("./ArrayReader"),c=n("./StringReader"),d=n("./NodeBufferReader"),y=n("./Uint8ArrayReader");s.exports=function(m){var p=r.getTypeOf(m);return r.checkSupport(p),p!=="string"||o.uint8array?p==="nodebuffer"?new d(m):o.uint8array?new y(r.transformTo("uint8array",m)):new a(r.transformTo("array",m)):new c(m)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,s,i){i.LOCAL_FILE_HEADER="PK",i.CENTRAL_FILE_HEADER="PK",i.CENTRAL_DIRECTORY_END="PK",i.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",i.ZIP64_CENTRAL_DIRECTORY_END="PK",i.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(n,s,i){var r=n("./GenericWorker"),o=n("../utils");function a(c){r.call(this,"ConvertWorker to "+c),this.destType=c}o.inherits(a,r),a.prototype.processChunk=function(c){this.push({data:o.transformTo(this.destType,c.data),meta:c.meta})},s.exports=a},{"../utils":32,"./GenericWorker":28}],25:[function(n,s,i){var r=n("./GenericWorker"),o=n("../crc32");function a(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(a,r),a.prototype.processChunk=function(c){this.streamInfo.crc32=o(c.data,this.streamInfo.crc32||0),this.push(c)},s.exports=a},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,s,i){var r=n("../utils"),o=n("./GenericWorker");function a(c){o.call(this,"DataLengthProbe for "+c),this.propName=c,this.withStreamInfo(c,0)}r.inherits(a,o),a.prototype.processChunk=function(c){if(c){var d=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=d+c.data.length}o.prototype.processChunk.call(this,c)},s.exports=a},{"../utils":32,"./GenericWorker":28}],27:[function(n,s,i){var r=n("../utils"),o=n("./GenericWorker");function a(c){o.call(this,"DataWorker");var d=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,c.then(function(y){d.dataIsReady=!0,d.data=y,d.max=y&&y.length||0,d.type=r.getTypeOf(y),d.isPaused||d._tickAndRepeat()},function(y){d.error(y)})}r.inherits(a,o),a.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this.data=null},a.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},a.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},a.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var c=null,d=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":c=this.data.substring(this.index,d);break;case"uint8array":c=this.data.subarray(this.index,d);break;case"array":case"nodebuffer":c=this.data.slice(this.index,d)}return this.index=d,this.push({data:c,meta:{percent:this.max?this.index/this.max*100:0}})},s.exports=a},{"../utils":32,"./GenericWorker":28}],28:[function(n,s,i){function r(o){this.name=o||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(o){this.emit("data",o)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(o){this.emit("error",o)}return!0},error:function(o){return!this.isFinished&&(this.isPaused?this.generatedError=o:(this.isFinished=!0,this.emit("error",o),this.previous&&this.previous.error(o),this.cleanUp()),!0)},on:function(o,a){return this._listeners[o].push(a),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(o,a){if(this._listeners[o])for(var c=0;c<this._listeners[o].length;c++)this._listeners[o][c].call(this,a)},pipe:function(o){return o.registerPrevious(this)},registerPrevious:function(o){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=o.streamInfo,this.mergeStreamInfo(),this.previous=o;var a=this;return o.on("data",function(c){a.processChunk(c)}),o.on("end",function(){a.end()}),o.on("error",function(c){a.error(c)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var o=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),o=!0),this.previous&&this.previous.resume(),!o},flush:function(){},processChunk:function(o){this.push(o)},withStreamInfo:function(o,a){return this.extraStreamInfo[o]=a,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var o in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,o)&&(this.streamInfo[o]=this.extraStreamInfo[o])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var o="Worker "+this.name;return this.previous?this.previous+" -> "+o:o}},s.exports=r},{}],29:[function(n,s,i){var r=n("../utils"),o=n("./ConvertWorker"),a=n("./GenericWorker"),c=n("../base64"),d=n("../support"),y=n("../external"),m=null;if(d.nodestream)try{m=n("../nodejs/NodejsStreamOutputAdapter")}catch{}function p(x,h){return new y.Promise(function(g,_){var C=[],P=x._internalType,I=x._outputType,z=x._mimeType;x.on("data",function(Z,j){C.push(Z),h&&h(j)}).on("error",function(Z){C=[],_(Z)}).on("end",function(){try{var Z=function(j,V,F){switch(j){case"blob":return r.newBlob(r.transformTo("arraybuffer",V),F);case"base64":return c.encode(V);default:return r.transformTo(j,V)}}(I,function(j,V){var F,G=0,st=null,S=0;for(F=0;F<V.length;F++)S+=V[F].length;switch(j){case"string":return V.join("");case"array":return Array.prototype.concat.apply([],V);case"uint8array":for(st=new Uint8Array(S),F=0;F<V.length;F++)st.set(V[F],G),G+=V[F].length;return st;case"nodebuffer":return Buffer.concat(V);default:throw new Error("concat : unsupported type '"+j+"'")}}(P,C),z);g(Z)}catch(j){_(j)}C=[]}).resume()})}function f(x,h,g){var _=h;switch(h){case"blob":case"arraybuffer":_="uint8array";break;case"base64":_="string"}try{this._internalType=_,this._outputType=h,this._mimeType=g,r.checkSupport(_),this._worker=x.pipe(new o(_)),x.lock()}catch(C){this._worker=new a("error"),this._worker.error(C)}}f.prototype={accumulate:function(x){return p(this,x)},on:function(x,h){var g=this;return x==="data"?this._worker.on(x,function(_){h.call(g,_.data,_.meta)}):this._worker.on(x,function(){r.delay(h,arguments,g)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(x){if(r.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new m(this,{objectMode:this._outputType!=="nodebuffer"},x)}},s.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,s,i){if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",i.nodebuffer=typeof Buffer<"u",i.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")i.blob=!1;else{var r=new ArrayBuffer(0);try{i.blob=new Blob([r],{type:"application/zip"}).size===0}catch{try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(r),i.blob=o.getBlob("application/zip").size===0}catch{i.blob=!1}}}try{i.nodestream=!!n("readable-stream").Readable}catch{i.nodestream=!1}},{"readable-stream":16}],31:[function(n,s,i){for(var r=n("./utils"),o=n("./support"),a=n("./nodejsUtils"),c=n("./stream/GenericWorker"),d=new Array(256),y=0;y<256;y++)d[y]=252<=y?6:248<=y?5:240<=y?4:224<=y?3:192<=y?2:1;d[254]=d[254]=1;function m(){c.call(this,"utf-8 decode"),this.leftOver=null}function p(){c.call(this,"utf-8 encode")}i.utf8encode=function(f){return o.nodebuffer?a.newBufferFrom(f,"utf-8"):function(x){var h,g,_,C,P,I=x.length,z=0;for(C=0;C<I;C++)(64512&(g=x.charCodeAt(C)))==55296&&C+1<I&&(64512&(_=x.charCodeAt(C+1)))==56320&&(g=65536+(g-55296<<10)+(_-56320),C++),z+=g<128?1:g<2048?2:g<65536?3:4;for(h=o.uint8array?new Uint8Array(z):new Array(z),C=P=0;P<z;C++)(64512&(g=x.charCodeAt(C)))==55296&&C+1<I&&(64512&(_=x.charCodeAt(C+1)))==56320&&(g=65536+(g-55296<<10)+(_-56320),C++),g<128?h[P++]=g:(g<2048?h[P++]=192|g>>>6:(g<65536?h[P++]=224|g>>>12:(h[P++]=240|g>>>18,h[P++]=128|g>>>12&63),h[P++]=128|g>>>6&63),h[P++]=128|63&g);return h}(f)},i.utf8decode=function(f){return o.nodebuffer?r.transformTo("nodebuffer",f).toString("utf-8"):function(x){var h,g,_,C,P=x.length,I=new Array(2*P);for(h=g=0;h<P;)if((_=x[h++])<128)I[g++]=_;else if(4<(C=d[_]))I[g++]=65533,h+=C-1;else{for(_&=C===2?31:C===3?15:7;1<C&&h<P;)_=_<<6|63&x[h++],C--;1<C?I[g++]=65533:_<65536?I[g++]=_:(_-=65536,I[g++]=55296|_>>10&1023,I[g++]=56320|1023&_)}return I.length!==g&&(I.subarray?I=I.subarray(0,g):I.length=g),r.applyFromCharCode(I)}(f=r.transformTo(o.uint8array?"uint8array":"array",f))},r.inherits(m,c),m.prototype.processChunk=function(f){var x=r.transformTo(o.uint8array?"uint8array":"array",f.data);if(this.leftOver&&this.leftOver.length){if(o.uint8array){var h=x;(x=new Uint8Array(h.length+this.leftOver.length)).set(this.leftOver,0),x.set(h,this.leftOver.length)}else x=this.leftOver.concat(x);this.leftOver=null}var g=function(C,P){var I;for((P=P||C.length)>C.length&&(P=C.length),I=P-1;0<=I&&(192&C[I])==128;)I--;return I<0||I===0?P:I+d[C[I]]>P?I:P}(x),_=x;g!==x.length&&(o.uint8array?(_=x.subarray(0,g),this.leftOver=x.subarray(g,x.length)):(_=x.slice(0,g),this.leftOver=x.slice(g,x.length))),this.push({data:i.utf8decode(_),meta:f.meta})},m.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:i.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},i.Utf8DecodeWorker=m,r.inherits(p,c),p.prototype.processChunk=function(f){this.push({data:i.utf8encode(f.data),meta:f.meta})},i.Utf8EncodeWorker=p},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,s,i){var r=n("./support"),o=n("./base64"),a=n("./nodejsUtils"),c=n("./external");function d(h){return h}function y(h,g){for(var _=0;_<h.length;++_)g[_]=255&h.charCodeAt(_);return g}n("setimmediate"),i.newBlob=function(h,g){i.checkSupport("blob");try{return new Blob([h],{type:g})}catch{try{var _=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return _.append(h),_.getBlob(g)}catch{throw new Error("Bug : can't construct the Blob.")}}};var m={stringifyByChunk:function(h,g,_){var C=[],P=0,I=h.length;if(I<=_)return String.fromCharCode.apply(null,h);for(;P<I;)g==="array"||g==="nodebuffer"?C.push(String.fromCharCode.apply(null,h.slice(P,Math.min(P+_,I)))):C.push(String.fromCharCode.apply(null,h.subarray(P,Math.min(P+_,I)))),P+=_;return C.join("")},stringifyByChar:function(h){for(var g="",_=0;_<h.length;_++)g+=String.fromCharCode(h[_]);return g},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&String.fromCharCode.apply(null,a.allocBuffer(1)).length===1}catch{return!1}}()}};function p(h){var g=65536,_=i.getTypeOf(h),C=!0;if(_==="uint8array"?C=m.applyCanBeUsed.uint8array:_==="nodebuffer"&&(C=m.applyCanBeUsed.nodebuffer),C)for(;1<g;)try{return m.stringifyByChunk(h,_,g)}catch{g=Math.floor(g/2)}return m.stringifyByChar(h)}function f(h,g){for(var _=0;_<h.length;_++)g[_]=h[_];return g}i.applyFromCharCode=p;var x={};x.string={string:d,array:function(h){return y(h,new Array(h.length))},arraybuffer:function(h){return x.string.uint8array(h).buffer},uint8array:function(h){return y(h,new Uint8Array(h.length))},nodebuffer:function(h){return y(h,a.allocBuffer(h.length))}},x.array={string:p,array:d,arraybuffer:function(h){return new Uint8Array(h).buffer},uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(h)}},x.arraybuffer={string:function(h){return p(new Uint8Array(h))},array:function(h){return f(new Uint8Array(h),new Array(h.byteLength))},arraybuffer:d,uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(new Uint8Array(h))}},x.uint8array={string:p,array:function(h){return f(h,new Array(h.length))},arraybuffer:function(h){return h.buffer},uint8array:d,nodebuffer:function(h){return a.newBufferFrom(h)}},x.nodebuffer={string:p,array:function(h){return f(h,new Array(h.length))},arraybuffer:function(h){return x.nodebuffer.uint8array(h).buffer},uint8array:function(h){return f(h,new Uint8Array(h.length))},nodebuffer:d},i.transformTo=function(h,g){if(g=g||"",!h)return g;i.checkSupport(h);var _=i.getTypeOf(g);return x[_][h](g)},i.resolve=function(h){for(var g=h.split("/"),_=[],C=0;C<g.length;C++){var P=g[C];P==="."||P===""&&C!==0&&C!==g.length-1||(P===".."?_.pop():_.push(P))}return _.join("/")},i.getTypeOf=function(h){return typeof h=="string"?"string":Object.prototype.toString.call(h)==="[object Array]"?"array":r.nodebuffer&&a.isBuffer(h)?"nodebuffer":r.uint8array&&h instanceof Uint8Array?"uint8array":r.arraybuffer&&h instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(h){if(!r[h.toLowerCase()])throw new Error(h+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(h){var g,_,C="";for(_=0;_<(h||"").length;_++)C+="\\x"+((g=h.charCodeAt(_))<16?"0":"")+g.toString(16).toUpperCase();return C},i.delay=function(h,g,_){setImmediate(function(){h.apply(_||null,g||[])})},i.inherits=function(h,g){function _(){}_.prototype=g.prototype,h.prototype=new _},i.extend=function(){var h,g,_={};for(h=0;h<arguments.length;h++)for(g in arguments[h])Object.prototype.hasOwnProperty.call(arguments[h],g)&&_[g]===void 0&&(_[g]=arguments[h][g]);return _},i.prepareContent=function(h,g,_,C,P){return c.Promise.resolve(g).then(function(I){return r.blob&&(I instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(I))!==-1)&&typeof FileReader<"u"?new c.Promise(function(z,Z){var j=new FileReader;j.onload=function(V){z(V.target.result)},j.onerror=function(V){Z(V.target.error)},j.readAsArrayBuffer(I)}):I}).then(function(I){var z=i.getTypeOf(I);return z?(z==="arraybuffer"?I=i.transformTo("uint8array",I):z==="string"&&(P?I=o.decode(I):_&&C!==!0&&(I=function(Z){return y(Z,r.uint8array?new Uint8Array(Z.length):new Array(Z.length))}(I))),I):c.Promise.reject(new Error("Can't read the data of '"+h+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,s,i){var r=n("./reader/readerFor"),o=n("./utils"),a=n("./signature"),c=n("./zipEntry"),d=n("./support");function y(m){this.files=[],this.loadOptions=m}y.prototype={checkSignature:function(m){if(!this.reader.readAndCheckSignature(m)){this.reader.index-=4;var p=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+o.pretty(p)+", expected "+o.pretty(m)+")")}},isSignature:function(m,p){var f=this.reader.index;this.reader.setIndex(m);var x=this.reader.readString(4)===p;return this.reader.setIndex(f),x},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var m=this.reader.readData(this.zipCommentLength),p=d.uint8array?"uint8array":"array",f=o.transformTo(p,m);this.zipComment=this.loadOptions.decodeFileName(f)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var m,p,f,x=this.zip64EndOfCentralSize-44;0<x;)m=this.reader.readInt(2),p=this.reader.readInt(4),f=this.reader.readData(p),this.zip64ExtensibleData[m]={id:m,length:p,value:f}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var m,p;for(m=0;m<this.files.length;m++)p=this.files[m],this.reader.setIndex(p.localHeaderOffset),this.checkSignature(a.LOCAL_FILE_HEADER),p.readLocalPart(this.reader),p.handleUTF8(),p.processAttributes()},readCentralDir:function(){var m;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(a.CENTRAL_FILE_HEADER);)(m=new c({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(m);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var m=this.reader.lastIndexOfSignature(a.CENTRAL_DIRECTORY_END);if(m<0)throw this.isSignature(0,a.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(m);var p=m;if(this.checkSignature(a.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===o.MAX_VALUE_16BITS||this.diskWithCentralDirStart===o.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===o.MAX_VALUE_16BITS||this.centralDirRecords===o.MAX_VALUE_16BITS||this.centralDirSize===o.MAX_VALUE_32BITS||this.centralDirOffset===o.MAX_VALUE_32BITS){if(this.zip64=!0,(m=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(m),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,a.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var f=this.centralDirOffset+this.centralDirSize;this.zip64&&(f+=20,f+=12+this.zip64EndOfCentralSize);var x=p-f;if(0<x)this.isSignature(p,a.CENTRAL_FILE_HEADER)||(this.reader.zero=x);else if(x<0)throw new Error("Corrupted zip: missing "+Math.abs(x)+" bytes.")},prepareReader:function(m){this.reader=r(m)},load:function(m){this.prepareReader(m),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},s.exports=y},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(n,s,i){var r=n("./reader/readerFor"),o=n("./utils"),a=n("./compressedObject"),c=n("./crc32"),d=n("./utf8"),y=n("./compressions"),m=n("./support");function p(f,x){this.options=f,this.loadOptions=x}p.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(f){var x,h;if(f.skip(22),this.fileNameLength=f.readInt(2),h=f.readInt(2),this.fileName=f.readData(this.fileNameLength),f.skip(h),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((x=function(g){for(var _ in y)if(Object.prototype.hasOwnProperty.call(y,_)&&y[_].magic===g)return y[_];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+o.pretty(this.compressionMethod)+" unknown (inner file : "+o.transformTo("string",this.fileName)+")");this.decompressed=new a(this.compressedSize,this.uncompressedSize,this.crc32,x,f.readData(this.compressedSize))},readCentralPart:function(f){this.versionMadeBy=f.readInt(2),f.skip(2),this.bitFlag=f.readInt(2),this.compressionMethod=f.readString(2),this.date=f.readDate(),this.crc32=f.readInt(4),this.compressedSize=f.readInt(4),this.uncompressedSize=f.readInt(4);var x=f.readInt(2);if(this.extraFieldsLength=f.readInt(2),this.fileCommentLength=f.readInt(2),this.diskNumberStart=f.readInt(2),this.internalFileAttributes=f.readInt(2),this.externalFileAttributes=f.readInt(4),this.localHeaderOffset=f.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");f.skip(x),this.readExtraFields(f),this.parseZIP64ExtraField(f),this.fileComment=f.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var f=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),f==0&&(this.dosPermissions=63&this.externalFileAttributes),f==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var f=r(this.extraFields[1].value);this.uncompressedSize===o.MAX_VALUE_32BITS&&(this.uncompressedSize=f.readInt(8)),this.compressedSize===o.MAX_VALUE_32BITS&&(this.compressedSize=f.readInt(8)),this.localHeaderOffset===o.MAX_VALUE_32BITS&&(this.localHeaderOffset=f.readInt(8)),this.diskNumberStart===o.MAX_VALUE_32BITS&&(this.diskNumberStart=f.readInt(4))}},readExtraFields:function(f){var x,h,g,_=f.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});f.index+4<_;)x=f.readInt(2),h=f.readInt(2),g=f.readData(h),this.extraFields[x]={id:x,length:h,value:g};f.setIndex(_)},handleUTF8:function(){var f=m.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=d.utf8decode(this.fileName),this.fileCommentStr=d.utf8decode(this.fileComment);else{var x=this.findExtraFieldUnicodePath();if(x!==null)this.fileNameStr=x;else{var h=o.transformTo(f,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(h)}var g=this.findExtraFieldUnicodeComment();if(g!==null)this.fileCommentStr=g;else{var _=o.transformTo(f,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(_)}}},findExtraFieldUnicodePath:function(){var f=this.extraFields[28789];if(f){var x=r(f.value);return x.readInt(1)!==1||c(this.fileName)!==x.readInt(4)?null:d.utf8decode(x.readData(f.length-5))}return null},findExtraFieldUnicodeComment:function(){var f=this.extraFields[25461];if(f){var x=r(f.value);return x.readInt(1)!==1||c(this.fileComment)!==x.readInt(4)?null:d.utf8decode(x.readData(f.length-5))}return null}},s.exports=p},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,s,i){function r(x,h,g){this.name=x,this.dir=g.dir,this.date=g.date,this.comment=g.comment,this.unixPermissions=g.unixPermissions,this.dosPermissions=g.dosPermissions,this._data=h,this._dataBinary=g.binary,this.options={compression:g.compression,compressionOptions:g.compressionOptions}}var o=n("./stream/StreamHelper"),a=n("./stream/DataWorker"),c=n("./utf8"),d=n("./compressedObject"),y=n("./stream/GenericWorker");r.prototype={internalStream:function(x){var h=null,g="string";try{if(!x)throw new Error("No output type specified.");var _=(g=x.toLowerCase())==="string"||g==="text";g!=="binarystring"&&g!=="text"||(g="string"),h=this._decompressWorker();var C=!this._dataBinary;C&&!_&&(h=h.pipe(new c.Utf8EncodeWorker)),!C&&_&&(h=h.pipe(new c.Utf8DecodeWorker))}catch(P){(h=new y("error")).error(P)}return new o(h,g,"")},async:function(x,h){return this.internalStream(x).accumulate(h)},nodeStream:function(x,h){return this.internalStream(x||"nodebuffer").toNodejsStream(h)},_compressWorker:function(x,h){if(this._data instanceof d&&this._data.compression.magic===x.magic)return this._data.getCompressedWorker();var g=this._decompressWorker();return this._dataBinary||(g=g.pipe(new c.Utf8EncodeWorker)),d.createWorkerFrom(g,x,h)},_decompressWorker:function(){return this._data instanceof d?this._data.getContentWorker():this._data instanceof y?this._data:new a(this._data)}};for(var m=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],p=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<m.length;f++)r.prototype[m[f]]=p;s.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,s,i){(function(r){var o,a,c=r.MutationObserver||r.WebKitMutationObserver;if(c){var d=0,y=new c(x),m=r.document.createTextNode("");y.observe(m,{characterData:!0}),o=function(){m.data=d=++d%2}}else if(r.setImmediate||r.MessageChannel===void 0)o="document"in r&&"onreadystatechange"in r.document.createElement("script")?function(){var h=r.document.createElement("script");h.onreadystatechange=function(){x(),h.onreadystatechange=null,h.parentNode.removeChild(h),h=null},r.document.documentElement.appendChild(h)}:function(){setTimeout(x,0)};else{var p=new r.MessageChannel;p.port1.onmessage=x,o=function(){p.port2.postMessage(0)}}var f=[];function x(){var h,g;a=!0;for(var _=f.length;_;){for(g=f,f=[],h=-1;++h<_;)g[h]();_=f.length}a=!1}s.exports=function(h){f.push(h)!==1||a||o()}}).call(this,typeof dn<"u"?dn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(n,s,i){var r=n("immediate");function o(){}var a={},c=["REJECTED"],d=["FULFILLED"],y=["PENDING"];function m(_){if(typeof _!="function")throw new TypeError("resolver must be a function");this.state=y,this.queue=[],this.outcome=void 0,_!==o&&h(this,_)}function p(_,C,P){this.promise=_,typeof C=="function"&&(this.onFulfilled=C,this.callFulfilled=this.otherCallFulfilled),typeof P=="function"&&(this.onRejected=P,this.callRejected=this.otherCallRejected)}function f(_,C,P){r(function(){var I;try{I=C(P)}catch(z){return a.reject(_,z)}I===_?a.reject(_,new TypeError("Cannot resolve promise with itself")):a.resolve(_,I)})}function x(_){var C=_&&_.then;if(_&&(typeof _=="object"||typeof _=="function")&&typeof C=="function")return function(){C.apply(_,arguments)}}function h(_,C){var P=!1;function I(j){P||(P=!0,a.reject(_,j))}function z(j){P||(P=!0,a.resolve(_,j))}var Z=g(function(){C(z,I)});Z.status==="error"&&I(Z.value)}function g(_,C){var P={};try{P.value=_(C),P.status="success"}catch(I){P.status="error",P.value=I}return P}(s.exports=m).prototype.finally=function(_){if(typeof _!="function")return this;var C=this.constructor;return this.then(function(P){return C.resolve(_()).then(function(){return P})},function(P){return C.resolve(_()).then(function(){throw P})})},m.prototype.catch=function(_){return this.then(null,_)},m.prototype.then=function(_,C){if(typeof _!="function"&&this.state===d||typeof C!="function"&&this.state===c)return this;var P=new this.constructor(o);return this.state!==y?f(P,this.state===d?_:C,this.outcome):this.queue.push(new p(P,_,C)),P},p.prototype.callFulfilled=function(_){a.resolve(this.promise,_)},p.prototype.otherCallFulfilled=function(_){f(this.promise,this.onFulfilled,_)},p.prototype.callRejected=function(_){a.reject(this.promise,_)},p.prototype.otherCallRejected=function(_){f(this.promise,this.onRejected,_)},a.resolve=function(_,C){var P=g(x,C);if(P.status==="error")return a.reject(_,P.value);var I=P.value;if(I)h(_,I);else{_.state=d,_.outcome=C;for(var z=-1,Z=_.queue.length;++z<Z;)_.queue[z].callFulfilled(C)}return _},a.reject=function(_,C){_.state=c,_.outcome=C;for(var P=-1,I=_.queue.length;++P<I;)_.queue[P].callRejected(C);return _},m.resolve=function(_){return _ instanceof this?_:a.resolve(new this(o),_)},m.reject=function(_){var C=new this(o);return a.reject(C,_)},m.all=function(_){var C=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var P=_.length,I=!1;if(!P)return this.resolve([]);for(var z=new Array(P),Z=0,j=-1,V=new this(o);++j<P;)F(_[j],j);return V;function F(G,st){C.resolve(G).then(function(S){z[st]=S,++Z!==P||I||(I=!0,a.resolve(V,z))},function(S){I||(I=!0,a.reject(V,S))})}},m.race=function(_){var C=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var P=_.length,I=!1;if(!P)return this.resolve([]);for(var z=-1,Z=new this(o);++z<P;)j=_[z],C.resolve(j).then(function(V){I||(I=!0,a.resolve(Z,V))},function(V){I||(I=!0,a.reject(Z,V))});var j;return Z}},{immediate:36}],38:[function(n,s,i){var r={};(0,n("./lib/utils/common").assign)(r,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),s.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,s,i){var r=n("./zlib/deflate"),o=n("./utils/common"),a=n("./utils/strings"),c=n("./zlib/messages"),d=n("./zlib/zstream"),y=Object.prototype.toString,m=0,p=-1,f=0,x=8;function h(_){if(!(this instanceof h))return new h(_);this.options=o.assign({level:p,method:x,chunkSize:16384,windowBits:15,memLevel:8,strategy:f,to:""},_||{});var C=this.options;C.raw&&0<C.windowBits?C.windowBits=-C.windowBits:C.gzip&&0<C.windowBits&&C.windowBits<16&&(C.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new d,this.strm.avail_out=0;var P=r.deflateInit2(this.strm,C.level,C.method,C.windowBits,C.memLevel,C.strategy);if(P!==m)throw new Error(c[P]);if(C.header&&r.deflateSetHeader(this.strm,C.header),C.dictionary){var I;if(I=typeof C.dictionary=="string"?a.string2buf(C.dictionary):y.call(C.dictionary)==="[object ArrayBuffer]"?new Uint8Array(C.dictionary):C.dictionary,(P=r.deflateSetDictionary(this.strm,I))!==m)throw new Error(c[P]);this._dict_set=!0}}function g(_,C){var P=new h(C);if(P.push(_,!0),P.err)throw P.msg||c[P.err];return P.result}h.prototype.push=function(_,C){var P,I,z=this.strm,Z=this.options.chunkSize;if(this.ended)return!1;I=C===~~C?C:C===!0?4:0,typeof _=="string"?z.input=a.string2buf(_):y.call(_)==="[object ArrayBuffer]"?z.input=new Uint8Array(_):z.input=_,z.next_in=0,z.avail_in=z.input.length;do{if(z.avail_out===0&&(z.output=new o.Buf8(Z),z.next_out=0,z.avail_out=Z),(P=r.deflate(z,I))!==1&&P!==m)return this.onEnd(P),!(this.ended=!0);z.avail_out!==0&&(z.avail_in!==0||I!==4&&I!==2)||(this.options.to==="string"?this.onData(a.buf2binstring(o.shrinkBuf(z.output,z.next_out))):this.onData(o.shrinkBuf(z.output,z.next_out)))}while((0<z.avail_in||z.avail_out===0)&&P!==1);return I===4?(P=r.deflateEnd(this.strm),this.onEnd(P),this.ended=!0,P===m):I!==2||(this.onEnd(m),!(z.avail_out=0))},h.prototype.onData=function(_){this.chunks.push(_)},h.prototype.onEnd=function(_){_===m&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=_,this.msg=this.strm.msg},i.Deflate=h,i.deflate=g,i.deflateRaw=function(_,C){return(C=C||{}).raw=!0,g(_,C)},i.gzip=function(_,C){return(C=C||{}).gzip=!0,g(_,C)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,s,i){var r=n("./zlib/inflate"),o=n("./utils/common"),a=n("./utils/strings"),c=n("./zlib/constants"),d=n("./zlib/messages"),y=n("./zlib/zstream"),m=n("./zlib/gzheader"),p=Object.prototype.toString;function f(h){if(!(this instanceof f))return new f(h);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},h||{});var g=this.options;g.raw&&0<=g.windowBits&&g.windowBits<16&&(g.windowBits=-g.windowBits,g.windowBits===0&&(g.windowBits=-15)),!(0<=g.windowBits&&g.windowBits<16)||h&&h.windowBits||(g.windowBits+=32),15<g.windowBits&&g.windowBits<48&&!(15&g.windowBits)&&(g.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new y,this.strm.avail_out=0;var _=r.inflateInit2(this.strm,g.windowBits);if(_!==c.Z_OK)throw new Error(d[_]);this.header=new m,r.inflateGetHeader(this.strm,this.header)}function x(h,g){var _=new f(g);if(_.push(h,!0),_.err)throw _.msg||d[_.err];return _.result}f.prototype.push=function(h,g){var _,C,P,I,z,Z,j=this.strm,V=this.options.chunkSize,F=this.options.dictionary,G=!1;if(this.ended)return!1;C=g===~~g?g:g===!0?c.Z_FINISH:c.Z_NO_FLUSH,typeof h=="string"?j.input=a.binstring2buf(h):p.call(h)==="[object ArrayBuffer]"?j.input=new Uint8Array(h):j.input=h,j.next_in=0,j.avail_in=j.input.length;do{if(j.avail_out===0&&(j.output=new o.Buf8(V),j.next_out=0,j.avail_out=V),(_=r.inflate(j,c.Z_NO_FLUSH))===c.Z_NEED_DICT&&F&&(Z=typeof F=="string"?a.string2buf(F):p.call(F)==="[object ArrayBuffer]"?new Uint8Array(F):F,_=r.inflateSetDictionary(this.strm,Z)),_===c.Z_BUF_ERROR&&G===!0&&(_=c.Z_OK,G=!1),_!==c.Z_STREAM_END&&_!==c.Z_OK)return this.onEnd(_),!(this.ended=!0);j.next_out&&(j.avail_out!==0&&_!==c.Z_STREAM_END&&(j.avail_in!==0||C!==c.Z_FINISH&&C!==c.Z_SYNC_FLUSH)||(this.options.to==="string"?(P=a.utf8border(j.output,j.next_out),I=j.next_out-P,z=a.buf2string(j.output,P),j.next_out=I,j.avail_out=V-I,I&&o.arraySet(j.output,j.output,P,I,0),this.onData(z)):this.onData(o.shrinkBuf(j.output,j.next_out)))),j.avail_in===0&&j.avail_out===0&&(G=!0)}while((0<j.avail_in||j.avail_out===0)&&_!==c.Z_STREAM_END);return _===c.Z_STREAM_END&&(C=c.Z_FINISH),C===c.Z_FINISH?(_=r.inflateEnd(this.strm),this.onEnd(_),this.ended=!0,_===c.Z_OK):C!==c.Z_SYNC_FLUSH||(this.onEnd(c.Z_OK),!(j.avail_out=0))},f.prototype.onData=function(h){this.chunks.push(h)},f.prototype.onEnd=function(h){h===c.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=h,this.msg=this.strm.msg},i.Inflate=f,i.inflate=x,i.inflateRaw=function(h,g){return(g=g||{}).raw=!0,x(h,g)},i.ungzip=x},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";i.assign=function(c){for(var d=Array.prototype.slice.call(arguments,1);d.length;){var y=d.shift();if(y){if(typeof y!="object")throw new TypeError(y+"must be non-object");for(var m in y)y.hasOwnProperty(m)&&(c[m]=y[m])}}return c},i.shrinkBuf=function(c,d){return c.length===d?c:c.subarray?c.subarray(0,d):(c.length=d,c)};var o={arraySet:function(c,d,y,m,p){if(d.subarray&&c.subarray)c.set(d.subarray(y,y+m),p);else for(var f=0;f<m;f++)c[p+f]=d[y+f]},flattenChunks:function(c){var d,y,m,p,f,x;for(d=m=0,y=c.length;d<y;d++)m+=c[d].length;for(x=new Uint8Array(m),d=p=0,y=c.length;d<y;d++)f=c[d],x.set(f,p),p+=f.length;return x}},a={arraySet:function(c,d,y,m,p){for(var f=0;f<m;f++)c[p+f]=d[y+f]},flattenChunks:function(c){return[].concat.apply([],c)}};i.setTyped=function(c){c?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,o)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,a))},i.setTyped(r)},{}],42:[function(n,s,i){var r=n("./common"),o=!0,a=!0;try{String.fromCharCode.apply(null,[0])}catch{o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{a=!1}for(var c=new r.Buf8(256),d=0;d<256;d++)c[d]=252<=d?6:248<=d?5:240<=d?4:224<=d?3:192<=d?2:1;function y(m,p){if(p<65537&&(m.subarray&&a||!m.subarray&&o))return String.fromCharCode.apply(null,r.shrinkBuf(m,p));for(var f="",x=0;x<p;x++)f+=String.fromCharCode(m[x]);return f}c[254]=c[254]=1,i.string2buf=function(m){var p,f,x,h,g,_=m.length,C=0;for(h=0;h<_;h++)(64512&(f=m.charCodeAt(h)))==55296&&h+1<_&&(64512&(x=m.charCodeAt(h+1)))==56320&&(f=65536+(f-55296<<10)+(x-56320),h++),C+=f<128?1:f<2048?2:f<65536?3:4;for(p=new r.Buf8(C),h=g=0;g<C;h++)(64512&(f=m.charCodeAt(h)))==55296&&h+1<_&&(64512&(x=m.charCodeAt(h+1)))==56320&&(f=65536+(f-55296<<10)+(x-56320),h++),f<128?p[g++]=f:(f<2048?p[g++]=192|f>>>6:(f<65536?p[g++]=224|f>>>12:(p[g++]=240|f>>>18,p[g++]=128|f>>>12&63),p[g++]=128|f>>>6&63),p[g++]=128|63&f);return p},i.buf2binstring=function(m){return y(m,m.length)},i.binstring2buf=function(m){for(var p=new r.Buf8(m.length),f=0,x=p.length;f<x;f++)p[f]=m.charCodeAt(f);return p},i.buf2string=function(m,p){var f,x,h,g,_=p||m.length,C=new Array(2*_);for(f=x=0;f<_;)if((h=m[f++])<128)C[x++]=h;else if(4<(g=c[h]))C[x++]=65533,f+=g-1;else{for(h&=g===2?31:g===3?15:7;1<g&&f<_;)h=h<<6|63&m[f++],g--;1<g?C[x++]=65533:h<65536?C[x++]=h:(h-=65536,C[x++]=55296|h>>10&1023,C[x++]=56320|1023&h)}return y(C,x)},i.utf8border=function(m,p){var f;for((p=p||m.length)>m.length&&(p=m.length),f=p-1;0<=f&&(192&m[f])==128;)f--;return f<0||f===0?p:f+c[m[f]]>p?f:p}},{"./common":41}],43:[function(n,s,i){s.exports=function(r,o,a,c){for(var d=65535&r|0,y=r>>>16&65535|0,m=0;a!==0;){for(a-=m=2e3<a?2e3:a;y=y+(d=d+o[c++]|0)|0,--m;);d%=65521,y%=65521}return d|y<<16|0}},{}],44:[function(n,s,i){s.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,s,i){var r=function(){for(var o,a=[],c=0;c<256;c++){o=c;for(var d=0;d<8;d++)o=1&o?3988292384^o>>>1:o>>>1;a[c]=o}return a}();s.exports=function(o,a,c,d){var y=r,m=d+c;o^=-1;for(var p=d;p<m;p++)o=o>>>8^y[255&(o^a[p])];return-1^o}},{}],46:[function(n,s,i){var r,o=n("../utils/common"),a=n("./trees"),c=n("./adler32"),d=n("./crc32"),y=n("./messages"),m=0,p=4,f=0,x=-2,h=-1,g=4,_=2,C=8,P=9,I=286,z=30,Z=19,j=2*I+1,V=15,F=3,G=258,st=G+F+1,S=42,H=113,u=1,q=2,at=3,N=4;function ot(l,A){return l.msg=y[A],A}function Q(l){return(l<<1)-(4<l?9:0)}function rt(l){for(var A=l.length;0<=--A;)l[A]=0}function R(l){var A=l.state,E=A.pending;E>l.avail_out&&(E=l.avail_out),E!==0&&(o.arraySet(l.output,A.pending_buf,A.pending_out,E,l.next_out),l.next_out+=E,A.pending_out+=E,l.total_out+=E,l.avail_out-=E,A.pending-=E,A.pending===0&&(A.pending_out=0))}function L(l,A){a._tr_flush_block(l,0<=l.block_start?l.block_start:-1,l.strstart-l.block_start,A),l.block_start=l.strstart,R(l.strm)}function ut(l,A){l.pending_buf[l.pending++]=A}function it(l,A){l.pending_buf[l.pending++]=A>>>8&255,l.pending_buf[l.pending++]=255&A}function tt(l,A){var E,w,v=l.max_chain_length,T=l.strstart,$=l.prev_length,B=l.nice_match,O=l.strstart>l.w_size-st?l.strstart-(l.w_size-st):0,M=l.window,J=l.w_mask,W=l.prev,U=l.strstart+G,K=M[T+$-1],X=M[T+$];l.prev_length>=l.good_match&&(v>>=2),B>l.lookahead&&(B=l.lookahead);do if(M[(E=A)+$]===X&&M[E+$-1]===K&&M[E]===M[T]&&M[++E]===M[T+1]){T+=2,E++;do;while(M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&M[++T]===M[++E]&&T<U);if(w=G-(U-T),T=U-G,$<w){if(l.match_start=A,B<=($=w))break;K=M[T+$-1],X=M[T+$]}}while((A=W[A&J])>O&&--v!=0);return $<=l.lookahead?$:l.lookahead}function _t(l){var A,E,w,v,T,$,B,O,M,J,W=l.w_size;do{if(v=l.window_size-l.lookahead-l.strstart,l.strstart>=W+(W-st)){for(o.arraySet(l.window,l.window,W,W,0),l.match_start-=W,l.strstart-=W,l.block_start-=W,A=E=l.hash_size;w=l.head[--A],l.head[A]=W<=w?w-W:0,--E;);for(A=E=W;w=l.prev[--A],l.prev[A]=W<=w?w-W:0,--E;);v+=W}if(l.strm.avail_in===0)break;if($=l.strm,B=l.window,O=l.strstart+l.lookahead,M=v,J=void 0,J=$.avail_in,M<J&&(J=M),E=J===0?0:($.avail_in-=J,o.arraySet(B,$.input,$.next_in,J,O),$.state.wrap===1?$.adler=c($.adler,B,J,O):$.state.wrap===2&&($.adler=d($.adler,B,J,O)),$.next_in+=J,$.total_in+=J,J),l.lookahead+=E,l.lookahead+l.insert>=F)for(T=l.strstart-l.insert,l.ins_h=l.window[T],l.ins_h=(l.ins_h<<l.hash_shift^l.window[T+1])&l.hash_mask;l.insert&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[T+F-1])&l.hash_mask,l.prev[T&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=T,T++,l.insert--,!(l.lookahead+l.insert<F)););}while(l.lookahead<st&&l.strm.avail_in!==0)}function Ct(l,A){for(var E,w;;){if(l.lookahead<st){if(_t(l),l.lookahead<st&&A===m)return u;if(l.lookahead===0)break}if(E=0,l.lookahead>=F&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),E!==0&&l.strstart-E<=l.w_size-st&&(l.match_length=tt(l,E)),l.match_length>=F)if(w=a._tr_tally(l,l.strstart-l.match_start,l.match_length-F),l.lookahead-=l.match_length,l.match_length<=l.max_lazy_match&&l.lookahead>=F){for(l.match_length--;l.strstart++,l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart,--l.match_length!=0;);l.strstart++}else l.strstart+=l.match_length,l.match_length=0,l.ins_h=l.window[l.strstart],l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+1])&l.hash_mask;else w=a._tr_tally(l,0,l.window[l.strstart]),l.lookahead--,l.strstart++;if(w&&(L(l,!1),l.strm.avail_out===0))return u}return l.insert=l.strstart<F-1?l.strstart:F-1,A===p?(L(l,!0),l.strm.avail_out===0?at:N):l.last_lit&&(L(l,!1),l.strm.avail_out===0)?u:q}function pt(l,A){for(var E,w,v;;){if(l.lookahead<st){if(_t(l),l.lookahead<st&&A===m)return u;if(l.lookahead===0)break}if(E=0,l.lookahead>=F&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),l.prev_length=l.match_length,l.prev_match=l.match_start,l.match_length=F-1,E!==0&&l.prev_length<l.max_lazy_match&&l.strstart-E<=l.w_size-st&&(l.match_length=tt(l,E),l.match_length<=5&&(l.strategy===1||l.match_length===F&&4096<l.strstart-l.match_start)&&(l.match_length=F-1)),l.prev_length>=F&&l.match_length<=l.prev_length){for(v=l.strstart+l.lookahead-F,w=a._tr_tally(l,l.strstart-1-l.prev_match,l.prev_length-F),l.lookahead-=l.prev_length-1,l.prev_length-=2;++l.strstart<=v&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),--l.prev_length!=0;);if(l.match_available=0,l.match_length=F-1,l.strstart++,w&&(L(l,!1),l.strm.avail_out===0))return u}else if(l.match_available){if((w=a._tr_tally(l,0,l.window[l.strstart-1]))&&L(l,!1),l.strstart++,l.lookahead--,l.strm.avail_out===0)return u}else l.match_available=1,l.strstart++,l.lookahead--}return l.match_available&&(w=a._tr_tally(l,0,l.window[l.strstart-1]),l.match_available=0),l.insert=l.strstart<F-1?l.strstart:F-1,A===p?(L(l,!0),l.strm.avail_out===0?at:N):l.last_lit&&(L(l,!1),l.strm.avail_out===0)?u:q}function vt(l,A,E,w,v){this.good_length=l,this.max_lazy=A,this.nice_length=E,this.max_chain=w,this.func=v}function et(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=C,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(2*j),this.dyn_dtree=new o.Buf16(2*(2*z+1)),this.bl_tree=new o.Buf16(2*(2*Z+1)),rt(this.dyn_ltree),rt(this.dyn_dtree),rt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(V+1),this.heap=new o.Buf16(2*I+1),rt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(2*I+1),rt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Y(l){var A;return l&&l.state?(l.total_in=l.total_out=0,l.data_type=_,(A=l.state).pending=0,A.pending_out=0,A.wrap<0&&(A.wrap=-A.wrap),A.status=A.wrap?S:H,l.adler=A.wrap===2?0:1,A.last_flush=m,a._tr_init(A),f):ot(l,x)}function k(l){var A=Y(l);return A===f&&function(E){E.window_size=2*E.w_size,rt(E.head),E.max_lazy_match=r[E.level].max_lazy,E.good_match=r[E.level].good_length,E.nice_match=r[E.level].nice_length,E.max_chain_length=r[E.level].max_chain,E.strstart=0,E.block_start=0,E.lookahead=0,E.insert=0,E.match_length=E.prev_length=F-1,E.match_available=0,E.ins_h=0}(l.state),A}function D(l,A,E,w,v,T){if(!l)return x;var $=1;if(A===h&&(A=6),w<0?($=0,w=-w):15<w&&($=2,w-=16),v<1||P<v||E!==C||w<8||15<w||A<0||9<A||T<0||g<T)return ot(l,x);w===8&&(w=9);var B=new et;return(l.state=B).strm=l,B.wrap=$,B.gzhead=null,B.w_bits=w,B.w_size=1<<B.w_bits,B.w_mask=B.w_size-1,B.hash_bits=v+7,B.hash_size=1<<B.hash_bits,B.hash_mask=B.hash_size-1,B.hash_shift=~~((B.hash_bits+F-1)/F),B.window=new o.Buf8(2*B.w_size),B.head=new o.Buf16(B.hash_size),B.prev=new o.Buf16(B.w_size),B.lit_bufsize=1<<v+6,B.pending_buf_size=4*B.lit_bufsize,B.pending_buf=new o.Buf8(B.pending_buf_size),B.d_buf=1*B.lit_bufsize,B.l_buf=3*B.lit_bufsize,B.level=A,B.strategy=T,B.method=E,k(l)}r=[new vt(0,0,0,0,function(l,A){var E=65535;for(E>l.pending_buf_size-5&&(E=l.pending_buf_size-5);;){if(l.lookahead<=1){if(_t(l),l.lookahead===0&&A===m)return u;if(l.lookahead===0)break}l.strstart+=l.lookahead,l.lookahead=0;var w=l.block_start+E;if((l.strstart===0||l.strstart>=w)&&(l.lookahead=l.strstart-w,l.strstart=w,L(l,!1),l.strm.avail_out===0)||l.strstart-l.block_start>=l.w_size-st&&(L(l,!1),l.strm.avail_out===0))return u}return l.insert=0,A===p?(L(l,!0),l.strm.avail_out===0?at:N):(l.strstart>l.block_start&&(L(l,!1),l.strm.avail_out),u)}),new vt(4,4,8,4,Ct),new vt(4,5,16,8,Ct),new vt(4,6,32,32,Ct),new vt(4,4,16,16,pt),new vt(8,16,32,32,pt),new vt(8,16,128,128,pt),new vt(8,32,128,256,pt),new vt(32,128,258,1024,pt),new vt(32,258,258,4096,pt)],i.deflateInit=function(l,A){return D(l,A,C,15,8,0)},i.deflateInit2=D,i.deflateReset=k,i.deflateResetKeep=Y,i.deflateSetHeader=function(l,A){return l&&l.state?l.state.wrap!==2?x:(l.state.gzhead=A,f):x},i.deflate=function(l,A){var E,w,v,T;if(!l||!l.state||5<A||A<0)return l?ot(l,x):x;if(w=l.state,!l.output||!l.input&&l.avail_in!==0||w.status===666&&A!==p)return ot(l,l.avail_out===0?-5:x);if(w.strm=l,E=w.last_flush,w.last_flush=A,w.status===S)if(w.wrap===2)l.adler=0,ut(w,31),ut(w,139),ut(w,8),w.gzhead?(ut(w,(w.gzhead.text?1:0)+(w.gzhead.hcrc?2:0)+(w.gzhead.extra?4:0)+(w.gzhead.name?8:0)+(w.gzhead.comment?16:0)),ut(w,255&w.gzhead.time),ut(w,w.gzhead.time>>8&255),ut(w,w.gzhead.time>>16&255),ut(w,w.gzhead.time>>24&255),ut(w,w.level===9?2:2<=w.strategy||w.level<2?4:0),ut(w,255&w.gzhead.os),w.gzhead.extra&&w.gzhead.extra.length&&(ut(w,255&w.gzhead.extra.length),ut(w,w.gzhead.extra.length>>8&255)),w.gzhead.hcrc&&(l.adler=d(l.adler,w.pending_buf,w.pending,0)),w.gzindex=0,w.status=69):(ut(w,0),ut(w,0),ut(w,0),ut(w,0),ut(w,0),ut(w,w.level===9?2:2<=w.strategy||w.level<2?4:0),ut(w,3),w.status=H);else{var $=C+(w.w_bits-8<<4)<<8;$|=(2<=w.strategy||w.level<2?0:w.level<6?1:w.level===6?2:3)<<6,w.strstart!==0&&($|=32),$+=31-$%31,w.status=H,it(w,$),w.strstart!==0&&(it(w,l.adler>>>16),it(w,65535&l.adler)),l.adler=1}if(w.status===69)if(w.gzhead.extra){for(v=w.pending;w.gzindex<(65535&w.gzhead.extra.length)&&(w.pending!==w.pending_buf_size||(w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),R(l),v=w.pending,w.pending!==w.pending_buf_size));)ut(w,255&w.gzhead.extra[w.gzindex]),w.gzindex++;w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),w.gzindex===w.gzhead.extra.length&&(w.gzindex=0,w.status=73)}else w.status=73;if(w.status===73)if(w.gzhead.name){v=w.pending;do{if(w.pending===w.pending_buf_size&&(w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),R(l),v=w.pending,w.pending===w.pending_buf_size)){T=1;break}T=w.gzindex<w.gzhead.name.length?255&w.gzhead.name.charCodeAt(w.gzindex++):0,ut(w,T)}while(T!==0);w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),T===0&&(w.gzindex=0,w.status=91)}else w.status=91;if(w.status===91)if(w.gzhead.comment){v=w.pending;do{if(w.pending===w.pending_buf_size&&(w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),R(l),v=w.pending,w.pending===w.pending_buf_size)){T=1;break}T=w.gzindex<w.gzhead.comment.length?255&w.gzhead.comment.charCodeAt(w.gzindex++):0,ut(w,T)}while(T!==0);w.gzhead.hcrc&&w.pending>v&&(l.adler=d(l.adler,w.pending_buf,w.pending-v,v)),T===0&&(w.status=103)}else w.status=103;if(w.status===103&&(w.gzhead.hcrc?(w.pending+2>w.pending_buf_size&&R(l),w.pending+2<=w.pending_buf_size&&(ut(w,255&l.adler),ut(w,l.adler>>8&255),l.adler=0,w.status=H)):w.status=H),w.pending!==0){if(R(l),l.avail_out===0)return w.last_flush=-1,f}else if(l.avail_in===0&&Q(A)<=Q(E)&&A!==p)return ot(l,-5);if(w.status===666&&l.avail_in!==0)return ot(l,-5);if(l.avail_in!==0||w.lookahead!==0||A!==m&&w.status!==666){var B=w.strategy===2?function(O,M){for(var J;;){if(O.lookahead===0&&(_t(O),O.lookahead===0)){if(M===m)return u;break}if(O.match_length=0,J=a._tr_tally(O,0,O.window[O.strstart]),O.lookahead--,O.strstart++,J&&(L(O,!1),O.strm.avail_out===0))return u}return O.insert=0,M===p?(L(O,!0),O.strm.avail_out===0?at:N):O.last_lit&&(L(O,!1),O.strm.avail_out===0)?u:q}(w,A):w.strategy===3?function(O,M){for(var J,W,U,K,X=O.window;;){if(O.lookahead<=G){if(_t(O),O.lookahead<=G&&M===m)return u;if(O.lookahead===0)break}if(O.match_length=0,O.lookahead>=F&&0<O.strstart&&(W=X[U=O.strstart-1])===X[++U]&&W===X[++U]&&W===X[++U]){K=O.strstart+G;do;while(W===X[++U]&&W===X[++U]&&W===X[++U]&&W===X[++U]&&W===X[++U]&&W===X[++U]&&W===X[++U]&&W===X[++U]&&U<K);O.match_length=G-(K-U),O.match_length>O.lookahead&&(O.match_length=O.lookahead)}if(O.match_length>=F?(J=a._tr_tally(O,1,O.match_length-F),O.lookahead-=O.match_length,O.strstart+=O.match_length,O.match_length=0):(J=a._tr_tally(O,0,O.window[O.strstart]),O.lookahead--,O.strstart++),J&&(L(O,!1),O.strm.avail_out===0))return u}return O.insert=0,M===p?(L(O,!0),O.strm.avail_out===0?at:N):O.last_lit&&(L(O,!1),O.strm.avail_out===0)?u:q}(w,A):r[w.level].func(w,A);if(B!==at&&B!==N||(w.status=666),B===u||B===at)return l.avail_out===0&&(w.last_flush=-1),f;if(B===q&&(A===1?a._tr_align(w):A!==5&&(a._tr_stored_block(w,0,0,!1),A===3&&(rt(w.head),w.lookahead===0&&(w.strstart=0,w.block_start=0,w.insert=0))),R(l),l.avail_out===0))return w.last_flush=-1,f}return A!==p?f:w.wrap<=0?1:(w.wrap===2?(ut(w,255&l.adler),ut(w,l.adler>>8&255),ut(w,l.adler>>16&255),ut(w,l.adler>>24&255),ut(w,255&l.total_in),ut(w,l.total_in>>8&255),ut(w,l.total_in>>16&255),ut(w,l.total_in>>24&255)):(it(w,l.adler>>>16),it(w,65535&l.adler)),R(l),0<w.wrap&&(w.wrap=-w.wrap),w.pending!==0?f:1)},i.deflateEnd=function(l){var A;return l&&l.state?(A=l.state.status)!==S&&A!==69&&A!==73&&A!==91&&A!==103&&A!==H&&A!==666?ot(l,x):(l.state=null,A===H?ot(l,-3):f):x},i.deflateSetDictionary=function(l,A){var E,w,v,T,$,B,O,M,J=A.length;if(!l||!l.state||(T=(E=l.state).wrap)===2||T===1&&E.status!==S||E.lookahead)return x;for(T===1&&(l.adler=c(l.adler,A,J,0)),E.wrap=0,J>=E.w_size&&(T===0&&(rt(E.head),E.strstart=0,E.block_start=0,E.insert=0),M=new o.Buf8(E.w_size),o.arraySet(M,A,J-E.w_size,E.w_size,0),A=M,J=E.w_size),$=l.avail_in,B=l.next_in,O=l.input,l.avail_in=J,l.next_in=0,l.input=A,_t(E);E.lookahead>=F;){for(w=E.strstart,v=E.lookahead-(F-1);E.ins_h=(E.ins_h<<E.hash_shift^E.window[w+F-1])&E.hash_mask,E.prev[w&E.w_mask]=E.head[E.ins_h],E.head[E.ins_h]=w,w++,--v;);E.strstart=w,E.lookahead=F-1,_t(E)}return E.strstart+=E.lookahead,E.block_start=E.strstart,E.insert=E.lookahead,E.lookahead=0,E.match_length=E.prev_length=F-1,E.match_available=0,l.next_in=B,l.input=O,l.avail_in=$,E.wrap=T,f},i.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,s,i){s.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,s,i){s.exports=function(r,o){var a,c,d,y,m,p,f,x,h,g,_,C,P,I,z,Z,j,V,F,G,st,S,H,u,q;a=r.state,c=r.next_in,u=r.input,d=c+(r.avail_in-5),y=r.next_out,q=r.output,m=y-(o-r.avail_out),p=y+(r.avail_out-257),f=a.dmax,x=a.wsize,h=a.whave,g=a.wnext,_=a.window,C=a.hold,P=a.bits,I=a.lencode,z=a.distcode,Z=(1<<a.lenbits)-1,j=(1<<a.distbits)-1;t:do{P<15&&(C+=u[c++]<<P,P+=8,C+=u[c++]<<P,P+=8),V=I[C&Z];e:for(;;){if(C>>>=F=V>>>24,P-=F,(F=V>>>16&255)===0)q[y++]=65535&V;else{if(!(16&F)){if(!(64&F)){V=I[(65535&V)+(C&(1<<F)-1)];continue e}if(32&F){a.mode=12;break t}r.msg="invalid literal/length code",a.mode=30;break t}G=65535&V,(F&=15)&&(P<F&&(C+=u[c++]<<P,P+=8),G+=C&(1<<F)-1,C>>>=F,P-=F),P<15&&(C+=u[c++]<<P,P+=8,C+=u[c++]<<P,P+=8),V=z[C&j];n:for(;;){if(C>>>=F=V>>>24,P-=F,!(16&(F=V>>>16&255))){if(!(64&F)){V=z[(65535&V)+(C&(1<<F)-1)];continue n}r.msg="invalid distance code",a.mode=30;break t}if(st=65535&V,P<(F&=15)&&(C+=u[c++]<<P,(P+=8)<F&&(C+=u[c++]<<P,P+=8)),f<(st+=C&(1<<F)-1)){r.msg="invalid distance too far back",a.mode=30;break t}if(C>>>=F,P-=F,(F=y-m)<st){if(h<(F=st-F)&&a.sane){r.msg="invalid distance too far back",a.mode=30;break t}if(H=_,(S=0)===g){if(S+=x-F,F<G){for(G-=F;q[y++]=_[S++],--F;);S=y-st,H=q}}else if(g<F){if(S+=x+g-F,(F-=g)<G){for(G-=F;q[y++]=_[S++],--F;);if(S=0,g<G){for(G-=F=g;q[y++]=_[S++],--F;);S=y-st,H=q}}}else if(S+=g-F,F<G){for(G-=F;q[y++]=_[S++],--F;);S=y-st,H=q}for(;2<G;)q[y++]=H[S++],q[y++]=H[S++],q[y++]=H[S++],G-=3;G&&(q[y++]=H[S++],1<G&&(q[y++]=H[S++]))}else{for(S=y-st;q[y++]=q[S++],q[y++]=q[S++],q[y++]=q[S++],2<(G-=3););G&&(q[y++]=q[S++],1<G&&(q[y++]=q[S++]))}break}}break}}while(c<d&&y<p);c-=G=P>>3,C&=(1<<(P-=G<<3))-1,r.next_in=c,r.next_out=y,r.avail_in=c<d?d-c+5:5-(c-d),r.avail_out=y<p?p-y+257:257-(y-p),a.hold=C,a.bits=P}},{}],49:[function(n,s,i){var r=n("../utils/common"),o=n("./adler32"),a=n("./crc32"),c=n("./inffast"),d=n("./inftrees"),y=1,m=2,p=0,f=-2,x=1,h=852,g=592;function _(S){return(S>>>24&255)+(S>>>8&65280)+((65280&S)<<8)+((255&S)<<24)}function C(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function P(S){var H;return S&&S.state?(H=S.state,S.total_in=S.total_out=H.total=0,S.msg="",H.wrap&&(S.adler=1&H.wrap),H.mode=x,H.last=0,H.havedict=0,H.dmax=32768,H.head=null,H.hold=0,H.bits=0,H.lencode=H.lendyn=new r.Buf32(h),H.distcode=H.distdyn=new r.Buf32(g),H.sane=1,H.back=-1,p):f}function I(S){var H;return S&&S.state?((H=S.state).wsize=0,H.whave=0,H.wnext=0,P(S)):f}function z(S,H){var u,q;return S&&S.state?(q=S.state,H<0?(u=0,H=-H):(u=1+(H>>4),H<48&&(H&=15)),H&&(H<8||15<H)?f:(q.window!==null&&q.wbits!==H&&(q.window=null),q.wrap=u,q.wbits=H,I(S))):f}function Z(S,H){var u,q;return S?(q=new C,(S.state=q).window=null,(u=z(S,H))!==p&&(S.state=null),u):f}var j,V,F=!0;function G(S){if(F){var H;for(j=new r.Buf32(512),V=new r.Buf32(32),H=0;H<144;)S.lens[H++]=8;for(;H<256;)S.lens[H++]=9;for(;H<280;)S.lens[H++]=7;for(;H<288;)S.lens[H++]=8;for(d(y,S.lens,0,288,j,0,S.work,{bits:9}),H=0;H<32;)S.lens[H++]=5;d(m,S.lens,0,32,V,0,S.work,{bits:5}),F=!1}S.lencode=j,S.lenbits=9,S.distcode=V,S.distbits=5}function st(S,H,u,q){var at,N=S.state;return N.window===null&&(N.wsize=1<<N.wbits,N.wnext=0,N.whave=0,N.window=new r.Buf8(N.wsize)),q>=N.wsize?(r.arraySet(N.window,H,u-N.wsize,N.wsize,0),N.wnext=0,N.whave=N.wsize):(q<(at=N.wsize-N.wnext)&&(at=q),r.arraySet(N.window,H,u-q,at,N.wnext),(q-=at)?(r.arraySet(N.window,H,u-q,q,0),N.wnext=q,N.whave=N.wsize):(N.wnext+=at,N.wnext===N.wsize&&(N.wnext=0),N.whave<N.wsize&&(N.whave+=at))),0}i.inflateReset=I,i.inflateReset2=z,i.inflateResetKeep=P,i.inflateInit=function(S){return Z(S,15)},i.inflateInit2=Z,i.inflate=function(S,H){var u,q,at,N,ot,Q,rt,R,L,ut,it,tt,_t,Ct,pt,vt,et,Y,k,D,l,A,E,w,v=0,T=new r.Buf8(4),$=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!S||!S.state||!S.output||!S.input&&S.avail_in!==0)return f;(u=S.state).mode===12&&(u.mode=13),ot=S.next_out,at=S.output,rt=S.avail_out,N=S.next_in,q=S.input,Q=S.avail_in,R=u.hold,L=u.bits,ut=Q,it=rt,A=p;t:for(;;)switch(u.mode){case x:if(u.wrap===0){u.mode=13;break}for(;L<16;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(2&u.wrap&&R===35615){T[u.check=0]=255&R,T[1]=R>>>8&255,u.check=a(u.check,T,2,0),L=R=0,u.mode=2;break}if(u.flags=0,u.head&&(u.head.done=!1),!(1&u.wrap)||(((255&R)<<8)+(R>>8))%31){S.msg="incorrect header check",u.mode=30;break}if((15&R)!=8){S.msg="unknown compression method",u.mode=30;break}if(L-=4,l=8+(15&(R>>>=4)),u.wbits===0)u.wbits=l;else if(l>u.wbits){S.msg="invalid window size",u.mode=30;break}u.dmax=1<<l,S.adler=u.check=1,u.mode=512&R?10:12,L=R=0;break;case 2:for(;L<16;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(u.flags=R,(255&u.flags)!=8){S.msg="unknown compression method",u.mode=30;break}if(57344&u.flags){S.msg="unknown header flags set",u.mode=30;break}u.head&&(u.head.text=R>>8&1),512&u.flags&&(T[0]=255&R,T[1]=R>>>8&255,u.check=a(u.check,T,2,0)),L=R=0,u.mode=3;case 3:for(;L<32;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.head&&(u.head.time=R),512&u.flags&&(T[0]=255&R,T[1]=R>>>8&255,T[2]=R>>>16&255,T[3]=R>>>24&255,u.check=a(u.check,T,4,0)),L=R=0,u.mode=4;case 4:for(;L<16;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.head&&(u.head.xflags=255&R,u.head.os=R>>8),512&u.flags&&(T[0]=255&R,T[1]=R>>>8&255,u.check=a(u.check,T,2,0)),L=R=0,u.mode=5;case 5:if(1024&u.flags){for(;L<16;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.length=R,u.head&&(u.head.extra_len=R),512&u.flags&&(T[0]=255&R,T[1]=R>>>8&255,u.check=a(u.check,T,2,0)),L=R=0}else u.head&&(u.head.extra=null);u.mode=6;case 6:if(1024&u.flags&&(Q<(tt=u.length)&&(tt=Q),tt&&(u.head&&(l=u.head.extra_len-u.length,u.head.extra||(u.head.extra=new Array(u.head.extra_len)),r.arraySet(u.head.extra,q,N,tt,l)),512&u.flags&&(u.check=a(u.check,q,tt,N)),Q-=tt,N+=tt,u.length-=tt),u.length))break t;u.length=0,u.mode=7;case 7:if(2048&u.flags){if(Q===0)break t;for(tt=0;l=q[N+tt++],u.head&&l&&u.length<65536&&(u.head.name+=String.fromCharCode(l)),l&&tt<Q;);if(512&u.flags&&(u.check=a(u.check,q,tt,N)),Q-=tt,N+=tt,l)break t}else u.head&&(u.head.name=null);u.length=0,u.mode=8;case 8:if(4096&u.flags){if(Q===0)break t;for(tt=0;l=q[N+tt++],u.head&&l&&u.length<65536&&(u.head.comment+=String.fromCharCode(l)),l&&tt<Q;);if(512&u.flags&&(u.check=a(u.check,q,tt,N)),Q-=tt,N+=tt,l)break t}else u.head&&(u.head.comment=null);u.mode=9;case 9:if(512&u.flags){for(;L<16;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(R!==(65535&u.check)){S.msg="header crc mismatch",u.mode=30;break}L=R=0}u.head&&(u.head.hcrc=u.flags>>9&1,u.head.done=!0),S.adler=u.check=0,u.mode=12;break;case 10:for(;L<32;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}S.adler=u.check=_(R),L=R=0,u.mode=11;case 11:if(u.havedict===0)return S.next_out=ot,S.avail_out=rt,S.next_in=N,S.avail_in=Q,u.hold=R,u.bits=L,2;S.adler=u.check=1,u.mode=12;case 12:if(H===5||H===6)break t;case 13:if(u.last){R>>>=7&L,L-=7&L,u.mode=27;break}for(;L<3;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}switch(u.last=1&R,L-=1,3&(R>>>=1)){case 0:u.mode=14;break;case 1:if(G(u),u.mode=20,H!==6)break;R>>>=2,L-=2;break t;case 2:u.mode=17;break;case 3:S.msg="invalid block type",u.mode=30}R>>>=2,L-=2;break;case 14:for(R>>>=7&L,L-=7&L;L<32;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if((65535&R)!=(R>>>16^65535)){S.msg="invalid stored block lengths",u.mode=30;break}if(u.length=65535&R,L=R=0,u.mode=15,H===6)break t;case 15:u.mode=16;case 16:if(tt=u.length){if(Q<tt&&(tt=Q),rt<tt&&(tt=rt),tt===0)break t;r.arraySet(at,q,N,tt,ot),Q-=tt,N+=tt,rt-=tt,ot+=tt,u.length-=tt;break}u.mode=12;break;case 17:for(;L<14;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(u.nlen=257+(31&R),R>>>=5,L-=5,u.ndist=1+(31&R),R>>>=5,L-=5,u.ncode=4+(15&R),R>>>=4,L-=4,286<u.nlen||30<u.ndist){S.msg="too many length or distance symbols",u.mode=30;break}u.have=0,u.mode=18;case 18:for(;u.have<u.ncode;){for(;L<3;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.lens[$[u.have++]]=7&R,R>>>=3,L-=3}for(;u.have<19;)u.lens[$[u.have++]]=0;if(u.lencode=u.lendyn,u.lenbits=7,E={bits:u.lenbits},A=d(0,u.lens,0,19,u.lencode,0,u.work,E),u.lenbits=E.bits,A){S.msg="invalid code lengths set",u.mode=30;break}u.have=0,u.mode=19;case 19:for(;u.have<u.nlen+u.ndist;){for(;vt=(v=u.lencode[R&(1<<u.lenbits)-1])>>>16&255,et=65535&v,!((pt=v>>>24)<=L);){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(et<16)R>>>=pt,L-=pt,u.lens[u.have++]=et;else{if(et===16){for(w=pt+2;L<w;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(R>>>=pt,L-=pt,u.have===0){S.msg="invalid bit length repeat",u.mode=30;break}l=u.lens[u.have-1],tt=3+(3&R),R>>>=2,L-=2}else if(et===17){for(w=pt+3;L<w;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}L-=pt,l=0,tt=3+(7&(R>>>=pt)),R>>>=3,L-=3}else{for(w=pt+7;L<w;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}L-=pt,l=0,tt=11+(127&(R>>>=pt)),R>>>=7,L-=7}if(u.have+tt>u.nlen+u.ndist){S.msg="invalid bit length repeat",u.mode=30;break}for(;tt--;)u.lens[u.have++]=l}}if(u.mode===30)break;if(u.lens[256]===0){S.msg="invalid code -- missing end-of-block",u.mode=30;break}if(u.lenbits=9,E={bits:u.lenbits},A=d(y,u.lens,0,u.nlen,u.lencode,0,u.work,E),u.lenbits=E.bits,A){S.msg="invalid literal/lengths set",u.mode=30;break}if(u.distbits=6,u.distcode=u.distdyn,E={bits:u.distbits},A=d(m,u.lens,u.nlen,u.ndist,u.distcode,0,u.work,E),u.distbits=E.bits,A){S.msg="invalid distances set",u.mode=30;break}if(u.mode=20,H===6)break t;case 20:u.mode=21;case 21:if(6<=Q&&258<=rt){S.next_out=ot,S.avail_out=rt,S.next_in=N,S.avail_in=Q,u.hold=R,u.bits=L,c(S,it),ot=S.next_out,at=S.output,rt=S.avail_out,N=S.next_in,q=S.input,Q=S.avail_in,R=u.hold,L=u.bits,u.mode===12&&(u.back=-1);break}for(u.back=0;vt=(v=u.lencode[R&(1<<u.lenbits)-1])>>>16&255,et=65535&v,!((pt=v>>>24)<=L);){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(vt&&!(240&vt)){for(Y=pt,k=vt,D=et;vt=(v=u.lencode[D+((R&(1<<Y+k)-1)>>Y)])>>>16&255,et=65535&v,!(Y+(pt=v>>>24)<=L);){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}R>>>=Y,L-=Y,u.back+=Y}if(R>>>=pt,L-=pt,u.back+=pt,u.length=et,vt===0){u.mode=26;break}if(32&vt){u.back=-1,u.mode=12;break}if(64&vt){S.msg="invalid literal/length code",u.mode=30;break}u.extra=15&vt,u.mode=22;case 22:if(u.extra){for(w=u.extra;L<w;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.length+=R&(1<<u.extra)-1,R>>>=u.extra,L-=u.extra,u.back+=u.extra}u.was=u.length,u.mode=23;case 23:for(;vt=(v=u.distcode[R&(1<<u.distbits)-1])>>>16&255,et=65535&v,!((pt=v>>>24)<=L);){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(!(240&vt)){for(Y=pt,k=vt,D=et;vt=(v=u.distcode[D+((R&(1<<Y+k)-1)>>Y)])>>>16&255,et=65535&v,!(Y+(pt=v>>>24)<=L);){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}R>>>=Y,L-=Y,u.back+=Y}if(R>>>=pt,L-=pt,u.back+=pt,64&vt){S.msg="invalid distance code",u.mode=30;break}u.offset=et,u.extra=15&vt,u.mode=24;case 24:if(u.extra){for(w=u.extra;L<w;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}u.offset+=R&(1<<u.extra)-1,R>>>=u.extra,L-=u.extra,u.back+=u.extra}if(u.offset>u.dmax){S.msg="invalid distance too far back",u.mode=30;break}u.mode=25;case 25:if(rt===0)break t;if(tt=it-rt,u.offset>tt){if((tt=u.offset-tt)>u.whave&&u.sane){S.msg="invalid distance too far back",u.mode=30;break}_t=tt>u.wnext?(tt-=u.wnext,u.wsize-tt):u.wnext-tt,tt>u.length&&(tt=u.length),Ct=u.window}else Ct=at,_t=ot-u.offset,tt=u.length;for(rt<tt&&(tt=rt),rt-=tt,u.length-=tt;at[ot++]=Ct[_t++],--tt;);u.length===0&&(u.mode=21);break;case 26:if(rt===0)break t;at[ot++]=u.length,rt--,u.mode=21;break;case 27:if(u.wrap){for(;L<32;){if(Q===0)break t;Q--,R|=q[N++]<<L,L+=8}if(it-=rt,S.total_out+=it,u.total+=it,it&&(S.adler=u.check=u.flags?a(u.check,at,it,ot-it):o(u.check,at,it,ot-it)),it=rt,(u.flags?R:_(R))!==u.check){S.msg="incorrect data check",u.mode=30;break}L=R=0}u.mode=28;case 28:if(u.wrap&&u.flags){for(;L<32;){if(Q===0)break t;Q--,R+=q[N++]<<L,L+=8}if(R!==(4294967295&u.total)){S.msg="incorrect length check",u.mode=30;break}L=R=0}u.mode=29;case 29:A=1;break t;case 30:A=-3;break t;case 31:return-4;case 32:default:return f}return S.next_out=ot,S.avail_out=rt,S.next_in=N,S.avail_in=Q,u.hold=R,u.bits=L,(u.wsize||it!==S.avail_out&&u.mode<30&&(u.mode<27||H!==4))&&st(S,S.output,S.next_out,it-S.avail_out)?(u.mode=31,-4):(ut-=S.avail_in,it-=S.avail_out,S.total_in+=ut,S.total_out+=it,u.total+=it,u.wrap&&it&&(S.adler=u.check=u.flags?a(u.check,at,it,S.next_out-it):o(u.check,at,it,S.next_out-it)),S.data_type=u.bits+(u.last?64:0)+(u.mode===12?128:0)+(u.mode===20||u.mode===15?256:0),(ut==0&&it===0||H===4)&&A===p&&(A=-5),A)},i.inflateEnd=function(S){if(!S||!S.state)return f;var H=S.state;return H.window&&(H.window=null),S.state=null,p},i.inflateGetHeader=function(S,H){var u;return S&&S.state&&2&(u=S.state).wrap?((u.head=H).done=!1,p):f},i.inflateSetDictionary=function(S,H){var u,q=H.length;return S&&S.state?(u=S.state).wrap!==0&&u.mode!==11?f:u.mode===11&&o(1,H,q,0)!==u.check?-3:st(S,H,q,q)?(u.mode=31,-4):(u.havedict=1,p):f},i.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,s,i){var r=n("../utils/common"),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],d=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];s.exports=function(y,m,p,f,x,h,g,_){var C,P,I,z,Z,j,V,F,G,st=_.bits,S=0,H=0,u=0,q=0,at=0,N=0,ot=0,Q=0,rt=0,R=0,L=null,ut=0,it=new r.Buf16(16),tt=new r.Buf16(16),_t=null,Ct=0;for(S=0;S<=15;S++)it[S]=0;for(H=0;H<f;H++)it[m[p+H]]++;for(at=st,q=15;1<=q&&it[q]===0;q--);if(q<at&&(at=q),q===0)return x[h++]=20971520,x[h++]=20971520,_.bits=1,0;for(u=1;u<q&&it[u]===0;u++);for(at<u&&(at=u),S=Q=1;S<=15;S++)if(Q<<=1,(Q-=it[S])<0)return-1;if(0<Q&&(y===0||q!==1))return-1;for(tt[1]=0,S=1;S<15;S++)tt[S+1]=tt[S]+it[S];for(H=0;H<f;H++)m[p+H]!==0&&(g[tt[m[p+H]]++]=H);if(j=y===0?(L=_t=g,19):y===1?(L=o,ut-=257,_t=a,Ct-=257,256):(L=c,_t=d,-1),S=u,Z=h,ot=H=R=0,I=-1,z=(rt=1<<(N=at))-1,y===1&&852<rt||y===2&&592<rt)return 1;for(;;){for(V=S-ot,G=g[H]<j?(F=0,g[H]):g[H]>j?(F=_t[Ct+g[H]],L[ut+g[H]]):(F=96,0),C=1<<S-ot,u=P=1<<N;x[Z+(R>>ot)+(P-=C)]=V<<24|F<<16|G|0,P!==0;);for(C=1<<S-1;R&C;)C>>=1;if(C!==0?(R&=C-1,R+=C):R=0,H++,--it[S]==0){if(S===q)break;S=m[p+g[H]]}if(at<S&&(R&z)!==I){for(ot===0&&(ot=at),Z+=u,Q=1<<(N=S-ot);N+ot<q&&!((Q-=it[N+ot])<=0);)N++,Q<<=1;if(rt+=1<<N,y===1&&852<rt||y===2&&592<rt)return 1;x[I=R&z]=at<<24|N<<16|Z-h|0}}return R!==0&&(x[Z+R]=S-ot<<24|64<<16|0),_.bits=at,0}},{"../utils/common":41}],51:[function(n,s,i){s.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,s,i){var r=n("../utils/common"),o=0,a=1;function c(v){for(var T=v.length;0<=--T;)v[T]=0}var d=0,y=29,m=256,p=m+1+y,f=30,x=19,h=2*p+1,g=15,_=16,C=7,P=256,I=16,z=17,Z=18,j=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],V=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],F=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],st=new Array(2*(p+2));c(st);var S=new Array(2*f);c(S);var H=new Array(512);c(H);var u=new Array(256);c(u);var q=new Array(y);c(q);var at,N,ot,Q=new Array(f);function rt(v,T,$,B,O){this.static_tree=v,this.extra_bits=T,this.extra_base=$,this.elems=B,this.max_length=O,this.has_stree=v&&v.length}function R(v,T){this.dyn_tree=v,this.max_code=0,this.stat_desc=T}function L(v){return v<256?H[v]:H[256+(v>>>7)]}function ut(v,T){v.pending_buf[v.pending++]=255&T,v.pending_buf[v.pending++]=T>>>8&255}function it(v,T,$){v.bi_valid>_-$?(v.bi_buf|=T<<v.bi_valid&65535,ut(v,v.bi_buf),v.bi_buf=T>>_-v.bi_valid,v.bi_valid+=$-_):(v.bi_buf|=T<<v.bi_valid&65535,v.bi_valid+=$)}function tt(v,T,$){it(v,$[2*T],$[2*T+1])}function _t(v,T){for(var $=0;$|=1&v,v>>>=1,$<<=1,0<--T;);return $>>>1}function Ct(v,T,$){var B,O,M=new Array(g+1),J=0;for(B=1;B<=g;B++)M[B]=J=J+$[B-1]<<1;for(O=0;O<=T;O++){var W=v[2*O+1];W!==0&&(v[2*O]=_t(M[W]++,W))}}function pt(v){var T;for(T=0;T<p;T++)v.dyn_ltree[2*T]=0;for(T=0;T<f;T++)v.dyn_dtree[2*T]=0;for(T=0;T<x;T++)v.bl_tree[2*T]=0;v.dyn_ltree[2*P]=1,v.opt_len=v.static_len=0,v.last_lit=v.matches=0}function vt(v){8<v.bi_valid?ut(v,v.bi_buf):0<v.bi_valid&&(v.pending_buf[v.pending++]=v.bi_buf),v.bi_buf=0,v.bi_valid=0}function et(v,T,$,B){var O=2*T,M=2*$;return v[O]<v[M]||v[O]===v[M]&&B[T]<=B[$]}function Y(v,T,$){for(var B=v.heap[$],O=$<<1;O<=v.heap_len&&(O<v.heap_len&&et(T,v.heap[O+1],v.heap[O],v.depth)&&O++,!et(T,B,v.heap[O],v.depth));)v.heap[$]=v.heap[O],$=O,O<<=1;v.heap[$]=B}function k(v,T,$){var B,O,M,J,W=0;if(v.last_lit!==0)for(;B=v.pending_buf[v.d_buf+2*W]<<8|v.pending_buf[v.d_buf+2*W+1],O=v.pending_buf[v.l_buf+W],W++,B===0?tt(v,O,T):(tt(v,(M=u[O])+m+1,T),(J=j[M])!==0&&it(v,O-=q[M],J),tt(v,M=L(--B),$),(J=V[M])!==0&&it(v,B-=Q[M],J)),W<v.last_lit;);tt(v,P,T)}function D(v,T){var $,B,O,M=T.dyn_tree,J=T.stat_desc.static_tree,W=T.stat_desc.has_stree,U=T.stat_desc.elems,K=-1;for(v.heap_len=0,v.heap_max=h,$=0;$<U;$++)M[2*$]!==0?(v.heap[++v.heap_len]=K=$,v.depth[$]=0):M[2*$+1]=0;for(;v.heap_len<2;)M[2*(O=v.heap[++v.heap_len]=K<2?++K:0)]=1,v.depth[O]=0,v.opt_len--,W&&(v.static_len-=J[2*O+1]);for(T.max_code=K,$=v.heap_len>>1;1<=$;$--)Y(v,M,$);for(O=U;$=v.heap[1],v.heap[1]=v.heap[v.heap_len--],Y(v,M,1),B=v.heap[1],v.heap[--v.heap_max]=$,v.heap[--v.heap_max]=B,M[2*O]=M[2*$]+M[2*B],v.depth[O]=(v.depth[$]>=v.depth[B]?v.depth[$]:v.depth[B])+1,M[2*$+1]=M[2*B+1]=O,v.heap[1]=O++,Y(v,M,1),2<=v.heap_len;);v.heap[--v.heap_max]=v.heap[1],function(X,lt){var nt,mt,Ut,bt,Ht,Mt,Ot=lt.dyn_tree,Re=lt.max_code,di=lt.stat_desc.static_tree,fi=lt.stat_desc.has_stree,hi=lt.stat_desc.extra_bits,zs=lt.stat_desc.extra_base,Fe=lt.stat_desc.max_length,sn=0;for(bt=0;bt<=g;bt++)X.bl_count[bt]=0;for(Ot[2*X.heap[X.heap_max]+1]=0,nt=X.heap_max+1;nt<h;nt++)Fe<(bt=Ot[2*Ot[2*(mt=X.heap[nt])+1]+1]+1)&&(bt=Fe,sn++),Ot[2*mt+1]=bt,Re<mt||(X.bl_count[bt]++,Ht=0,zs<=mt&&(Ht=hi[mt-zs]),Mt=Ot[2*mt],X.opt_len+=Mt*(bt+Ht),fi&&(X.static_len+=Mt*(di[2*mt+1]+Ht)));if(sn!==0){do{for(bt=Fe-1;X.bl_count[bt]===0;)bt--;X.bl_count[bt]--,X.bl_count[bt+1]+=2,X.bl_count[Fe]--,sn-=2}while(0<sn);for(bt=Fe;bt!==0;bt--)for(mt=X.bl_count[bt];mt!==0;)Re<(Ut=X.heap[--nt])||(Ot[2*Ut+1]!==bt&&(X.opt_len+=(bt-Ot[2*Ut+1])*Ot[2*Ut],Ot[2*Ut+1]=bt),mt--)}}(v,T),Ct(M,K,v.bl_count)}function l(v,T,$){var B,O,M=-1,J=T[1],W=0,U=7,K=4;for(J===0&&(U=138,K=3),T[2*($+1)+1]=65535,B=0;B<=$;B++)O=J,J=T[2*(B+1)+1],++W<U&&O===J||(W<K?v.bl_tree[2*O]+=W:O!==0?(O!==M&&v.bl_tree[2*O]++,v.bl_tree[2*I]++):W<=10?v.bl_tree[2*z]++:v.bl_tree[2*Z]++,M=O,K=(W=0)===J?(U=138,3):O===J?(U=6,3):(U=7,4))}function A(v,T,$){var B,O,M=-1,J=T[1],W=0,U=7,K=4;for(J===0&&(U=138,K=3),B=0;B<=$;B++)if(O=J,J=T[2*(B+1)+1],!(++W<U&&O===J)){if(W<K)for(;tt(v,O,v.bl_tree),--W!=0;);else O!==0?(O!==M&&(tt(v,O,v.bl_tree),W--),tt(v,I,v.bl_tree),it(v,W-3,2)):W<=10?(tt(v,z,v.bl_tree),it(v,W-3,3)):(tt(v,Z,v.bl_tree),it(v,W-11,7));M=O,K=(W=0)===J?(U=138,3):O===J?(U=6,3):(U=7,4)}}c(Q);var E=!1;function w(v,T,$,B){it(v,(d<<1)+(B?1:0),3),function(O,M,J,W){vt(O),W&&(ut(O,J),ut(O,~J)),r.arraySet(O.pending_buf,O.window,M,J,O.pending),O.pending+=J}(v,T,$,!0)}i._tr_init=function(v){E||(function(){var T,$,B,O,M,J=new Array(g+1);for(O=B=0;O<y-1;O++)for(q[O]=B,T=0;T<1<<j[O];T++)u[B++]=O;for(u[B-1]=O,O=M=0;O<16;O++)for(Q[O]=M,T=0;T<1<<V[O];T++)H[M++]=O;for(M>>=7;O<f;O++)for(Q[O]=M<<7,T=0;T<1<<V[O]-7;T++)H[256+M++]=O;for($=0;$<=g;$++)J[$]=0;for(T=0;T<=143;)st[2*T+1]=8,T++,J[8]++;for(;T<=255;)st[2*T+1]=9,T++,J[9]++;for(;T<=279;)st[2*T+1]=7,T++,J[7]++;for(;T<=287;)st[2*T+1]=8,T++,J[8]++;for(Ct(st,p+1,J),T=0;T<f;T++)S[2*T+1]=5,S[2*T]=_t(T,5);at=new rt(st,j,m+1,p,g),N=new rt(S,V,0,f,g),ot=new rt(new Array(0),F,0,x,C)}(),E=!0),v.l_desc=new R(v.dyn_ltree,at),v.d_desc=new R(v.dyn_dtree,N),v.bl_desc=new R(v.bl_tree,ot),v.bi_buf=0,v.bi_valid=0,pt(v)},i._tr_stored_block=w,i._tr_flush_block=function(v,T,$,B){var O,M,J=0;0<v.level?(v.strm.data_type===2&&(v.strm.data_type=function(W){var U,K=4093624447;for(U=0;U<=31;U++,K>>>=1)if(1&K&&W.dyn_ltree[2*U]!==0)return o;if(W.dyn_ltree[18]!==0||W.dyn_ltree[20]!==0||W.dyn_ltree[26]!==0)return a;for(U=32;U<m;U++)if(W.dyn_ltree[2*U]!==0)return a;return o}(v)),D(v,v.l_desc),D(v,v.d_desc),J=function(W){var U;for(l(W,W.dyn_ltree,W.l_desc.max_code),l(W,W.dyn_dtree,W.d_desc.max_code),D(W,W.bl_desc),U=x-1;3<=U&&W.bl_tree[2*G[U]+1]===0;U--);return W.opt_len+=3*(U+1)+5+5+4,U}(v),O=v.opt_len+3+7>>>3,(M=v.static_len+3+7>>>3)<=O&&(O=M)):O=M=$+5,$+4<=O&&T!==-1?w(v,T,$,B):v.strategy===4||M===O?(it(v,2+(B?1:0),3),k(v,st,S)):(it(v,4+(B?1:0),3),function(W,U,K,X){var lt;for(it(W,U-257,5),it(W,K-1,5),it(W,X-4,4),lt=0;lt<X;lt++)it(W,W.bl_tree[2*G[lt]+1],3);A(W,W.dyn_ltree,U-1),A(W,W.dyn_dtree,K-1)}(v,v.l_desc.max_code+1,v.d_desc.max_code+1,J+1),k(v,v.dyn_ltree,v.dyn_dtree)),pt(v),B&&vt(v)},i._tr_tally=function(v,T,$){return v.pending_buf[v.d_buf+2*v.last_lit]=T>>>8&255,v.pending_buf[v.d_buf+2*v.last_lit+1]=255&T,v.pending_buf[v.l_buf+v.last_lit]=255&$,v.last_lit++,T===0?v.dyn_ltree[2*$]++:(v.matches++,T--,v.dyn_ltree[2*(u[$]+m+1)]++,v.dyn_dtree[2*L(T)]++),v.last_lit===v.lit_bufsize-1},i._tr_align=function(v){it(v,2,3),tt(v,P,st),function(T){T.bi_valid===16?(ut(T,T.bi_buf),T.bi_buf=0,T.bi_valid=0):8<=T.bi_valid&&(T.pending_buf[T.pending++]=255&T.bi_buf,T.bi_buf>>=8,T.bi_valid-=8)}(v)}},{"../utils/common":41}],53:[function(n,s,i){s.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,s,i){(function(r){(function(o,a){if(!o.setImmediate){var c,d,y,m,p=1,f={},x=!1,h=o.document,g=Object.getPrototypeOf&&Object.getPrototypeOf(o);g=g&&g.setTimeout?g:o,c={}.toString.call(o.process)==="[object process]"?function(I){process.nextTick(function(){C(I)})}:function(){if(o.postMessage&&!o.importScripts){var I=!0,z=o.onmessage;return o.onmessage=function(){I=!1},o.postMessage("","*"),o.onmessage=z,I}}()?(m="setImmediate$"+Math.random()+"$",o.addEventListener?o.addEventListener("message",P,!1):o.attachEvent("onmessage",P),function(I){o.postMessage(m+I,"*")}):o.MessageChannel?((y=new MessageChannel).port1.onmessage=function(I){C(I.data)},function(I){y.port2.postMessage(I)}):h&&"onreadystatechange"in h.createElement("script")?(d=h.documentElement,function(I){var z=h.createElement("script");z.onreadystatechange=function(){C(I),z.onreadystatechange=null,d.removeChild(z),z=null},d.appendChild(z)}):function(I){setTimeout(C,0,I)},g.setImmediate=function(I){typeof I!="function"&&(I=new Function(""+I));for(var z=new Array(arguments.length-1),Z=0;Z<z.length;Z++)z[Z]=arguments[Z+1];var j={callback:I,args:z};return f[p]=j,c(p),p++},g.clearImmediate=_}function _(I){delete f[I]}function C(I){if(x)setTimeout(C,0,I);else{var z=f[I];if(z){x=!0;try{(function(Z){var j=Z.callback,V=Z.args;switch(V.length){case 0:j();break;case 1:j(V[0]);break;case 2:j(V[0],V[1]);break;case 3:j(V[0],V[1],V[2]);break;default:j.apply(a,V)}})(z)}finally{_(I),x=!1}}}}function P(I){I.source===o&&typeof I.data=="string"&&I.data.indexOf(m)===0&&C(+I.data.slice(m.length))}})(typeof self>"u"?r===void 0?this:r:self)}).call(this,typeof dn<"u"?dn:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})})(ci);var Sn=ci.exports;class Ps{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getPluginUrl(e,n){const s=Date.now(),i=localStorage.getItem("pluginUrl");if(console.log(i,"cachedPluginUrl"),i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getPluginDownloadUrl(e,n),o=s+15*60*1e3,a={name:e,version:n,url:r,expiryTime:o};return localStorage.setItem("pluginUrl",JSON.stringify(a)),r}async getPluginDownloadUrl(e,n){const s=await this.api.getDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new ct.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadPluginToPluginFolder(e,n){const s=await this.getPluginUrl(e,n);if(!s)return new ct.Notice(`获取${e}插件下载地址失败！`),!1;if(app.plugins.manifests[e])return new ct.Notice(`插件${e}已经安装，无需重复安装！`),!1;try{const i=await ct.requestUrl({url:s,method:"GET"}),r=ct.normalizePath(app.vault.configDir+"/plugins/"+e)+"/",o=this.app.vault.adapter,a=await Sn.loadAsync(i.arrayBuffer);(await o.exists(r)===!1||!await o.exists(r+"manifest.json"))&&await o.mkdir(r);try{for(const[c,d]of Object.entries(a.files)){const y=r+c,m=y.substring(0,y.lastIndexOf("/"));if(await o.mkdir(m),!d.dir){const p=await d.async("string");await o.write(y,p)}}}catch{throw new ct.Notice(`插件${e}解压失败！请联系开发者处理！`,5e3),o.rmdir(r,!0),Error(`插件${e}解压失败！`)}return new ct.Notice(`插件${e}安装成功！
请在插件列表中启用`,5e3),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new ct.Notice(`插件${e}安装失败！${i}`,5e3),!1}}async updatePluginToExistPluginFolder(e,n){const s=await this.getPluginDownloadUrl(e,n);if(!s)throw new ct.Notice(`获取${e}插件下载地址失败！`),new Error(`获取${e}插件下载地址失败！`);if(e!="obsidian-pkmer"&&!app.plugins.manifests[e])return new ct.Notice(`插件${e}未安装！`),!1;try{let i=ct.normalizePath(app.vault.configDir+"/plugins/"+e)+"/";e=="obsidian-pkmer"&&(i=ct.normalizePath(app.vault.configDir+"/plugins/")+"/");const r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`插件${e}未安装！`);const o=await ct.requestUrl({url:s,method:"GET"}),a=await Sn.loadAsync(o.arrayBuffer);try{for(const[c,d]of Object.entries(a.files)){const y=i+c,m=y.substring(0,y.lastIndexOf("/"));if(await r.mkdir(m),!d.dir){const p=await d.async("string");await r.write(y,p)}}}catch{throw new ct.Notice(`插件${e}解压失败！得手动清除残留文件！`),Error(`插件${e}解压失败！`)}return new ct.Notice(`插件${e}更新成功！
 请在插件列表中重新启用`),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new ct.Notice(`插件${e}更新失败！${i}`),!1}}}const _c={class:"text-right pkmer-toolbar"},bc=["tooltip"],yc={class:"z-10 flex w-3/4 p-4 m-auto my-4 top-20 bg-yellow-200/50"},xc=b("div",{class:"mr-2"},"⚠️",-1),kc=b("span",{class:"font-bold"},"提示：",-1),ui=ge({__name:"Head",props:{isLogin:{type:Boolean},settings:{},app:{}},async setup(t){let e,n;const s=t,i=ft(0),r=ft(""),o=ft(),a=s.isLogin,c=new Ce(s.settings.token),d=new Ps(s.app,s.settings);o.value=([e,n]=kn(()=>c.getPkmerVersion()),e=await e,n(),e),a&&(i.value=([e,n]=kn(()=>c.getDownloadCount()),e=await e,n(),e)),r.value=s.app.plugins.manifests.pkmer.version;const y=Bt(()=>{if(o.value!=r.value)return"发现新版本:"+o.value;if(o.value==r.value)return"Ver:"+r.value}),m=async()=>{o.value==r.value||(new ct.Notice("正在更新插件，请稍后...",3e3),!await d.updatePluginToExistPluginFolder("obsidian-pkmer",o.value))||s.app.workspace.activeLeaf.rebuildView()},p=async()=>{a&&(localStorage.removeItem("pluginList"),localStorage.removeItem("pluginListExpiry"),localStorage.removeItem("themeList"),localStorage.removeItem("themeListExpiry")),s.app.workspace.activeLeaf.rebuildView()},f=()=>{s.app.setting.open(),s.app.setting.openTabById("pkmer")};return(x,h)=>(ht(),wt(Dt,null,[b("div",_c,[b("span",{onClick:m,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"},kt(y.value),1),It(b("span",{tooltip:i.value<=5?"请在Pkmer个人中心绑定微信后可获取更多次数":null,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"}," 剩余次数 "+kt(i.value),9,bc),[[St,Pt(a)]]),b("span",{onClick:p,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-green-500 text-white shadow-xl shadow-primary-500/20"}," 刷新 "),b("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20",onClick:f}," 设置 ")]),It(b("div",yc,[b("div",{class:"flex items-center"},[xc,b("div",null,[kc,b("span",null,[Ft("当前是未登录状态，仅展示下载前20的热门内容，请"),b("button",{class:"bg-yellow-600 w-20 h-6 inline-block px-1 py-1 m-1 font-sans text-xs rounded-lg",onClick:f}," 点此登录"),Ft("后获取全部内容。")])])])],512),[[St,!Pt(a)]])],64))}});class Os{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getThemeUrl(e,n){const s=Date.now(),i=localStorage.getItem("themeUrl");if(i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getThemeDownloadUrl(e,n),o=s+15*60*1e3,a={name:e,version:n,url:r,expiryTime:o};return localStorage.setItem("themeUrl",JSON.stringify(a)),r}async getThemeDownloadUrl(e,n){const s=await this.api.getThemeDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new ct.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadThemeToThemeFolder(e,n){const s=await this.getThemeUrl(e,n);if(!s)return new ct.Notice(`获取${e}主题下载地址失败！`),!1;if(app.customCss.themes[e])return new ct.Notice(`主题${e}已经安装，无需重复安装！`),!1;try{const i=await ct.requestUrl({url:s,method:"GET"}),r=ct.normalizePath(app.vault.configDir+"/themes/"+e)+"/",o=this.app.vault.adapter,a=await Sn.loadAsync(i.arrayBuffer);(await o.exists(r)===!1||!await o.exists(r+"manifest.json"))&&await o.mkdir(r);try{a.forEach(async(c,d)=>{const y=r+c,m=await d.async("string");await o.write(y,m)})}catch{throw new ct.Notice(`主题${e}解压失败！得手动清除残留文件！`,5e3),o.rmdir(r,!0),Error(`主题${e}解压失败！`)}return new ct.Notice(`主题${e}安装并启用成功！
`,5e3),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new ct.Notice(`主题${e}安装失败！${i}`,5e3),!1}}async updateThemeToExistThemeFolder(e,n){const s=await this.getThemeDownloadUrl(e,n);if(!s)throw new ct.Notice(`获取${e}主题下载地址失败！`),new Error(`获取${e}主题下载地址失败！`);if(!app.customCss.themes[e])return new ct.Notice(`主题${e}未安装！`),!1;try{const i=ct.normalizePath(app.vault.configDir+"/themes/"+e)+"/",r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`主题${e}未安装！`);const o=await ct.requestUrl({url:s,method:"GET"}),a=await Sn.loadAsync(o.arrayBuffer);try{a.forEach(async(c,d)=>{const y=i+c,m=await d.async("string");await r.write(y,m)})}catch{throw new ct.Notice(`主题${e}解压失败！得手动清除残留文件！`),Error(`主题${e}解压失败！`)}return new ct.Notice(`主题${e}更新成功！
 新主题已生效`),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new ct.Notice(`主题${e}更新失败！${i}`),!1}}}const Cc={"data-pagefind-body":"",class:"w-full"},Tc={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Ic={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Ec={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Sc={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Ac={class:"widget-item"},Pc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Oc=[Pc],zc={class:"widget-item"},Bc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Dc=[Bc],$c={class:"widget-item"},Lc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),Uc=[Lc],Mc={class:"widget-item"},Rc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Fc=[Rc],jc={class:"widget-item"},Nc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),Hc={class:"num"},Wc=["tooltip"],Zc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"default"}," 默认 ",-1),Kc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"mobile"}," 移动端 ",-1),Vc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"desktop"}," 仅桌面端 ",-1),qc=[Zc,Kc,Vc],Jc={class:"relative w-full"},Yc={class:"relative group"},Gc=["value"],Xc=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),Qc={class:"text-right"},tu=["onClick"],eu=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),nu=[eu],su={class:"w-full bg-muted-100 dark:bg-muted-1000"},ru={class:"w-full mx-auto max-w-7xl"},iu={class:"flex items-center w-full overflow-hidden"},ou={class:"flex flex-col justify-between w-full h-full md:px-6 pt-4 pb-16"},au={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},lu={class:"flex flex-col gap-12 py-12"},cu={key:0,class:"flex justify-center items-center py-10"},uu=b("div",{class:"w-12 h-12 border-4 border-t-4 border-gray-200 rounded-full animate-spin dark:border-gray-700 dark:border-t-primary-500"},null,-1),du=[uu],fu={class:"flex items-center justify-center w-full p-6 -m-3"},hu={class:"flex items-center justify-center w-full mb-4"},pu={class:"flex space-x-2"},mu={class:"flex items-center px-3 py-1"},gu={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},vu={class:"flex items-center justify-between"},wu=b("h5",{class:"mr-3 max-w-none"},null,-1),_u=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),bu=[_u],yu={class:"body-font"},xu={class:"container px-5 py-4 mx-auto"},ku={class:"mb-6 text-2xl font-medium text-center title-font"},Cu=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Tu={class:"mb-2"},Iu={class:"bolder"},Eu=b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ",-1),Su={class:"flex-wrap block -mx-4 -mt-4 space-y-6 md:flex sm:-m-4 md:-mb-10 md:space-y-0"},Au={class:"flex md:p-4 md:w-1/2"},Pu={class:"flex-grow"},Ou=ge({__name:"PluginMarket",props:{settings:{},app:{},tab:{},currentTab:{}},async setup(t){let e,n;const s=t,i=ft(""),r=ft(""),o=ft(!1),a=ft();let c=ft(24),d=ft(1);const y=ft(!0),m=ft("default"),p=new Ce(s.settings.token),f=new Ps(s.app,s.settings),x=ft(!1),h=([e,n]=kn(()=>p.isUserLogin()),e=await e,n(),e),g=ft(0),_=ft(1),C=ft(!1),P=ft([]),I=ft(0),z=ft(0),Z=Bt(()=>I.value),j=Bt(()=>z.value),V=async()=>{C.value=!0;const U=await p.getPkmerDocs();if(h)try{const{plugins:K,total:X,totalPages:lt}=await p.getPluginListPaginated(d.value,c.value,i.value||"downloadCount",r.value?.toUpperCase()||"DESC");a.value=K,g.value=X,_.value=lt,Array.isArray(a.value)?a.value.forEach(nt=>{const mt=U.find(Ht=>Ht.slug==nt.id);mt&&(nt.contentUrl=`https://pkmer.cn/show/${mt.uid}`,nt.tags=mt.tags,nt.chineseDescription=mt.description,nt.authorAvatar=mt.authorAvatar);const Ut=U.find(Ht=>Ht.slug.includes(nt.id+"_readme"));Ut&&(nt.readme_zh=`https://pkmer.cn/show/${Ut.uid}`);const bt=s.app.plugins.manifests;nt.isInstalled=bt[nt.id]!==void 0,nt.isOutdated=nt.isInstalled&&bt[nt.id].version!==nt.version}):a.value=[]}catch(K){console.error("Error loading plugins:",K)}else a.value=await p.getTop20Plugins(),Array.isArray(a.value)?a.value.forEach(K=>{const X=U.find(mt=>mt.slug==K.id);X&&(K.contentUrl=`https://pkmer.cn/show/${X.uid}`,K.tags=X.tags,K.chineseDescription=X.description,K.authorAvatar=X.authorAvatar);const lt=U.find(mt=>mt.slug.includes(K.id+"_readme"));lt&&(K.readme_zh=`https://pkmer.cn/show/${lt.uid}`);const nt=s.app.plugins.manifests[K.id];K.isInstalled=nt!==void 0,K.isOutdated=nt?.version!==K.version}):a.value=[];C.value=!1},F=()=>{x.value=!0,pt()},G=ft(""),st=ft("all"),S=ft(""),H=ft(""),u=ft(""),q=async()=>{try{const U=Object.keys(s.app.plugins.manifests);if(I.value=U.length,U.length>0){const{plugins:K}=await p.getInstalledPluginsPaginated(U,1,U.length,"downloadCount","DESC"),X=K.filter(lt=>{const nt=s.app.plugins.manifests[lt.id];return nt&&nt.version!==lt.version});z.value=X.length}else z.value=0}catch(U){console.error("Error loading plugin status:",U)}},at=async()=>{o.value=!1,new ct.Notice("正在下载插件，请稍后...",3e3),await f.downloadPluginToPluginFolder(S.value,H.value)&&(a.value=a.value.map(K=>(K.id==S.value&&(K.isInstalled=!0),K)),await q())},N=async()=>{o.value=!1,new ct.Notice("正在更新插件，请稍后...",3e3),await f.updatePluginToExistPluginFolder(S.value,H.value)&&(a.value=a.value.map(K=>(K.id==S.value&&(K.isOutdated=!1),K)),await q())},ot=()=>{o.value=!1},Q=U=>{st.value=U,d.value=1,U==="all"?V():V().then(()=>{a.value=a.value.filter(K=>K.tags?.includes(U))})},rt=(U,K,X,lt)=>{o.value=!0,S.value=K,H.value=X,u.value=lt,U==="download"?y.value=!0:y.value=!1},R=()=>{const U=window.location.hash.slice(1);if(U){const K=decodeURIComponent(U);st.value=K}},L=ft();Un(async()=>{if(x.value=!1,R(),i.value="downloadCount",r.value="desc",s.currentTab&&(w.value=s.currentTab),app.workspace.on("resize",ut),L.value=s.app.workspace.activeLeaf.view.leaf.width,P.value=await p.getPluginTags(),await q(),s.tab){const U=JSON.parse(s.tab);U.type=="updated"&&(i.value="updateTime",await V()),U.type=="installed"&&await Y()}else w.value==="theme"?await v():await V()});const ut=()=>{L.value=s.app.workspace.activeLeaf.view.leaf.width};nn(()=>{localStorage.removeItem("pkmer-update-tab")});const it=U=>{ct.debounce(()=>{G.value=U.target.value,E()},800)()},tt=Bt(()=>m.value==="mobile"?a.value?.filter(U=>!U.isDesktopOnly)||[]:m.value==="desktop"?a.value?.filter(U=>U.isDesktopOnly)||[]:a.value||[]),_t=Bt(()=>{if(st.value==="all")return _.value;{const U=tt.value.filter(K=>K.tags?.includes(st.value));return Math.ceil(U.length/c.value)}});function Ct(){i.value="pkmerDownloadCount",r.value=r.value==="desc"?"asc":"desc",d.value=1,V()}function pt(){i.value="downloadCount",r.value=r.value==="desc"?"asc":"desc",d.value=1,V()}function vt(){i.value="pluginUpdatedTime",r.value=r.value==="desc"?"asc":"desc",d.value=1,V()}function et(){i.value="name",r.value=r.value==="desc"?"asc":"desc",d.value=1,V()}async function Y(){i.value="installed",r.value="desc",d.value=1,st.value="all";try{const U=Object.keys(s.app.plugins.manifests),{plugins:K,total:X,totalPages:lt}=await p.getInstalledPluginsPaginated(U,d.value,c.value,i.value,r.value?.toUpperCase());a.value=K,g.value=X,_.value=lt,Array.isArray(a.value)&&a.value.forEach(nt=>{const mt=s.app.plugins.manifests;nt.isInstalled=mt[nt.id]!==void 0,nt.isOutdated=nt.isInstalled&&mt[nt.id].version!==nt.version})}catch(U){console.error("Error fetching installed plugins:",U)}}async function k(){i.value="downloadCount",r.value="desc",d.value=1;try{const U=Object.keys(s.app.plugins.manifests),{plugins:K}=await p.getInstalledPluginsPaginated(U,d.value,c.value,i.value,r.value?.toUpperCase()),X=K.filter(lt=>{const nt=s.app.plugins.manifests[lt.id];return nt&&nt.version!==lt.version});a.value=X,g.value=X.length,_.value=Math.ceil(X.length/c.value),Array.isArray(a.value)&&a.value.forEach(lt=>{const nt=s.app.plugins.manifests;lt.isInstalled=nt[lt.id]!==void 0,lt.isOutdated=lt.isInstalled&&nt[lt.id].version!==lt.version})}catch(U){console.error("Error fetching outdated plugins:",U)}}const D=Bt(()=>st.value==="all"?tt.value:tt.value.filter(U=>U.tags?.includes(st.value))),l=Bt(()=>Array.isArray(a.value)?a.value:[]),A=async U=>{d.value=U,await V()},E=async()=>{C.value=!0,d.value=1,st.value="all";try{if(G.value.trim()){const{plugins:U,total:K,totalPages:X}=await p.searchPluginsPaginated(G.value,d.value,c.value,i.value||"downloadCount",r.value?.toUpperCase()||"DESC");if(a.value=U,g.value=K,_.value=X,Array.isArray(a.value)){const lt=await p.getPkmerDocs();a.value.forEach(nt=>{const mt=lt.find(Ht=>Ht.slug==nt.id);mt&&(nt.contentUrl=`https://pkmer.cn/show/${mt.uid}`,nt.tags=mt.tags,nt.chineseDescription=mt.description,nt.authorAvatar=mt.authorAvatar);const Ut=lt.find(Ht=>Ht.slug.includes(nt.id+"_readme"));Ut&&(nt.readme_zh=`https://pkmer.cn/show/${Ut.uid}`);const bt=s.app.plugins.manifests;nt.isInstalled=bt[nt.id]!==void 0,nt.isOutdated=nt.isInstalled&&bt[nt.id].version!==nt.version})}}else await V()}catch(U){console.error("Error searching plugins:",U)}finally{C.value=!1}},w=ft("plugin"),v=async()=>{C.value=!0;const U=await p.getPkmerDocs();if(h)try{const{themes:K,total:X,totalPages:lt}=await p.getThemeListPaginated(d.value,c.value,i.value||"downloadCount",r.value?.toUpperCase()||"DESC");a.value=K,g.value=X,_.value=lt,Array.isArray(a.value)?a.value.forEach(nt=>{const mt=U.find(bt=>bt.slug==nt.name.replace(/\s+/g,"-").toLowerCase());mt&&(nt.contentUrl=`https://pkmer.cn/show/${mt.uid}`,nt.tags=mt.tags,nt.chineseDescription=mt.description,nt.authorAvatar=mt.authorAvatar);const Ut=s.app.customCss.themes;nt.isInstalled=Ut[nt.name]!==void 0,nt.isOutdated=nt.isInstalled&&Ut[nt.name].version!==nt.version}):a.value=[]}catch(K){console.error("Error loading themes:",K)}else a.value=await p.getTop20Themes(),Array.isArray(a.value)?a.value.forEach(K=>{const X=U.find(nt=>nt.slug==K.name.replace(/\s+/g,"-").toLowerCase());X&&(K.contentUrl=`https://pkmer.cn/show/${X.uid}`,K.tags=X.tags,K.chineseDescription=X.description,K.authorAvatar=X.authorAvatar);const lt=s.app.customCss.themes;K.isInstalled=lt[K.name]!==void 0,K.isOutdated=K.isInstalled&&lt[K.name].version!==K.version}):a.value=[];C.value=!1};mn(()=>s.currentTab,U=>{U&&(w.value=U,U==="theme"&&a.value?.length===0&&T())},{immediate:!0});async function T(){if(w.value==="theme"){C.value=!0;try{await v()}catch(U){console.error("Error loading theme data:",U)}finally{C.value=!1}}}const $=new Os(s.app,s.settings),B=ft(""),O=ft(""),M=(U,K,X)=>{o.value=!0,B.value=K,O.value=X,U==="download"?y.value=!0:y.value=!1},J=async()=>{o.value=!1,new ct.Notice("正在下载主题，请稍后...",3e3),await $.downloadThemeToThemeFolder(B.value,O.value)&&a.value.forEach(K=>{K.name===B.value&&(K.isInstalled=!0)})},W=async()=>{o.value=!1,new ct.Notice("正在更新主题，请稍后...",3e3),await $.updateThemeToExistThemeFolder(B.value,O.value)&&a.value.forEach(K=>{K.name===B.value&&(K.isOutdated=!1)})};return(U,K)=>(ht(),wt(Dt,null,[$t(ui,{settings:s.settings,isLogin:Pt(h),app:s.app},null,8,["settings","isLogin","app"]),b("main",Cc,[b("div",Tc,[b("div",Ic,[b("div",Ec,[b("div",Sc,[b("div",Ac,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:pt},Oc,2)]),b("div",zc,[b("button",{class:At([{active:i.value=="pluginUpdatedTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:vt},Dc,2)]),b("div",$c,[b("button",{class:At([{active:i.value=="name"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:et},Uc,2)]),b("div",Mc,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按插件热度",flow:"down",onClick:Ct},Fc,2)]),b("div",jc,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装插件",flow:"down",onClick:Y},[Nc,b("span",Hc,kt(Z.value),1)],2)]),b("div",{class:"widget-item",tooltip:m.value=="mobile"?"支持移动端的插件":m.value=="desktop"?"仅支持桌面端的插件":"所有终端"},[It(b("select",{"onUpdate:modelValue":K[0]||(K[0]=X=>m.value=X),class:"block border px-2 w-18 text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800 rounded-md shadow-sm focus:outline-none"},qc,512),[[Ra,m.value]])],8,Wc),b("div",Jc,[b("div",Yc,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search plugins...",onInput:it,value:G.value},null,40,Gc),Xc])])])])])]),b("div",Qc,[It(b("button",{onClick:k,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Ft(" 发现 "+kt(j.value)+" 个插件更新！【点我查看】 ",1),b("button",{onClick:Nn(F,["stop"]),class:"ml-2 px-3 shadow-none"},nu,8,tu)],512),[[St,j.value&&!x.value]])]),b("section",su,[b("div",ru,[b("div",iu,[b("div",ou,[b("div",au,[$t(Ja,{"active-category":st.value,pluginList:l.value,onUpdateActiveCategory:Q},null,8,["active-category","pluginList","onUpdateActiveCategory"])]),b("div",lu,[C.value?(ht(),wt("div",cu,du)):(ht(),wt("div",{key:1,class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":L.value<=768&&L.value>0,"!grid-cols-2":L.value>768&&L.value<1024,"!grid-cols-3":L.value>1024}])},[(ht(!0),wt(Dt,null,Mn(D.value,X=>(ht(),wt("div",{key:w.value==="theme"?X.name:X.id},[w.value==="plugin"?(ht(),In(Fl,{key:0,app:s.app,"plugin-info":X,isLogin:Pt(h),onDownloadUpdatePlugin:rt},null,8,["app","plugin-info","isLogin","onDownloadUpdatePlugin"])):w.value==="theme"?(ht(),In(li,{key:1,app:s.app,"theme-info":X,isLogin:Pt(h),onDownloadUpdateTheme:M},null,8,["app","theme-info","isLogin"])):ue("",!0)]))),128))],2)),b("div",fu,[b("div",hu,[b("div",pu,[Pt(d)>1?(ht(),wt("button",{key:0,onClick:K[1]||(K[1]=X=>A(Pt(d)-1)),class:"px-3 py-1 border rounded hover:bg-gray-100 dark:hover:bg-muted-700"}," 上一页 ")):ue("",!0),b("span",mu," 第 "+kt(Pt(d))+" 页 / 共 "+kt(_t.value)+" 页 ",1),Pt(d)<_t.value?(ht(),wt("button",{key:1,onClick:K[2]||(K[2]=X=>A(Pt(d)+1)),class:"px-3 py-1 border rounded hover:bg-gray-100 dark:hover:bg-muted-700"}," 下一页 ")):ue("",!0)])])])])])])])])]),It(b("div",gu,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:K[4]||(K[4]=X=>o.value=!1),"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",vu,[wu,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:K[3]||(K[3]=X=>o.value=!1)},bu)]),b("section",yu,[b("div",xu,[b("h3",ku,[Cu,Ft(" 即将安装...."+kt(S.value.toUpperCase()),1)]),b("div",null,[b("p",Tu,[Ft(" 插件来源： "),b("span",Iu,kt(u.value==="official"?"Obsidian官方商城":"社区专供"),1)]),Eu]),b("div",Su,[b("div",Au,[b("div",Pu,[w.value==="plugin"?(ht(),wt(Dt,{key:0},[y.value?(ht(),wt("h2",{key:0,onClick:at,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(ht(),wt("h2",{key:1,onClick:N,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))],64)):w.value==="theme"?(ht(),wt(Dt,{key:1},[y.value?(ht(),wt("h2",{key:0,onClick:J,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(ht(),wt("h2",{key:1,onClick:W,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))],64)):ue("",!0)])]),b("div",{class:"flex md:p-4 md:w-1/2"},[b("div",{class:"flex-grow"},[b("h2",{onClick:ot,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[St,o.value]])],64))}});const zu={class:"relative w-full flex justify-center gap-2 flex-wrap"},Bu=["onClick"],Du=ge({__name:"ThemeToolbar",props:{themeList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t;let n=[];const s=Bt(()=>{Array.isArray(e.themeList)&&e.themeList.forEach(o=>{if(o.tags&&typeof o.tags=="string"){let a=o.tags.split(",").map(c=>c.trim());a=a.filter(c=>c!==""),a.length>0&&n.push(a[0])}});let r=[];return Array.isArray(e.themeList)&&e.themeList.forEach(o=>{if(o.modes&&typeof o.modes=="string"){let a=o.modes.split(",").map(c=>c.trim());a=a.filter(c=>c!==""),a.length>0&&r.push(a[0])}}),n.concat(r)}),i=Bt(()=>Array.from(new Set(s.value)));return(r,o)=>(ht(),wt("div",zu,[b("button",{class:At(["h-6 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:o[0]||(o[0]=a=>r.$emit("update-active-category","all"))}," All ",2),(ht(!0),wt(Dt,null,Mn(i.value,a=>(ht(),wt("div",{class:"plugin-item",key:a},[b("button",{class:At(["flex-1 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory===a?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{r.$emit("update-active-category",a)}},kt(a),11,Bu)]))),128))]))}}),$u={"data-pagefind-body":"",class:"w-full"},Lu={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Uu={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Mu={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Ru={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Fu={class:"widget-item"},ju=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Nu=[ju],Hu={class:"widget-item"},Wu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Zu=[Wu],Ku={class:"widget-item"},Vu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),qu=[Vu],Ju={class:"widget-item"},Yu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Gu=[Yu],Xu={class:"widget-item"},Qu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),td={class:"num"},ed={class:"relative w-full"},nd={class:"relative group"},sd=["value"],rd=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),id={class:"text-right"},od=["onClick"],ad=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),ld=[ad],cd={class:"w-full bg-muted-100 dark:bg-muted-1000"},ud={class:"w-full max-w-7xl mx-auto"},dd={class:"w-full flex items-center overflow-hidden"},fd={class:"w-full h-full flex flex-col justify-between md:px-6 pb-16 pt-4"},hd={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},pd={class:"flex flex-col gap-12 py-12"},md={class:"w-full flex items-center justify-center p-6 -m-3"},gd={class:"w-full max-w-[210px] pt-16"},vd=b("div",null,"Load More",-1),wd=[vd],_d={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},bd=b("h5",{class:"mr-3 max-w-none"},null,-1),yd=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),xd=[yd],kd={class:"body-font"},Cd={class:"container md:px-5 py-4 mx-auto"},Td={class:"text-2xl font-medium title-font text-center mb-6"},Id=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Ed=b("div",null,[b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),Sd={class:"block md:flex flex-wrap sm:-m-4 -mx-4 md:-mb-10 md:-mt-4 md:space-y-0"},Ad={class:"md:p-4 md:w-1/2 flex"},Pd={class:"flex-grow"},Od=ge({__name:"ThemeMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=ft(""),r=ft(!1),o=ft([]);let a=ft(24),c=ft(1);const d=ft(!1),y=ft(!0),m=new Ce(s.settings.token),p=new Os(s.app,s.settings),f=([e,n]=kn(()=>m.isUserLogin()),e=await e,n(),e),x=()=>{d.value=!0,L()},h=async()=>{const et=await m.getPkmerDocs();if(f)try{o.value=await m.getThemeList(),o.value=o.value.sort((Y,k)=>k.downloadCount-Y.downloadCount),Array.isArray(o.value)?o.value.forEach(Y=>{const k=et.find(l=>l.slug==Y.name.replace(/\s+/g,"-").toLowerCase());k&&(Y.contentUrl=`https://pkmer.cn/show/${k.uid}`);const D=s.app.customCss.themes;Y.isInstalled=D[Y.name]!==void 0,Y.isOutdated=Y.isInstalled&&D[Y.name].version!==Y.version}):o.value=[]}catch(Y){console.error("Error loading themes:",Y)}else o.value=await m.getTop20Themes(),Array.isArray(o.value)?o.value.forEach(Y=>{const k=et.find(l=>l.slug==Y.name.replace(/\s+/g,"-").toLowerCase());k&&(Y.contentUrl=`https://pkmer.cn/show/${k.uid}`);const D=s.app.customCss.themes;Y.isInstalled=D[Y.name]!==void 0,Y.isOutdated=Y.isInstalled&&D[Y.name].version!==Y.version}):o.value=[]},g=Bt(()=>{if(o.value)return o.value.filter(k=>k.isInstalled===!0).length}),_=Bt(()=>o.value?o.value.filter(k=>k.isOutdated===!0).length:!1),C=ft(""),P=ft("all"),I=ft(""),z=ft(""),Z=ft(0),j=et=>{ct.debounce(()=>{C.value=et.target.value},800)()},V=()=>{r.value=!1},F=et=>{P.value=et},G=(et,Y,k)=>{r.value=!0,I.value=Y,z.value=k,et==="download"?y.value=!0:y.value=!1},st=async()=>{r.value=!1,new ct.Notice("正在更新主题，请稍后...",3e3),await p.updateThemeToExistThemeFolder(I.value,z.value)&&(o.value=o.value.map(Y=>(Y.name==I.value&&(Y.isOutdated=!1),Y)))},S=async()=>{r.value=!1,new ct.Notice("正在下载主题，请稍后...",3e3),await p.downloadThemeToThemeFolder(I.value,z.value)&&(o.value=o.value.map(Y=>(Y.name==I.value&&(Y.isInstalled=!0),Y)))},H=()=>{r.value=!1},u=()=>{const et=window.location.hash.slice(1);if(et){const Y=decodeURIComponent(et);P.value=Y}},q=ft();Un(async()=>{if(u(),await h(),i.value="pkmerDownloadCount",rt.value="asc",app.workspace.on("resize",at),q.value=s.app.workspace.activeLeaf.view.leaf.width,f&&(Z.value=await m.getDownloadCount()),s.tab){const et=JSON.parse(s.tab);et.type=="tupdated"&&_t(),et.type=="tupdated"&&tt()}});const at=()=>{q.value=s.app.workspace.activeLeaf.view.leaf.width};nn(()=>{window.removeEventListener("resize",at)});const N=Bt(()=>{const et=C.value.toLowerCase().trim();return et.length<1?o.value:o.value.filter(Y=>Y.name.toLowerCase().includes(et)||Y.author.toLowerCase().includes(et)||Y.chineseDescription?.toLowerCase().includes(et)||Y.tags?.toLowerCase().includes(et))}),ot=Bt(()=>Math.ceil(N.value?.length/a.value)),Q=Bt(()=>c.value<ot.value),rt=ft("");function R(){i.value="pkmerDownloadCount",rt.value=rt.value==="asc"?"desc":"asc"}function L(){i.value="downloadCount",rt.value=rt.value==="asc"?"desc":"asc"}function ut(){i.value="updateTime",rt.value=rt.value==="asc"?"desc":"asc"}function it(){i.value="fileName",rt.value=rt.value==="asc"?"desc":"asc"}function tt(){i.value="installed",rt.value=rt.value==="asc"?"desc":"asc"}function _t(){i.value="updated",rt.value=rt.value==="asc"?"desc":"asc"}const Ct=Bt(()=>{let et=[];return P.value=="all"?i.value==="downloadCount"?rt.value==="asc"?et=N.value.sort((Y,k)=>Y.downloadCount-k.downloadCount):et=N.value.sort((Y,k)=>k.downloadCount-Y.downloadCount):i.value==="updateTime"?rt.value==="asc"?et=N.value.sort((Y,k)=>new Date(Y.updatedTime).getTime()-new Date(k.updatedTime).getTime()):et=N.value.sort((Y,k)=>new Date(k.updatedTime).getTime()-new Date(Y.updatedTime).getTime()):i.value==="fileName"?rt.value==="asc"?et=N.value.sort((Y,k)=>Y.name.localeCompare(k.name)):et=N.value.sort((Y,k)=>k.name.localeCompare(Y.name)):i.value==="pkmerDownloadCount"?rt.value==="asc"?et=N.value.sort((Y,k)=>k.pkmerDownloadCount-Y.pkmerDownloadCount):et=N.value.sort((Y,k)=>Y.pkmerDownloadCount-k.pkmerDownloadCount):i.value==="installed"?et=N.value.filter(Y=>Y.isInstalled):i.value==="updated"?et=N.value.filter(Y=>Y.isOutdated):et=N.value?.slice(0,c.value*a.value):(et=N.value.filter(Y=>Y.tags?.toLowerCase().includes(P.value)||Y.modes?.toLowerCase().includes(P.value)),i.value==="downloadCount"?rt.value==="asc"?et=et.sort((Y,k)=>Y.downloadCount-k.downloadCount):et=et.sort((Y,k)=>k.downloadCount-Y.downloadCount):i.value==="updateTime"?rt.value==="asc"?et=et.sort((Y,k)=>new Date(Y.updatedTime).getTime()-new Date(k.updatedTime).getTime()):et=et.sort((Y,k)=>new Date(k.updatedTime).getTime()-new Date(Y.updatedTime).getTime()):i.value==="fileName"?rt.value==="asc"?et=et.sort((Y,k)=>Y.name.localeCompare(k.name)):et=et.sort((Y,k)=>k.name.localeCompare(Y.name)):i.value==="pkmerDownloadCount"&&(rt.value==="asc"?et=et.sort((Y,k)=>Y.pkmerDownloadCount-k.pkmerDownloadCount):et=et.sort((Y,k)=>k.pkmerDownloadCount-Y.pkmerDownloadCount))),et?.slice(0,c.value*a.value)}),pt=Bt(()=>Array.isArray(N.value)?N.value:[]),vt=()=>{const et=c.value*a.value,Y=et+a.value,k=Ct.value?.slice(et,Y);c.value++,o.value=[...o.value,...k]};return(et,Y)=>(ht(),wt(Dt,null,[$t(ui,{settings:s.settings,isLogin:Pt(f),app:s.app},null,8,["settings","isLogin","app"]),b("main",$u,[b("div",Lu,[b("div",Uu,[b("div",Mu,[b("div",Ru,[b("div",Fu,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:L},Nu,2)]),b("div",Hu,[b("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:ut},Zu,2)]),b("div",Ku,[b("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:it},qu,2)]),b("div",Ju,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按主题热度",flow:"down",onClick:R},Gu,2)]),b("div",Xu,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装主题",flow:"down",onClick:tt},[Qu,b("span",td,kt(g.value),1)],2)]),b("div",ed,[b("div",nd,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search themes...",onInput:j,value:C.value},null,40,sd),rd])])])])])]),b("div",id,[It(b("button",{onClick:_t,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Ft(" 发现 "+kt(_.value)+" 个主题更新！【点我查看】 ",1),b("button",{onClick:Nn(x,["stop"]),class:"ml-2 px-3 shadow-none"},ld,8,od)],512),[[St,_.value]])]),b("section",cd,[b("div",ud,[b("div",dd,[b("div",fd,[b("div",hd,[$t(Du,{"active-category":P.value,themeList:pt.value,onUpdateActiveCategory:F},null,8,["active-category","themeList","onUpdateActiveCategory"])]),b("div",pd,[b("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":q.value<=768&&q.value>0,"!grid-cols-2":q.value>768&&q.value<1024,"!grid-cols-3":q.value>1024}])},[(ht(!0),wt(Dt,null,Mn(Ct.value,k=>(ht(),wt("div",{key:k.id},[$t(li,{app:s.app,"theme-info":k,isLogin:Pt(f),onDownloadUpdateTheme:G},null,8,["app","theme-info","isLogin","onDownloadUpdateTheme"])]))),128))],2),b("div",md,[b("div",gd,[Q.value?(ht(),wt("button",{key:0,onClick:vt,class:"w-full inline-flex items-center justify-center gap-2 font-sans font-semibold bg-white dark:bg-muted-700 text-muted-800 dark:text-white border border-muted-300 dark:border-muted-600 relative px-6 py-4 rounded-lg tw-accessibility hover:shadow-xl hover:shadow-muted-400/20 transition-all duration-300"},wd)):ue("",!0)])])])])])])])]),It(b("div",_d,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:H,"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",{class:"flex items-center justify-between"},[bd,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:H},xd)]),b("section",kd,[b("div",Cd,[b("h3",Td,[Id,Ft(" 即将安装...."+kt(I.value.toUpperCase()),1)]),Ed,b("div",Sd,[b("div",Ad,[b("div",Pd,[y.value?(ht(),wt("h2",{key:0,onClick:S,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(ht(),wt("h2",{key:1,onClick:st,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),b("div",{class:"md:p-4 md:w-1/2 flex"},[b("div",{class:"flex-grow"},[b("h2",{onClick:V,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[St,r.value]])],64))}});const zd={class:"w-full"},Bd={class:"flex flex-wrap md:content-center"},Dd={class:"flex items-center justify-between md:px-8 mx-auto font-sans logo scale-90 md:scale-125 max-w-7xl"},$d={class:"flex flex-wrap items-center justify-center w-full mx-auto max-w-7xl"},Ld={class:"items-center w-auto gap-6 basis-0"},Ud={href:"https://pkmer.cn",class:"flex items-center gap-3 no-underline text-inherit"},Md={class:"transition-all duration-300 text-primary-600"},Rd=ca('<g><path d="M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z" style="" fill="#ffc170" class=""></path><path d="M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696" style="" fill="#e1a05a" data-original="#ffd6a0" class=""></path><path d="M0 128h55.652v33.391H0z" style="" fill="#a0bdd4" class=""></path><path d="M13.053 51.94h55.65v33.391h-55.65z" style="" transform="rotate(-160.527 40.878 68.636)" fill="#a0bdd4" class=""></path><path d="M456.348 128H512v33.391h-55.652z" style="" fill="#a0bdd4" class=""></path><path d="M454.411 40.807h33.391v55.65h-33.391z" style="" transform="rotate(-109.469 471.111 68.636)" fill="#a0bdd4" class=""></path><path d="m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z" style="" fill="#f8f8f8" class=""></path><path d="m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z" style="" fill="#fef5ea" class=""></path></g>',1),Fd=[Rd],jd=b("span",{class:"font-sans text-lg font-extrabold tracking-widest uppercase whitespace-nowrap feat dark:text-muted-100"},"Obsidian PKMer Market",-1),Nd={class:"pkmer-tab-container"},Hd={class:"mb-5 flex list-none flex-row flex-wrap border-b-0 pl-0"},Wd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Zd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Kd={class:"pkmer-tab-content"},Vd={key:0,class:"opacity-100 transition-opacity duration-150 ease-linear"},qd={key:1,class:"opacity-100 transition-opacity duration-150 ease-linear"},Jd=b("h1",null,"Loading...",-1),Yd=b("h2",null,"如果长时间加载，请确保网络通常，并关闭网络代理。",-1),Gd=ge({__name:"PluginMarketView",props:{settings:{},app:{}},setup(t){const e=t,n=ft("plugin"),s=ft(),i=ft({type:"",count:0}),r=o=>{n.value=o};return Un(()=>{s.value=localStorage.getItem("pkmer-update-tab"),s.value!==null&&s.value!==""&&(i.value=JSON.parse(s.value),i.value.type=="tupdated"&&r("theme"))}),nn(()=>{localStorage.removeItem("pkmer-update-tab")}),(o,a)=>(ht(),wt(Dt,null,[b("div",zd,[b("div",Bd,[b("div",Dd,[b("div",$d,[b("div",Ld,[b("a",Ud,[b("div",Md,[(ht(),wt("svg",{class:At(["fill-current w-7 h-7","w-7 h-7"]),width:"1.75rem",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},Fd))]),jd])])])])])]),b("div",Nd,[b("ul",Hd,[b("li",{class:At(["flex-auto text-center",{active:n.value==="plugin"}]),onClick:a[0]||(a[0]=c=>r("plugin"))},[b("span",Wd,[Ft(" 插件市场 "),It(b("span",{class:"num bradge"},kt(i.value.count),513),[[St,i.value.type=="updated"&&i.value.count>0]])])],2),b("li",{class:At(["flex-auto text-center relative",{active:n.value==="theme"}]),onClick:a[1]||(a[1]=c=>r("theme"))},[b("span",Zd,[Ft(" 主题市场 "),It(b("span",{class:"num bradge"},kt(i.value.count),513),[[St,i.value.type=="tupdated"&&i.value.count>0]])])],2)]),b("div",Kd,[(ht(),In(ko,null,{default:ts(()=>[n.value==="plugin"?(ht(),wt("div",Vd,[$t(Ou,{settings:e.settings,app:e.app,tab:s.value,"current-tab":n.value},null,8,["settings","app","tab","current-tab"])])):n.value==="theme"?(ht(),wt("div",qd,[$t(Od,{settings:e.settings,app:e.app,tab:s.value,"current-tab":n.value},null,8,["settings","app","tab","current-tab"])])):ue("",!0)]),fallback:ts(()=>[Jd,Yd]),_:1}))])])],64))}});const ls="pkmer-downloader";class Xd extends ct.ItemView{plugin;settings;constructor(e,n){super(e),this.plugin=n,this.settings=n.settings}getIcon(){return"bookmark"}getDisplayText(){return"Pkmer Market"}getViewType(){return ls}async onOpen(){const{contentEl:e}=this;console.log("welcome Pkmer Market"),Wa(Gd,{settings:this.settings,app:this.app}).mount(e)}}class dr{modal;settingTab;constructor(e){this.settingTab=e;const{remote:n}=require("electron"),{BrowserWindow:s}=n;this.modal=new s({parent:n.getCurrentWindow(),width:630,height:840,show:!1}),this.modal.once("ready-to-show",()=>{this.modal.setTitle("登录Pkmer~"),this.modal.setMenu(null),this.modal.show()}),this.modal.webContents.on("will-navigate",()=>{this.modal.webContents.executeJavaScript("localStorage.getItem('pkmer-token')").then(i=>{i&&(this.settingTab.saveToken(i),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView())})})}async doLogin(){try{await this.modal.loadURL("https://pkmer.cn/products/signIn/")}catch(e){console.log(e)}}async Loginout(){try{await this.modal.loadURL("https://pkmer.cn/products/UserProfile/"),this.modal.webContents.executeJavaScript("localStorage.removeItem('pkmer-token')").then(()=>{this.settingTab.saveToken(""),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView()})}catch(e){console.log(e),new ct.Notice("你没登录咋退出？")}}onClose(){this.modal.close()}}class Qd extends ct.PluginSettingTab{plugin;constructor(e,n){super(e,n),this.plugin=n}display(){const{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian PKMer Market"}),e.setAttribute("data-type","pkmer-downloader"),ct.Platform.isDesktopApp&&(this.plugin.settings.token?this.showLoginOut():this.showLogin()),new ct.Setting(e).setName("Token").setDesc("Default token for pkmer downloader").addText(s=>s.setPlaceholder("登录获取token").setValue(this.plugin.settings.token).setDisabled(!1).onChange(async i=>{this.plugin.settings.token=i,await this.plugin.saveSettings()})),ct.Platform.isDesktopApp&&new ct.Setting(e).setName("Tips").setDesc("如果登录后，仍然提示登录，请退出重新登录PKMER "),ct.Platform.isMobileApp&&new ct.Setting(e).setName("Tips").setDesc("移动端需要您手动在电脑端登录获取token后复制到输入框中 "),new ct.Setting(e).setName("🥚打开PKMer Market").setDesc("点击开始挑选心爱的插件和主题吧").addButton(s=>{s.setIcon("download").setButtonText("进入").setClass("px-5").setCta().onClick(()=>{app.setting.close(),setTimeout(()=>{this.plugin.openView("")},100)})}),e.createEl("hr",{cls:"mt-2"});const n=e.createEl("div",{cls:"mt-4"});n.createEl("a",{text:"🥚PKMer.cn",href:"https://pkmer.cn"}),n.createEl("span",{text:" | "}),n.createEl("a",{text:"👤个人中心",href:"https://pkmer.cn/products/UserProfile/"})}showLogin(){new ct.Setting(this.containerEl).setName("登录Pkmer").addButton(e=>e.setButtonText("登录").setCta().onClick(async()=>{e.setDisabled(!0),await new dr(this).doLogin(),this.display()}))}showLoginOut(){new ct.Setting(this.containerEl).setName("退出登录").addButton(e=>e.setButtonText("退出").setCta().onClick(async()=>{e.setDisabled(!0),await new dr(this).Loginout(),this.display()}))}saveToken(e){this.plugin.settings.token=e,this.plugin.saveSettings()}}let tf=class{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1}api;isUserLogin;async getPluginStatus(){try{if(this.isUserLogin=await this.api.isUserLogin(),!this.isUserLogin)return{installedCount:0,updatedCount:0};const e=Object.keys(this.app.plugins.manifests),n=e.length;if(n===0)return{installedCount:0,updatedCount:0};const{plugins:s}=await this.api.getInstalledPluginsPaginated(e,1,n,"downloadCount","DESC"),i=s.filter(r=>{const o=this.app.plugins.manifests[r.id];return o&&o.version!==r.version}).length;return{installedCount:n,updatedCount:i}}catch(e){return console.error("Error getting plugin status:",e),{installedCount:0,updatedCount:0}}}};class ef{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allThemeList=[],this.isLoaded=!1}api;isUserLogin;allThemeList;isLoaded;async loadAllThemes(){if(!this.isLoaded)try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getThemeList();this.allThemeList=Array.isArray(e)?e:[],await this.updateThemeStatus(),this.isLoaded=!0}}catch(e){console.error("Error loading themes:",e)}}async updateThemeStatus(){const e=this.app.customCss.themes;this.allThemeList.forEach(n=>{n.isInstalled=e[n.name]!==void 0,n.isOutdated=n.isInstalled&&e[n.name].version!==n.version})}async getThemeStatus(){await this.loadAllThemes();const e=this.allThemeList.filter(s=>s.isInstalled).length,n=this.allThemeList.filter(s=>s.isOutdated).length;return{tinstalledCount:e,tupdatedCount:n}}}const nf={token:""};class sf extends ct.Plugin{settings;statusBarIconEl;async onload(){await this.loadSettings(),localStorage.removeItem("pkmer-update-tab"),this.registerCustomURI(),this.registerCustomCommands(),this.registerCustomRibbon(),this.addStatusBarIcon(),await this.reloadStatusBarHandler(),this.addSettingTab(new Qd(this.app,this)),this.registerView(ls,e=>new Xd(e,this)),addEventListener("reload-statusbar",async()=>{this.reloadStatusBarHandler()})}reloadStatusBarHandler=async()=>{await this.updateStatusBar("")};onunload(){removeEventListener("reload-statusbar",this.reloadStatusBarHandler)}async loadSettings(){this.settings=Object.assign({},nf,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerCustomURI(){this.registerObsidianProtocolHandler("pkmer-installer",async e=>{const n=e.pluginID,s=e.themeID,i=e.version;if(!this.settings.token){new ct.Notice("请先登录获取token",5e3),app.setting.open(),app.setting.openTabById("PKMer");return}if(n)try{new ct.Notice("正在下载插件，请稍后...",3e3),await new Ps(app,this.settings).downloadPluginToPluginFolder(n,i)}catch{new ct.Notice("下载失败，请检查网络")}if(s)try{new ct.Notice("正在安装主题，请稍后...",3e3),await new Os(app,this.settings).downloadThemeToThemeFolder(s,i)}catch{new ct.Notice("下载失败，请检查网络")}})}registerCustomCommands(){this.addCommand({id:"open-pkmer-market-view",name:"Open Pkmer Market View",callback:()=>{this.openView("")}})}registerCustomRibbon(){this.addRibbonIcon("download","Open Pkmer Market",()=>{this.openView("")})}addStatusBarIcon(){this.statusBarIconEl=this.addStatusBarItem(),this.statusBarIconEl.addClass("pkmer-statusbar"),this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","PKMer插件市场"),this.registerDomEvent(this.statusBarIconEl,"click",()=>{this.updateStatusBar("statusbar")})}async updateStatusBar(e){const n=new tf(app,this.settings),s=new ef(app,this.settings),{installedCount:i,updatedCount:r}=await n.getPluginStatus(),{tinstalledCount:o,tupdatedCount:a}=await s.getThemeStatus();if(r>0||a>0){if(this.statusBarIconEl.setAttribute("aria-label-position","top"),this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+a+"/"+o),this.statusBarIconEl.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>
            <svg xmlns="http://www.w3.org/2000/svg"  style="margin-top: -12px;margin-left: -3px;"  width="1em" height="1em" viewBox="0 0 15 15"><path fill="orange" d="M9.875 7.5a2.375 2.375 0 1 1-4.75 0a2.375 2.375 0 0 1 4.75 0"/></svg> `,e==="statusbar")if(r>0){const c={type:"updated",count:r};this.openView(JSON.stringify(c))}else{const c={type:"tupdated",count:a};this.openView(JSON.stringify(c))}}else this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+a+"/"+o),e==="statusbar"&&this.openView("")}openView(e){let n=!1;app.workspace.iterateAllLeaves(s=>{try{if(s.getViewState().type==="pkmer-downloader"){n=!0,localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace.setActiveLeaf(s),this.app.workspace.activeLeaf.rebuildView()},300);return}}catch(i){console.error("Error occurred while processing leaf:",i)}}),n||(localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace?.getLeaf()?.setViewState({active:!0,type:ls})},300))}}module.exports=sf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

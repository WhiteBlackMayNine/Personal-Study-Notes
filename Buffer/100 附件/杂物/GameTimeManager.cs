using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using GGG.Tool.Singleton;
using System;

public class GameTimeManager : Singleton<GameTimeManager>
{

    #region ????

    [SerializeField] private int _initMaxTimerCount;//?????????????????
    private Queue<GameTimer> _notWorkerTimer = new Queue<GameTimer>();//??????????????????????
    private List<GameTimer> _workeringTimer = new List<GameTimer>();//?????????????????????????

    //_workeringTimer????????????????????????????????? ?????? List
    #endregion

    #region ???????????

    private void Start()
    {
        InitTimerManager();
    }

    private void Update()
    {
        UpdateWorkingTimer();
    }

    #endregion

    #region ???????

    #region ??????????

    /// <summary>
    /// ??????????
    /// </summary>
    private void InitTimerManager()
    {
        for (int i = 0; i < _initMaxTimerCount; i++)
        {
            CreatTimer();
        }
    }

    #endregion

    #region ?????????????

    /// <summary>
    /// ?????????????
    /// </summary>
    private void CreatTimer()
    {
        //new ???????
        var timer = new GameTimer();

        //??new ?????????????????
        _notWorkerTimer.Enqueue(timer);
    }

    #endregion

    #region ??????????

    /// <summary>
    /// ????????
    /// </summary>
    /// <param name="time"></param>
    /// <param name="task"></param>
    public void TryGetTimer(float time, Action task)
    {
        if (_notWorkerTimer.Count == 0)
        {
            //???????????????????0 ???????????????????????

            //????????????
            CreatTimer();
            //??????????????????????
            var timer = _notWorkerTimer.Dequeue();
            //????????????????????????????????
            timer.StartTimer(time, task);
            //??? ????????????????????
            _workeringTimer.Add(timer);
        }
        else
        {
            //????????????????????

            //?????????????????
            var timer = _notWorkerTimer.Dequeue();
            //????????????????????????????????
            timer.StartTimer(time, task);
            //??? ????????????????????
            _workeringTimer.Add(timer);
        }
    }

    #endregion

    #region ???????????

    /// <summary>
    /// ????????
    /// </summary>
    private void UpdateWorkingTimer()
    {
        if (_workeringTimer.Count == 0)
        {
            //????????????????????0 ???????????????????  
            //????????????

            return;
        }

        for (int i = 0; i < _workeringTimer.Count; i++)
        {
            if (_workeringTimer[i].GetTimerState() == TimerState.WORKING)
            {
                //???????????i??????????????????  ???? ??????

                //?????????????????
                _workeringTimer[i].UpdateTimer();
            }
            else
            {
                //????????? ???????????????i?????????????????????

                //????????????????????????
                _notWorkerTimer.Enqueue(_workeringTimer[i]);
                //?????????
                _workeringTimer[i].ResetTimer();
                //???????????????????????????????
                _workeringTimer.Remove(_workeringTimer[i]);
            }
        }
    }

    #endregion

    #endregion

}

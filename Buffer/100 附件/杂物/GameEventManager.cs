using System.Collections.Generic;
using System;
using GGG.Tool;
using GGG.Tool.Singleton;
using UnityEngine;

public class GameEventManager : SingletonNonMono<GameEventManager>
{

    private Dictionary<string, IEventHelp> _eventCenter = new Dictionary<string, IEventHelp>();

    #region ???IEventHelp
    private interface IEventHelp
    {
        //??д?????? ???????????????
        //?????????????????????????
        //?????? ?????????????????????????????????治???д?????
        //????????????????
    }

    #endregion

    #region EventHelp

    //??????ε?
     class EventHelp : IEventHelp
    {
        private event Action _action;//??????????????????????
        public EventHelp(Action action)//??????
        {
            //?????????????????????????????????
            _action = action;
        }

        /// <summary>
        /// ???????????
        /// </summary>
        /// <param name="action"></param>
        public void AddCall(Action action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        /// <summary>
        /// ???????
        /// </summary>
        public void Call()
        {
            _action?.Invoke();
        }

        /// <summary>
        /// ??????
        /// </summary>
        /// <param name="action"></param>
        public void Remove(Action action)
        {
            _action -= action;
        }
    }
    //???????????
    private class EventHelp<T> : IEventHelp
    {
        private event Action<T> _action;//??????????????????????

        public EventHelp(Action<T> action)
        {
            //?????????????????????????????????
            _action = action;
        }

        //??????????????
        public void AddCall(Action<T> action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        //???????
        public void Call(T value)
        {
            _action?.Invoke(value);
        }

        //??????
        public void Remove(Action<T> action)
        {
            _action -= action;
        }
    }
    //????????????
    private class EventHelp<T1, T2> : IEventHelp
    {
        private event Action<T1, T2> _action;//??????????????????????

        public EventHelp(Action<T1, T2> action)
        {
            //?????????????????????????????????
            _action = action;
        }

        //??????????????
        public void AddCall(Action<T1, T2> action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        //???????
        public void Call(T1 value, T2 value1)
        {
            _action?.Invoke(value, value1);
        }

        //??????
        public void Remove(Action<T1, T2> action)
        {
            _action -= action;
        }
    }
    //????ж???????????????????
    private class EventHelp<T1, T2, T3> : IEventHelp
    {
        private event Action<T1, T2, T3> _action;//??????????????????????

        public EventHelp(Action<T1, T2, T3> action)
        {
            //?????????????????????????????????
            _action = action;
        }

        //??????????????
        public void AddCall(Action<T1, T2, T3> action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        //???????
        public void Call(T1 value, T2 value1, T3 value2)
        {
            _action?.Invoke(value, value1, value2);
        }

        //??????
        public void Remove(Action<T1, T2, T3> action)
        {
            _action -= action;
        }
    }
    private class EventHelp<T1, T2, T3, T4> : IEventHelp
    {
        private event Action<T1, T2, T3, T4> _action;//??????????????????????

        public EventHelp(Action<T1, T2, T3, T4> action)
        {
            //?????????????????????????????????
            _action = action;
        }

        //??????????????
        public void AddCall(Action<T1, T2, T3, T4> action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        //???????
        public void Call(T1 value, T2 value1, T3 value2, T4 value3)
        {
            _action?.Invoke(value, value1, value2, value3);
        }

        //??????
        public void Remove(Action<T1, T2, T3, T4> action)
        {
            _action -= action;
        }
    }
    private class EventHelp<T1, T2, T3, T4, T5> : IEventHelp
    {
        private event Action<T1, T2, T3, T4, T5> _action;//??????????????????????

        public EventHelp(Action<T1, T2, T3, T4, T5> action)
        {
            //?????????????????????????????????
            _action = action;
        }

        //??????????????
        public void AddCall(Action<T1, T2, T3, T4, T5> action)//?????????????????????????????????????????New???
        {
            _action += action;
        }

        //???????
        public void Call(T1 value, T2 value1, T3 value2, T4 value3, T5 value4)
        {
            _action?.Invoke(value, value1, value2, value3, value4);
        }

        //??????
        public void Remove(Action<T1, T2, T3, T4, T5> action)
        {
            _action -= action;
        }
    }

    #endregion

    #region ???????

    public void AddEventListening(string eventName, Action action)
    {
        //????????????? ???eventName ????? ?  ????????? ? (???? e )
        if (_eventCenter.TryGetValue(eventName, out var e))
        {
            //?????????????? e ???? EventHelp ???? ?????????е? AddCall ???? ??????
            (e as EventHelp)?.AddCall(action);
        }
        else
        {
            //?????У???????? ??? ???????????? (new ???)
            _eventCenter.Add(eventName, new EventHelp(action));
        }
    }
    public void AddEventListening<T>(string eventName, Action<T> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T>)?.AddCall(action);
        }
        else
        {
            _eventCenter.Add(eventName, new EventHelp<T>(action));
        }
    }
    public void AddEventListening<T1, T2>(string eventName, Action<T1, T2> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2>)?.AddCall(action);
        }
        else
        {
            _eventCenter.Add(eventName, new EventHelp<T1, T2>(action));
        }
    }
    public void AddEventListening<T1, T2, T3>(string eventName, Action<T1, T2, T3> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3>)?.AddCall(action);
        }
        else
        {
            _eventCenter.Add(eventName, new EventHelp<T1, T2, T3>(action));
        }
    }
    public void AddEventListening<T1, T2, T3, T4>(string eventName, Action<T1, T2, T3, T4> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4>)?.AddCall(action);
        }
        else
        {
            _eventCenter.Add(eventName, new EventHelp<T1, T2, T3, T4>(action));
        }
    }
    public void AddEventListening<T1, T2, T3, T4, T5>(string eventName, Action<T1, T2, T3, T4, T5> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4, T5>)?.AddCall(action);
        }
        else
        {
            _eventCenter.Add(eventName, new EventHelp<T1, T2, T3, T4, T5>(action));
        }
    }

    #endregion

    #region ???????
    public void CallEvent(string eventName)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp)?.Call();
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }
    public void CallEvent<T>(string eventName, T value)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T>)?.Call(value);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }
    public void CallEvent<T1, T2>(string eventName, T1 value, T2 value1)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2>)?.Call(value, value1);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }
    public void CallEvent<T1, T2, T3>(string eventName, T1 value, T2 value1, T3 value2)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3>)?.Call(value, value1, value2);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }
    public void CallEvent<T1, T2, T3, T4>(string eventName, T1 value, T2 value1, T3 value2, T4 value3)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4>)?.Call(value, value1, value2, value3);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }
    public void CallEvent<T1, T2, T3, T4, T5>(string eventName, T1 value, T2 value1, T3 value2, T4 value3, T5 value4)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4, T5>)?.Call(value, value1, value2, value3, value4);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}????????????и????");
        }
    }

    #endregion

    #region ??????
    public void RemoveEvent(string eventName, Action action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }
    public void RemoveEvent<T>(string eventName, Action<T> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T>)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }
    public void RemoveEvent<T1, T2>(string eventName, Action<T1, T2> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2>)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }
    public void RemoveEvent<T1, T2, T3>(string eventName, Action<T1, T2, T3> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3>)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }
    public void RemoveEvent<T1, T2, T3, T4>(string eventName, Action<T1, T2, T3, T4> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4>)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }
    public void RemoveEvent<T1, T2, T3, T4, T5>(string eventName, Action<T1, T2, T3, T4, T5> action)
    {
        if (_eventCenter.TryGetValue(eventName, out var e))//????????????
        {
            (e as EventHelp<T1, T2, T3, T4, T5>)?.Remove(action);
        }
        else
        {
            DevelopmentToos.WTF($"???δ???{eventName}??????????????????");
        }
    }

    #endregion

}


using GGG.Tool;
using HealthData;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static CharacterComboData;

namespace Health
{
    #region ??????????

    public interface IDamaged
    {
        void CharacterNormalDamaged(string hitName, string parryName, float damage, Transform attack, DamageType damageType);
    }

    #endregion
    public abstract class CharacterNewHealthBase : MonoBehaviour, IHealth, IDamaged
    {
        //???????????????е????????????д?????????
        //??????????????????????

        #region ???????

        protected Animator animator;

        protected Transform _currentAttack;//????????????????????

        [SerializeField, Header("???????????")] protected CharacterHealthInfo _healthInfo;

        protected CharacterHealthInfo _characterHealthInfo;

        #endregion

        #region ???????????

        protected virtual void Awake()
        {
            animator = this.GetComponent<Animator>();
        }

        protected virtual void Start()
        {
            _characterHealthInfo.InitCharacterHealthInfo();
        }

        protected virtual void Update()
        {
            OnHitParryLookAttacker();
        }

        #endregion

        #region ???????

        #region ???????

        /// <summary>
        /// ??????????
        /// </summary>
        /// <param name="hitName">???????</param>
        /// <param name="parryName">?????</param>
        protected virtual void CharacterHitAction(float damage, string hitName, string parryName)
        {
            //?????????д???????
            //???????? ?????????????

            //??????????????? ??ж??? ?????
        }

        #endregion

        #region ???????

        /// <summary>
        /// ?????????????
        /// </summary>
        /// <param name="attacker"></param>
        private void SettingAttakcer(Transform attacker)
        {
            //??????? ???????? ?????????????????????
            if (_currentAttack == null || _currentAttack != attacker)
            {
                _currentAttack = attacker;
            }
        }

        #endregion

        #region ??????

        protected virtual void TakeDamage(float damage, bool hasParry = false)
        {
            _characterHealthInfo.Damage(damage, hasParry);
        }

        #endregion

        #region ???????

        #region ???????????

        private void OnCharacterHitEventHandler(float damage, string hitName, string parryName, Transform attacker,
    Transform self)
        {
            //??????? ???????? ?????????? ???
            //?????????????????????????????????????????

            //???? ??????????????????????????????????????λ????ж??????????????????????λ??
            //?????ж??????????????????????self ?ж????????????????

            //??????????? self ????????????????????
            if (self != this.transform)
            {
                return;
            }

            SettingAttakcer(attacker);//???????????????

            CharacterHitAction(damage, hitName, parryName);//?????????к???????ж???

        }

        #endregion

        #endregion

        #region ????

        private void OnCharacterFinishEventHandler(string hitName, Transform attacker, Transform self)
        {
            if (self != transform)
            {
                return;
            }

            SettingAttakcer(attacker);
            animator.Play(hitName);
        }

        private void TriggerDamageEventHandler(float damage, Transform self)
        {
            if (self != transform)
            {
                return;
            }

            TakeDamage(damage);

            GamePoolManager.MainInstance.TryGetOnePoolItem("HITSound", transform.position, Quaternion.identity);

        }

        #endregion

        #region ???/?? ????

        //?????????????
        private void OnHitParryLookAttacker()
        {
            if (_currentAttack == null)
            {
                return;
            }

            if (animator.AnimationAtTag("Hit") || animator.AnimationAtTag("Parry")
                    && animator.GetCurrentAnimatorStateInfo(0).normalizedTime < 0.5f)
            {
                this.transform.Look(_currentAttack.transform.position, 50f);
            }

        }

        #endregion

        #region ?????????????????????

        #region ?????
        //??Update?е???CheackEnemyIsDie ????????????????????
        //??????????Щ??????????????????????
        //?????? IHealth ??????????????

        public bool OnDie() => _characterHealthInfo.IsDie;
        //PlayerCombat ?л??? CheackEnemyIsDie();

        #endregion

        #region ?????
        //?????????? 
        //PlayerCombat ?? EnemyCombatControl ?????????
        //???????????????????????
        //?? EnemyHealthControl ?к??????

        protected virtual void PlayDeadAnimation()
        {
            //??? ??????й??? ??????????????????????
            //?????????????? if ??? 
            //?????? ???????? ???????? ????????????
            //FinisHit ? ?????????? ???? ?????????????????????
            if (!animator.AnimationAtTag("FinishHit"))
            {
                animator.SetBool(AnimationID.IsDieID, true);
            }

        }

        #endregion

        #endregion

        #endregion

        #region ?????????????????

        //?????????????????????????
        //?????????? ???? ??????????
        public void CharacterNormalDamaged(string hitName, string parryName, float damage, Transform attack, DamageType damageType)
        {

            CharacterHitAction(damage, hitName, parryName);
        }

        #endregion

    }
}


